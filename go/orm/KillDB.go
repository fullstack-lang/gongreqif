// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Kill_sql sql.NullBool
var dummy_Kill_time time.Duration
var dummy_Kill_sort sort.Float64Slice

// KillAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model killAPI
type KillAPI struct {
	gorm.Model

	models.Kill_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	KillPointersEncoding KillPointersEncoding
}

// KillPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type KillPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// KillDB describes a kill in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model killDB
type KillDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field killDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	KillPointersEncoding
}

// KillDBs arrays killDBs
// swagger:response killDBsResponse
type KillDBs []KillDB

// KillDBResponse provides response
// swagger:response killDBResponse
type KillDBResponse struct {
	KillDB
}

// KillWOP is a Kill without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type KillWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Kill_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoKillStruct struct {
	// stores KillDB according to their gorm ID
	Map_KillDBID_KillDB map[uint]*KillDB

	// stores KillDB ID according to Kill address
	Map_KillPtr_KillDBID map[*models.Kill]uint

	// stores Kill according to their gorm ID
	Map_KillDBID_KillPtr map[uint]*models.Kill

	db db.DBInterface

	stage *models.Stage
}

func (backRepoKill *BackRepoKillStruct) GetStage() (stage *models.Stage) {
	stage = backRepoKill.stage
	return
}

func (backRepoKill *BackRepoKillStruct) GetDB() db.DBInterface {
	return backRepoKill.db
}

// GetKillDBFromKillPtr is a handy function to access the back repo instance from the stage instance
func (backRepoKill *BackRepoKillStruct) GetKillDBFromKillPtr(kill *models.Kill) (killDB *KillDB) {
	id := backRepoKill.Map_KillPtr_KillDBID[kill]
	killDB = backRepoKill.Map_KillDBID_KillDB[id]
	return
}

// BackRepoKill.CommitPhaseOne commits all staged instances of Kill to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKill *BackRepoKillStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var kills []*models.Kill
	for kill := range stage.Kills {
		kills = append(kills, kill)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(kills, func(i, j int) bool {
		return stage.KillMap_Staged_Order[kills[i]] < stage.KillMap_Staged_Order[kills[j]]
	})

	for _, kill := range kills {
		backRepoKill.CommitPhaseOneInstance(kill)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, kill := range backRepoKill.Map_KillDBID_KillPtr {
		if _, ok := stage.Kills[kill]; !ok {
			backRepoKill.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoKill.CommitDeleteInstance commits deletion of Kill to the BackRepo
func (backRepoKill *BackRepoKillStruct) CommitDeleteInstance(id uint) (Error error) {

	kill := backRepoKill.Map_KillDBID_KillPtr[id]

	// kill is not staged anymore, remove killDB
	killDB := backRepoKill.Map_KillDBID_KillDB[id]
	db, _ := backRepoKill.db.Unscoped()
	_, err := db.Delete(killDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoKill.Map_KillPtr_KillDBID, kill)
	delete(backRepoKill.Map_KillDBID_KillPtr, id)
	delete(backRepoKill.Map_KillDBID_KillDB, id)

	return
}

// BackRepoKill.CommitPhaseOneInstance commits kill staged instances of Kill to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKill *BackRepoKillStruct) CommitPhaseOneInstance(kill *models.Kill) (Error error) {

	// check if the kill is not commited yet
	if _, ok := backRepoKill.Map_KillPtr_KillDBID[kill]; ok {
		return
	}

	// initiate kill
	var killDB KillDB
	killDB.CopyBasicFieldsFromKill(kill)

	_, err := backRepoKill.db.Create(&killDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoKill.Map_KillPtr_KillDBID[kill] = killDB.ID
	backRepoKill.Map_KillDBID_KillPtr[killDB.ID] = kill
	backRepoKill.Map_KillDBID_KillDB[killDB.ID] = &killDB

	return
}

// BackRepoKill.CommitPhaseTwo commits all staged instances of Kill to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKill *BackRepoKillStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, kill := range backRepoKill.Map_KillDBID_KillPtr {
		backRepoKill.CommitPhaseTwoInstance(backRepo, idx, kill)
	}

	return
}

// BackRepoKill.CommitPhaseTwoInstance commits {{structname }} of models.Kill to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKill *BackRepoKillStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, kill *models.Kill) (Error error) {

	// fetch matching killDB
	if killDB, ok := backRepoKill.Map_KillDBID_KillDB[idx]; ok {

		killDB.CopyBasicFieldsFromKill(kill)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoKill.db.Save(killDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Kill intance %s", kill.Name))
		return err
	}

	return
}

// BackRepoKill.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoKill *BackRepoKillStruct) CheckoutPhaseOne() (Error error) {

	killDBArray := make([]KillDB, 0)
	_, err := backRepoKill.db.Find(&killDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	killInstancesToBeRemovedFromTheStage := make(map[*models.Kill]any)
	for key, value := range backRepoKill.stage.Kills {
		killInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, killDB := range killDBArray {
		backRepoKill.CheckoutPhaseOneInstance(&killDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		kill, ok := backRepoKill.Map_KillDBID_KillPtr[killDB.ID]
		if ok {
			delete(killInstancesToBeRemovedFromTheStage, kill)
		}
	}

	// remove from stage and back repo's 3 maps all kills that are not in the checkout
	for kill := range killInstancesToBeRemovedFromTheStage {
		kill.Unstage(backRepoKill.GetStage())

		// remove instance from the back repo 3 maps
		killID := backRepoKill.Map_KillPtr_KillDBID[kill]
		delete(backRepoKill.Map_KillPtr_KillDBID, kill)
		delete(backRepoKill.Map_KillDBID_KillDB, killID)
		delete(backRepoKill.Map_KillDBID_KillPtr, killID)
	}

	return
}

// CheckoutPhaseOneInstance takes a killDB that has been found in the DB, updates the backRepo and stages the
// models version of the killDB
func (backRepoKill *BackRepoKillStruct) CheckoutPhaseOneInstance(killDB *KillDB) (Error error) {

	kill, ok := backRepoKill.Map_KillDBID_KillPtr[killDB.ID]
	if !ok {
		kill = new(models.Kill)

		backRepoKill.Map_KillDBID_KillPtr[killDB.ID] = kill
		backRepoKill.Map_KillPtr_KillDBID[kill] = killDB.ID

		// append model store with the new element
		kill.Name = killDB.Name_Data.String
		kill.Stage(backRepoKill.GetStage())
	}
	killDB.CopyBasicFieldsToKill(kill)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	kill.Stage(backRepoKill.GetStage())

	// preserve pointer to killDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_KillDBID_KillDB)[killDB hold variable pointers
	killDB_Data := *killDB
	preservedPtrToKill := &killDB_Data
	backRepoKill.Map_KillDBID_KillDB[killDB.ID] = preservedPtrToKill

	return
}

// BackRepoKill.CheckoutPhaseTwo Checkouts all staged instances of Kill to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKill *BackRepoKillStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, killDB := range backRepoKill.Map_KillDBID_KillDB {
		backRepoKill.CheckoutPhaseTwoInstance(backRepo, killDB)
	}
	return
}

// BackRepoKill.CheckoutPhaseTwoInstance Checkouts staged instances of Kill to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKill *BackRepoKillStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, killDB *KillDB) (Error error) {

	kill := backRepoKill.Map_KillDBID_KillPtr[killDB.ID]

	killDB.DecodePointers(backRepo, kill)

	return
}

func (killDB *KillDB) DecodePointers(backRepo *BackRepoStruct, kill *models.Kill) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitKill allows commit of a single kill (if already staged)
func (backRepo *BackRepoStruct) CommitKill(kill *models.Kill) {
	backRepo.BackRepoKill.CommitPhaseOneInstance(kill)
	if id, ok := backRepo.BackRepoKill.Map_KillPtr_KillDBID[kill]; ok {
		backRepo.BackRepoKill.CommitPhaseTwoInstance(backRepo, id, kill)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitKill allows checkout of a single kill (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutKill(kill *models.Kill) {
	// check if the kill is staged
	if _, ok := backRepo.BackRepoKill.Map_KillPtr_KillDBID[kill]; ok {

		if id, ok := backRepo.BackRepoKill.Map_KillPtr_KillDBID[kill]; ok {
			var killDB KillDB
			killDB.ID = id

			if _, err := backRepo.BackRepoKill.db.First(&killDB, id); err != nil {
				log.Fatalln("CheckoutKill : Problem with getting object with id:", id)
			}
			backRepo.BackRepoKill.CheckoutPhaseOneInstance(&killDB)
			backRepo.BackRepoKill.CheckoutPhaseTwoInstance(backRepo, &killDB)
		}
	}
}

// CopyBasicFieldsFromKill
func (killDB *KillDB) CopyBasicFieldsFromKill(kill *models.Kill) {
	// insertion point for fields commit

	killDB.Name_Data.String = kill.Name
	killDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromKill_WOP
func (killDB *KillDB) CopyBasicFieldsFromKill_WOP(kill *models.Kill_WOP) {
	// insertion point for fields commit

	killDB.Name_Data.String = kill.Name
	killDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromKillWOP
func (killDB *KillDB) CopyBasicFieldsFromKillWOP(kill *KillWOP) {
	// insertion point for fields commit

	killDB.Name_Data.String = kill.Name
	killDB.Name_Data.Valid = true
}

// CopyBasicFieldsToKill
func (killDB *KillDB) CopyBasicFieldsToKill(kill *models.Kill) {
	// insertion point for checkout of basic fields (back repo to stage)
	kill.Name = killDB.Name_Data.String
}

// CopyBasicFieldsToKill_WOP
func (killDB *KillDB) CopyBasicFieldsToKill_WOP(kill *models.Kill_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	kill.Name = killDB.Name_Data.String
}

// CopyBasicFieldsToKillWOP
func (killDB *KillDB) CopyBasicFieldsToKillWOP(kill *KillWOP) {
	kill.ID = int(killDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	kill.Name = killDB.Name_Data.String
}

// Backup generates a json file from a slice of all KillDB instances in the backrepo
func (backRepoKill *BackRepoKillStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "KillDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KillDB, 0)
	for _, killDB := range backRepoKill.Map_KillDBID_KillDB {
		forBackup = append(forBackup, killDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Kill ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Kill file", err.Error())
	}
}

// Backup generates a json file from a slice of all KillDB instances in the backrepo
func (backRepoKill *BackRepoKillStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KillDB, 0)
	for _, killDB := range backRepoKill.Map_KillDBID_KillDB {
		forBackup = append(forBackup, killDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Kill")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Kill_Fields, -1)
	for _, killDB := range forBackup {

		var killWOP KillWOP
		killDB.CopyBasicFieldsToKillWOP(&killWOP)

		row := sh.AddRow()
		row.WriteStruct(&killWOP, -1)
	}
}

// RestoreXL from the "Kill" sheet all KillDB instances
func (backRepoKill *BackRepoKillStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoKillid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Kill"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoKill.rowVisitorKill)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoKill *BackRepoKillStruct) rowVisitorKill(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var killWOP KillWOP
		row.ReadStruct(&killWOP)

		// add the unmarshalled struct to the stage
		killDB := new(KillDB)
		killDB.CopyBasicFieldsFromKillWOP(&killWOP)

		killDB_ID_atBackupTime := killDB.ID
		killDB.ID = 0
		_, err := backRepoKill.db.Create(killDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoKill.Map_KillDBID_KillDB[killDB.ID] = killDB
		BackRepoKillid_atBckpTime_newID[killDB_ID_atBackupTime] = killDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "KillDB.json" in dirPath that stores an array
// of KillDB and stores it in the database
// the map BackRepoKillid_atBckpTime_newID is updated accordingly
func (backRepoKill *BackRepoKillStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoKillid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "KillDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Kill file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*KillDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_KillDBID_KillDB
	for _, killDB := range forRestore {

		killDB_ID_atBackupTime := killDB.ID
		killDB.ID = 0
		_, err := backRepoKill.db.Create(killDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoKill.Map_KillDBID_KillDB[killDB.ID] = killDB
		BackRepoKillid_atBckpTime_newID[killDB_ID_atBackupTime] = killDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Kill file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Kill>id_atBckpTime_newID
// to compute new index
func (backRepoKill *BackRepoKillStruct) RestorePhaseTwo() {

	for _, killDB := range backRepoKill.Map_KillDBID_KillDB {

		// next line of code is to avert unused variable compilation error
		_ = killDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoKill.db.Model(killDB)
		_, err := db.Updates(*killDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoKill.ResetReversePointers commits all staged instances of Kill to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKill *BackRepoKillStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, kill := range backRepoKill.Map_KillDBID_KillPtr {
		backRepoKill.ResetReversePointersInstance(backRepo, idx, kill)
	}

	return
}

func (backRepoKill *BackRepoKillStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, kill *models.Kill) (Error error) {

	// fetch matching killDB
	if killDB, ok := backRepoKill.Map_KillDBID_KillDB[idx]; ok {
		_ = killDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoKillid_atBckpTime_newID map[uint]uint
