// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_StaticWebSiteGeneratedImage_sql sql.NullBool
var dummy_StaticWebSiteGeneratedImage_time time.Duration
var dummy_StaticWebSiteGeneratedImage_sort sort.Float64Slice

// StaticWebSiteGeneratedImageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model staticwebsitegeneratedimageAPI
type StaticWebSiteGeneratedImageAPI struct {
	gorm.Model

	models.StaticWebSiteGeneratedImage_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	StaticWebSiteGeneratedImagePointersEncoding StaticWebSiteGeneratedImagePointersEncoding
}

// StaticWebSiteGeneratedImagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type StaticWebSiteGeneratedImagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// StaticWebSiteGeneratedImageDB describes a staticwebsitegeneratedimage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model staticwebsitegeneratedimageDB
type StaticWebSiteGeneratedImageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field staticwebsitegeneratedimageDB.Name
	Name_Data sql.NullString

	// Declation for basic field staticwebsitegeneratedimageDB.SourceDirectoryPath
	SourceDirectoryPath_Data sql.NullString

	// Declation for basic field staticwebsitegeneratedimageDB.Width
	Width_Data sql.NullInt64

	// Declation for basic field staticwebsitegeneratedimageDB.Height
	Height_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	StaticWebSiteGeneratedImagePointersEncoding
}

// StaticWebSiteGeneratedImageDBs arrays staticwebsitegeneratedimageDBs
// swagger:response staticwebsitegeneratedimageDBsResponse
type StaticWebSiteGeneratedImageDBs []StaticWebSiteGeneratedImageDB

// StaticWebSiteGeneratedImageDBResponse provides response
// swagger:response staticwebsitegeneratedimageDBResponse
type StaticWebSiteGeneratedImageDBResponse struct {
	StaticWebSiteGeneratedImageDB
}

// StaticWebSiteGeneratedImageWOP is a StaticWebSiteGeneratedImage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type StaticWebSiteGeneratedImageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SourceDirectoryPath string `xlsx:"2"`

	Width int `xlsx:"3"`

	Height int `xlsx:"4"`
	// insertion for WOP pointer fields
}

var StaticWebSiteGeneratedImage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SourceDirectoryPath",
	"Width",
	"Height",
}

type BackRepoStaticWebSiteGeneratedImageStruct struct {
	// stores StaticWebSiteGeneratedImageDB according to their gorm ID
	Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB map[uint]*StaticWebSiteGeneratedImageDB

	// stores StaticWebSiteGeneratedImageDB ID according to StaticWebSiteGeneratedImage address
	Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID map[*models.StaticWebSiteGeneratedImage]uint

	// stores StaticWebSiteGeneratedImage according to their gorm ID
	Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr map[uint]*models.StaticWebSiteGeneratedImage

	db db.DBInterface

	stage *models.Stage
}

func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoStaticWebSiteGeneratedImage.stage
	return
}

func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) GetDB() db.DBInterface {
	return backRepoStaticWebSiteGeneratedImage.db
}

// GetStaticWebSiteGeneratedImageDBFromStaticWebSiteGeneratedImagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) GetStaticWebSiteGeneratedImageDBFromStaticWebSiteGeneratedImagePtr(staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) (staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) {
	id := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID[staticwebsitegeneratedimage]
	staticwebsitegeneratedimageDB = backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB[id]
	return
}

// BackRepoStaticWebSiteGeneratedImage.CommitPhaseOne commits all staged instances of StaticWebSiteGeneratedImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var staticwebsitegeneratedimages []*models.StaticWebSiteGeneratedImage
	for staticwebsitegeneratedimage := range stage.StaticWebSiteGeneratedImages {
		staticwebsitegeneratedimages = append(staticwebsitegeneratedimages, staticwebsitegeneratedimage)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(staticwebsitegeneratedimages, func(i, j int) bool {
		return stage.StaticWebSiteGeneratedImageMap_Staged_Order[staticwebsitegeneratedimages[i]] < stage.StaticWebSiteGeneratedImageMap_Staged_Order[staticwebsitegeneratedimages[j]]
	})

	for _, staticwebsitegeneratedimage := range staticwebsitegeneratedimages {
		backRepoStaticWebSiteGeneratedImage.CommitPhaseOneInstance(staticwebsitegeneratedimage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, staticwebsitegeneratedimage := range backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr {
		if _, ok := stage.StaticWebSiteGeneratedImages[staticwebsitegeneratedimage]; !ok {
			backRepoStaticWebSiteGeneratedImage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStaticWebSiteGeneratedImage.CommitDeleteInstance commits deletion of StaticWebSiteGeneratedImage to the BackRepo
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CommitDeleteInstance(id uint) (Error error) {

	staticwebsitegeneratedimage := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr[id]

	// staticwebsitegeneratedimage is not staged anymore, remove staticwebsitegeneratedimageDB
	staticwebsitegeneratedimageDB := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB[id]
	db, _ := backRepoStaticWebSiteGeneratedImage.db.Unscoped()
	_, err := db.Delete(staticwebsitegeneratedimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID, staticwebsitegeneratedimage)
	delete(backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr, id)
	delete(backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB, id)

	return
}

// BackRepoStaticWebSiteGeneratedImage.CommitPhaseOneInstance commits staticwebsitegeneratedimage staged instances of StaticWebSiteGeneratedImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CommitPhaseOneInstance(staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) (Error error) {

	// check if the staticwebsitegeneratedimage is not commited yet
	if _, ok := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID[staticwebsitegeneratedimage]; ok {
		return
	}

	// initiate staticwebsitegeneratedimage
	var staticwebsitegeneratedimageDB StaticWebSiteGeneratedImageDB
	staticwebsitegeneratedimageDB.CopyBasicFieldsFromStaticWebSiteGeneratedImage(staticwebsitegeneratedimage)

	_, err := backRepoStaticWebSiteGeneratedImage.db.Create(&staticwebsitegeneratedimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID[staticwebsitegeneratedimage] = staticwebsitegeneratedimageDB.ID
	backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr[staticwebsitegeneratedimageDB.ID] = staticwebsitegeneratedimage
	backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB[staticwebsitegeneratedimageDB.ID] = &staticwebsitegeneratedimageDB

	return
}

// BackRepoStaticWebSiteGeneratedImage.CommitPhaseTwo commits all staged instances of StaticWebSiteGeneratedImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, staticwebsitegeneratedimage := range backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr {
		backRepoStaticWebSiteGeneratedImage.CommitPhaseTwoInstance(backRepo, idx, staticwebsitegeneratedimage)
	}

	return
}

// BackRepoStaticWebSiteGeneratedImage.CommitPhaseTwoInstance commits {{structname }} of models.StaticWebSiteGeneratedImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) (Error error) {

	// fetch matching staticwebsitegeneratedimageDB
	if staticwebsitegeneratedimageDB, ok := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB[idx]; ok {

		staticwebsitegeneratedimageDB.CopyBasicFieldsFromStaticWebSiteGeneratedImage(staticwebsitegeneratedimage)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoStaticWebSiteGeneratedImage.db.Save(staticwebsitegeneratedimageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown StaticWebSiteGeneratedImage intance %s", staticwebsitegeneratedimage.Name))
		return err
	}

	return
}

// BackRepoStaticWebSiteGeneratedImage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CheckoutPhaseOne() (Error error) {

	staticwebsitegeneratedimageDBArray := make([]StaticWebSiteGeneratedImageDB, 0)
	_, err := backRepoStaticWebSiteGeneratedImage.db.Find(&staticwebsitegeneratedimageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	staticwebsitegeneratedimageInstancesToBeRemovedFromTheStage := make(map[*models.StaticWebSiteGeneratedImage]any)
	for key, value := range backRepoStaticWebSiteGeneratedImage.stage.StaticWebSiteGeneratedImages {
		staticwebsitegeneratedimageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, staticwebsitegeneratedimageDB := range staticwebsitegeneratedimageDBArray {
		backRepoStaticWebSiteGeneratedImage.CheckoutPhaseOneInstance(&staticwebsitegeneratedimageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		staticwebsitegeneratedimage, ok := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr[staticwebsitegeneratedimageDB.ID]
		if ok {
			delete(staticwebsitegeneratedimageInstancesToBeRemovedFromTheStage, staticwebsitegeneratedimage)
		}
	}

	// remove from stage and back repo's 3 maps all staticwebsitegeneratedimages that are not in the checkout
	for staticwebsitegeneratedimage := range staticwebsitegeneratedimageInstancesToBeRemovedFromTheStage {
		staticwebsitegeneratedimage.Unstage(backRepoStaticWebSiteGeneratedImage.GetStage())

		// remove instance from the back repo 3 maps
		staticwebsitegeneratedimageID := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID[staticwebsitegeneratedimage]
		delete(backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID, staticwebsitegeneratedimage)
		delete(backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB, staticwebsitegeneratedimageID)
		delete(backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr, staticwebsitegeneratedimageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a staticwebsitegeneratedimageDB that has been found in the DB, updates the backRepo and stages the
// models version of the staticwebsitegeneratedimageDB
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CheckoutPhaseOneInstance(staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) (Error error) {

	staticwebsitegeneratedimage, ok := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr[staticwebsitegeneratedimageDB.ID]
	if !ok {
		staticwebsitegeneratedimage = new(models.StaticWebSiteGeneratedImage)

		backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr[staticwebsitegeneratedimageDB.ID] = staticwebsitegeneratedimage
		backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID[staticwebsitegeneratedimage] = staticwebsitegeneratedimageDB.ID

		// append model store with the new element
		staticwebsitegeneratedimage.Name = staticwebsitegeneratedimageDB.Name_Data.String
		staticwebsitegeneratedimage.Stage(backRepoStaticWebSiteGeneratedImage.GetStage())
	}
	staticwebsitegeneratedimageDB.CopyBasicFieldsToStaticWebSiteGeneratedImage(staticwebsitegeneratedimage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	staticwebsitegeneratedimage.Stage(backRepoStaticWebSiteGeneratedImage.GetStage())

	// preserve pointer to staticwebsitegeneratedimageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB)[staticwebsitegeneratedimageDB hold variable pointers
	staticwebsitegeneratedimageDB_Data := *staticwebsitegeneratedimageDB
	preservedPtrToStaticWebSiteGeneratedImage := &staticwebsitegeneratedimageDB_Data
	backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB[staticwebsitegeneratedimageDB.ID] = preservedPtrToStaticWebSiteGeneratedImage

	return
}

// BackRepoStaticWebSiteGeneratedImage.CheckoutPhaseTwo Checkouts all staged instances of StaticWebSiteGeneratedImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, staticwebsitegeneratedimageDB := range backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB {
		backRepoStaticWebSiteGeneratedImage.CheckoutPhaseTwoInstance(backRepo, staticwebsitegeneratedimageDB)
	}
	return
}

// BackRepoStaticWebSiteGeneratedImage.CheckoutPhaseTwoInstance Checkouts staged instances of StaticWebSiteGeneratedImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) (Error error) {

	staticwebsitegeneratedimage := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr[staticwebsitegeneratedimageDB.ID]

	staticwebsitegeneratedimageDB.DecodePointers(backRepo, staticwebsitegeneratedimage)

	return
}

func (staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) DecodePointers(backRepo *BackRepoStruct, staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStaticWebSiteGeneratedImage allows commit of a single staticwebsitegeneratedimage (if already staged)
func (backRepo *BackRepoStruct) CommitStaticWebSiteGeneratedImage(staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) {
	backRepo.BackRepoStaticWebSiteGeneratedImage.CommitPhaseOneInstance(staticwebsitegeneratedimage)
	if id, ok := backRepo.BackRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID[staticwebsitegeneratedimage]; ok {
		backRepo.BackRepoStaticWebSiteGeneratedImage.CommitPhaseTwoInstance(backRepo, id, staticwebsitegeneratedimage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStaticWebSiteGeneratedImage allows checkout of a single staticwebsitegeneratedimage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStaticWebSiteGeneratedImage(staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) {
	// check if the staticwebsitegeneratedimage is staged
	if _, ok := backRepo.BackRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID[staticwebsitegeneratedimage]; ok {

		if id, ok := backRepo.BackRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImagePtr_StaticWebSiteGeneratedImageDBID[staticwebsitegeneratedimage]; ok {
			var staticwebsitegeneratedimageDB StaticWebSiteGeneratedImageDB
			staticwebsitegeneratedimageDB.ID = id

			if _, err := backRepo.BackRepoStaticWebSiteGeneratedImage.db.First(&staticwebsitegeneratedimageDB, id); err != nil {
				log.Fatalln("CheckoutStaticWebSiteGeneratedImage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStaticWebSiteGeneratedImage.CheckoutPhaseOneInstance(&staticwebsitegeneratedimageDB)
			backRepo.BackRepoStaticWebSiteGeneratedImage.CheckoutPhaseTwoInstance(backRepo, &staticwebsitegeneratedimageDB)
		}
	}
}

// CopyBasicFieldsFromStaticWebSiteGeneratedImage
func (staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) CopyBasicFieldsFromStaticWebSiteGeneratedImage(staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) {
	// insertion point for fields commit

	staticwebsitegeneratedimageDB.Name_Data.String = staticwebsitegeneratedimage.Name
	staticwebsitegeneratedimageDB.Name_Data.Valid = true

	staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.String = staticwebsitegeneratedimage.SourceDirectoryPath
	staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.Valid = true

	staticwebsitegeneratedimageDB.Width_Data.Int64 = int64(staticwebsitegeneratedimage.Width)
	staticwebsitegeneratedimageDB.Width_Data.Valid = true

	staticwebsitegeneratedimageDB.Height_Data.Int64 = int64(staticwebsitegeneratedimage.Height)
	staticwebsitegeneratedimageDB.Height_Data.Valid = true
}

// CopyBasicFieldsFromStaticWebSiteGeneratedImage_WOP
func (staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) CopyBasicFieldsFromStaticWebSiteGeneratedImage_WOP(staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage_WOP) {
	// insertion point for fields commit

	staticwebsitegeneratedimageDB.Name_Data.String = staticwebsitegeneratedimage.Name
	staticwebsitegeneratedimageDB.Name_Data.Valid = true

	staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.String = staticwebsitegeneratedimage.SourceDirectoryPath
	staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.Valid = true

	staticwebsitegeneratedimageDB.Width_Data.Int64 = int64(staticwebsitegeneratedimage.Width)
	staticwebsitegeneratedimageDB.Width_Data.Valid = true

	staticwebsitegeneratedimageDB.Height_Data.Int64 = int64(staticwebsitegeneratedimage.Height)
	staticwebsitegeneratedimageDB.Height_Data.Valid = true
}

// CopyBasicFieldsFromStaticWebSiteGeneratedImageWOP
func (staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) CopyBasicFieldsFromStaticWebSiteGeneratedImageWOP(staticwebsitegeneratedimage *StaticWebSiteGeneratedImageWOP) {
	// insertion point for fields commit

	staticwebsitegeneratedimageDB.Name_Data.String = staticwebsitegeneratedimage.Name
	staticwebsitegeneratedimageDB.Name_Data.Valid = true

	staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.String = staticwebsitegeneratedimage.SourceDirectoryPath
	staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.Valid = true

	staticwebsitegeneratedimageDB.Width_Data.Int64 = int64(staticwebsitegeneratedimage.Width)
	staticwebsitegeneratedimageDB.Width_Data.Valid = true

	staticwebsitegeneratedimageDB.Height_Data.Int64 = int64(staticwebsitegeneratedimage.Height)
	staticwebsitegeneratedimageDB.Height_Data.Valid = true
}

// CopyBasicFieldsToStaticWebSiteGeneratedImage
func (staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) CopyBasicFieldsToStaticWebSiteGeneratedImage(staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) {
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsitegeneratedimage.Name = staticwebsitegeneratedimageDB.Name_Data.String
	staticwebsitegeneratedimage.SourceDirectoryPath = staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.String
	staticwebsitegeneratedimage.Width = int(staticwebsitegeneratedimageDB.Width_Data.Int64)
	staticwebsitegeneratedimage.Height = int(staticwebsitegeneratedimageDB.Height_Data.Int64)
}

// CopyBasicFieldsToStaticWebSiteGeneratedImage_WOP
func (staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) CopyBasicFieldsToStaticWebSiteGeneratedImage_WOP(staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsitegeneratedimage.Name = staticwebsitegeneratedimageDB.Name_Data.String
	staticwebsitegeneratedimage.SourceDirectoryPath = staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.String
	staticwebsitegeneratedimage.Width = int(staticwebsitegeneratedimageDB.Width_Data.Int64)
	staticwebsitegeneratedimage.Height = int(staticwebsitegeneratedimageDB.Height_Data.Int64)
}

// CopyBasicFieldsToStaticWebSiteGeneratedImageWOP
func (staticwebsitegeneratedimageDB *StaticWebSiteGeneratedImageDB) CopyBasicFieldsToStaticWebSiteGeneratedImageWOP(staticwebsitegeneratedimage *StaticWebSiteGeneratedImageWOP) {
	staticwebsitegeneratedimage.ID = int(staticwebsitegeneratedimageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsitegeneratedimage.Name = staticwebsitegeneratedimageDB.Name_Data.String
	staticwebsitegeneratedimage.SourceDirectoryPath = staticwebsitegeneratedimageDB.SourceDirectoryPath_Data.String
	staticwebsitegeneratedimage.Width = int(staticwebsitegeneratedimageDB.Width_Data.Int64)
	staticwebsitegeneratedimage.Height = int(staticwebsitegeneratedimageDB.Height_Data.Int64)
}

// Backup generates a json file from a slice of all StaticWebSiteGeneratedImageDB instances in the backrepo
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "StaticWebSiteGeneratedImageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StaticWebSiteGeneratedImageDB, 0)
	for _, staticwebsitegeneratedimageDB := range backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB {
		forBackup = append(forBackup, staticwebsitegeneratedimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json StaticWebSiteGeneratedImage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json StaticWebSiteGeneratedImage file", err.Error())
	}
}

// Backup generates a json file from a slice of all StaticWebSiteGeneratedImageDB instances in the backrepo
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StaticWebSiteGeneratedImageDB, 0)
	for _, staticwebsitegeneratedimageDB := range backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB {
		forBackup = append(forBackup, staticwebsitegeneratedimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("StaticWebSiteGeneratedImage")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&StaticWebSiteGeneratedImage_Fields, -1)
	for _, staticwebsitegeneratedimageDB := range forBackup {

		var staticwebsitegeneratedimageWOP StaticWebSiteGeneratedImageWOP
		staticwebsitegeneratedimageDB.CopyBasicFieldsToStaticWebSiteGeneratedImageWOP(&staticwebsitegeneratedimageWOP)

		row := sh.AddRow()
		row.WriteStruct(&staticwebsitegeneratedimageWOP, -1)
	}
}

// RestoreXL from the "StaticWebSiteGeneratedImage" sheet all StaticWebSiteGeneratedImageDB instances
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStaticWebSiteGeneratedImageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["StaticWebSiteGeneratedImage"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStaticWebSiteGeneratedImage.rowVisitorStaticWebSiteGeneratedImage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) rowVisitorStaticWebSiteGeneratedImage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var staticwebsitegeneratedimageWOP StaticWebSiteGeneratedImageWOP
		row.ReadStruct(&staticwebsitegeneratedimageWOP)

		// add the unmarshalled struct to the stage
		staticwebsitegeneratedimageDB := new(StaticWebSiteGeneratedImageDB)
		staticwebsitegeneratedimageDB.CopyBasicFieldsFromStaticWebSiteGeneratedImageWOP(&staticwebsitegeneratedimageWOP)

		staticwebsitegeneratedimageDB_ID_atBackupTime := staticwebsitegeneratedimageDB.ID
		staticwebsitegeneratedimageDB.ID = 0
		_, err := backRepoStaticWebSiteGeneratedImage.db.Create(staticwebsitegeneratedimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB[staticwebsitegeneratedimageDB.ID] = staticwebsitegeneratedimageDB
		BackRepoStaticWebSiteGeneratedImageid_atBckpTime_newID[staticwebsitegeneratedimageDB_ID_atBackupTime] = staticwebsitegeneratedimageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "StaticWebSiteGeneratedImageDB.json" in dirPath that stores an array
// of StaticWebSiteGeneratedImageDB and stores it in the database
// the map BackRepoStaticWebSiteGeneratedImageid_atBckpTime_newID is updated accordingly
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStaticWebSiteGeneratedImageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "StaticWebSiteGeneratedImageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json StaticWebSiteGeneratedImage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*StaticWebSiteGeneratedImageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB
	for _, staticwebsitegeneratedimageDB := range forRestore {

		staticwebsitegeneratedimageDB_ID_atBackupTime := staticwebsitegeneratedimageDB.ID
		staticwebsitegeneratedimageDB.ID = 0
		_, err := backRepoStaticWebSiteGeneratedImage.db.Create(staticwebsitegeneratedimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB[staticwebsitegeneratedimageDB.ID] = staticwebsitegeneratedimageDB
		BackRepoStaticWebSiteGeneratedImageid_atBckpTime_newID[staticwebsitegeneratedimageDB_ID_atBackupTime] = staticwebsitegeneratedimageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json StaticWebSiteGeneratedImage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<StaticWebSiteGeneratedImage>id_atBckpTime_newID
// to compute new index
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) RestorePhaseTwo() {

	for _, staticwebsitegeneratedimageDB := range backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB {

		// next line of code is to avert unused variable compilation error
		_ = staticwebsitegeneratedimageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoStaticWebSiteGeneratedImage.db.Model(staticwebsitegeneratedimageDB)
		_, err := db.Updates(*staticwebsitegeneratedimageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoStaticWebSiteGeneratedImage.ResetReversePointers commits all staged instances of StaticWebSiteGeneratedImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, staticwebsitegeneratedimage := range backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImagePtr {
		backRepoStaticWebSiteGeneratedImage.ResetReversePointersInstance(backRepo, idx, staticwebsitegeneratedimage)
	}

	return
}

func (backRepoStaticWebSiteGeneratedImage *BackRepoStaticWebSiteGeneratedImageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, staticwebsitegeneratedimage *models.StaticWebSiteGeneratedImage) (Error error) {

	// fetch matching staticwebsitegeneratedimageDB
	if staticwebsitegeneratedimageDB, ok := backRepoStaticWebSiteGeneratedImage.Map_StaticWebSiteGeneratedImageDBID_StaticWebSiteGeneratedImageDB[idx]; ok {
		_ = staticwebsitegeneratedimageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStaticWebSiteGeneratedImageid_atBckpTime_newID map[uint]uint
