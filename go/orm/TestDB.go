// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Test_sql sql.NullBool
var dummy_Test_time time.Duration
var dummy_Test_sort sort.Float64Slice

// TestAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model testAPI
type TestAPI struct {
	gorm.Model

	models.Test_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TestPointersEncoding TestPointersEncoding
}

// TestPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TestPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TestDB describes a test in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model testDB
type TestDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field testDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TestPointersEncoding
}

// TestDBs arrays testDBs
// swagger:response testDBsResponse
type TestDBs []TestDB

// TestDBResponse provides response
// swagger:response testDBResponse
type TestDBResponse struct {
	TestDB
}

// TestWOP is a Test without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TestWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Test_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTestStruct struct {
	// stores TestDB according to their gorm ID
	Map_TestDBID_TestDB map[uint]*TestDB

	// stores TestDB ID according to Test address
	Map_TestPtr_TestDBID map[*models.Test]uint

	// stores Test according to their gorm ID
	Map_TestDBID_TestPtr map[uint]*models.Test

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTest *BackRepoTestStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTest.stage
	return
}

func (backRepoTest *BackRepoTestStruct) GetDB() *gorm.DB {
	return backRepoTest.db
}

// GetTestDBFromTestPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTest *BackRepoTestStruct) GetTestDBFromTestPtr(test *models.Test) (testDB *TestDB) {
	id := backRepoTest.Map_TestPtr_TestDBID[test]
	testDB = backRepoTest.Map_TestDBID_TestDB[id]
	return
}

// BackRepoTest.CommitPhaseOne commits all staged instances of Test to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTest *BackRepoTestStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for test := range stage.Tests {
		backRepoTest.CommitPhaseOneInstance(test)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, test := range backRepoTest.Map_TestDBID_TestPtr {
		if _, ok := stage.Tests[test]; !ok {
			backRepoTest.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTest.CommitDeleteInstance commits deletion of Test to the BackRepo
func (backRepoTest *BackRepoTestStruct) CommitDeleteInstance(id uint) (Error error) {

	test := backRepoTest.Map_TestDBID_TestPtr[id]

	// test is not staged anymore, remove testDB
	testDB := backRepoTest.Map_TestDBID_TestDB[id]
	query := backRepoTest.db.Unscoped().Delete(&testDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTest.Map_TestPtr_TestDBID, test)
	delete(backRepoTest.Map_TestDBID_TestPtr, id)
	delete(backRepoTest.Map_TestDBID_TestDB, id)

	return
}

// BackRepoTest.CommitPhaseOneInstance commits test staged instances of Test to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTest *BackRepoTestStruct) CommitPhaseOneInstance(test *models.Test) (Error error) {

	// check if the test is not commited yet
	if _, ok := backRepoTest.Map_TestPtr_TestDBID[test]; ok {
		return
	}

	// initiate test
	var testDB TestDB
	testDB.CopyBasicFieldsFromTest(test)

	query := backRepoTest.db.Create(&testDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTest.Map_TestPtr_TestDBID[test] = testDB.ID
	backRepoTest.Map_TestDBID_TestPtr[testDB.ID] = test
	backRepoTest.Map_TestDBID_TestDB[testDB.ID] = &testDB

	return
}

// BackRepoTest.CommitPhaseTwo commits all staged instances of Test to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTest *BackRepoTestStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, test := range backRepoTest.Map_TestDBID_TestPtr {
		backRepoTest.CommitPhaseTwoInstance(backRepo, idx, test)
	}

	return
}

// BackRepoTest.CommitPhaseTwoInstance commits {{structname }} of models.Test to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTest *BackRepoTestStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, test *models.Test) (Error error) {

	// fetch matching testDB
	if testDB, ok := backRepoTest.Map_TestDBID_TestDB[idx]; ok {

		testDB.CopyBasicFieldsFromTest(test)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTest.db.Save(&testDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Test intance %s", test.Name))
		return err
	}

	return
}

// BackRepoTest.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTest *BackRepoTestStruct) CheckoutPhaseOne() (Error error) {

	testDBArray := make([]TestDB, 0)
	query := backRepoTest.db.Find(&testDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	testInstancesToBeRemovedFromTheStage := make(map[*models.Test]any)
	for key, value := range backRepoTest.stage.Tests {
		testInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, testDB := range testDBArray {
		backRepoTest.CheckoutPhaseOneInstance(&testDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		test, ok := backRepoTest.Map_TestDBID_TestPtr[testDB.ID]
		if ok {
			delete(testInstancesToBeRemovedFromTheStage, test)
		}
	}

	// remove from stage and back repo's 3 maps all tests that are not in the checkout
	for test := range testInstancesToBeRemovedFromTheStage {
		test.Unstage(backRepoTest.GetStage())

		// remove instance from the back repo 3 maps
		testID := backRepoTest.Map_TestPtr_TestDBID[test]
		delete(backRepoTest.Map_TestPtr_TestDBID, test)
		delete(backRepoTest.Map_TestDBID_TestDB, testID)
		delete(backRepoTest.Map_TestDBID_TestPtr, testID)
	}

	return
}

// CheckoutPhaseOneInstance takes a testDB that has been found in the DB, updates the backRepo and stages the
// models version of the testDB
func (backRepoTest *BackRepoTestStruct) CheckoutPhaseOneInstance(testDB *TestDB) (Error error) {

	test, ok := backRepoTest.Map_TestDBID_TestPtr[testDB.ID]
	if !ok {
		test = new(models.Test)

		backRepoTest.Map_TestDBID_TestPtr[testDB.ID] = test
		backRepoTest.Map_TestPtr_TestDBID[test] = testDB.ID

		// append model store with the new element
		test.Name = testDB.Name_Data.String
		test.Stage(backRepoTest.GetStage())
	}
	testDB.CopyBasicFieldsToTest(test)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	test.Stage(backRepoTest.GetStage())

	// preserve pointer to testDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TestDBID_TestDB)[testDB hold variable pointers
	testDB_Data := *testDB
	preservedPtrToTest := &testDB_Data
	backRepoTest.Map_TestDBID_TestDB[testDB.ID] = preservedPtrToTest

	return
}

// BackRepoTest.CheckoutPhaseTwo Checkouts all staged instances of Test to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTest *BackRepoTestStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, testDB := range backRepoTest.Map_TestDBID_TestDB {
		backRepoTest.CheckoutPhaseTwoInstance(backRepo, testDB)
	}
	return
}

// BackRepoTest.CheckoutPhaseTwoInstance Checkouts staged instances of Test to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTest *BackRepoTestStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, testDB *TestDB) (Error error) {

	test := backRepoTest.Map_TestDBID_TestPtr[testDB.ID]

	testDB.DecodePointers(backRepo, test)

	return
}

func (testDB *TestDB) DecodePointers(backRepo *BackRepoStruct, test *models.Test) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTest allows commit of a single test (if already staged)
func (backRepo *BackRepoStruct) CommitTest(test *models.Test) {
	backRepo.BackRepoTest.CommitPhaseOneInstance(test)
	if id, ok := backRepo.BackRepoTest.Map_TestPtr_TestDBID[test]; ok {
		backRepo.BackRepoTest.CommitPhaseTwoInstance(backRepo, id, test)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTest allows checkout of a single test (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTest(test *models.Test) {
	// check if the test is staged
	if _, ok := backRepo.BackRepoTest.Map_TestPtr_TestDBID[test]; ok {

		if id, ok := backRepo.BackRepoTest.Map_TestPtr_TestDBID[test]; ok {
			var testDB TestDB
			testDB.ID = id

			if err := backRepo.BackRepoTest.db.First(&testDB, id).Error; err != nil {
				log.Fatalln("CheckoutTest : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTest.CheckoutPhaseOneInstance(&testDB)
			backRepo.BackRepoTest.CheckoutPhaseTwoInstance(backRepo, &testDB)
		}
	}
}

// CopyBasicFieldsFromTest
func (testDB *TestDB) CopyBasicFieldsFromTest(test *models.Test) {
	// insertion point for fields commit

	testDB.Name_Data.String = test.Name
	testDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTest_WOP
func (testDB *TestDB) CopyBasicFieldsFromTest_WOP(test *models.Test_WOP) {
	// insertion point for fields commit

	testDB.Name_Data.String = test.Name
	testDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTestWOP
func (testDB *TestDB) CopyBasicFieldsFromTestWOP(test *TestWOP) {
	// insertion point for fields commit

	testDB.Name_Data.String = test.Name
	testDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTest
func (testDB *TestDB) CopyBasicFieldsToTest(test *models.Test) {
	// insertion point for checkout of basic fields (back repo to stage)
	test.Name = testDB.Name_Data.String
}

// CopyBasicFieldsToTest_WOP
func (testDB *TestDB) CopyBasicFieldsToTest_WOP(test *models.Test_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	test.Name = testDB.Name_Data.String
}

// CopyBasicFieldsToTestWOP
func (testDB *TestDB) CopyBasicFieldsToTestWOP(test *TestWOP) {
	test.ID = int(testDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	test.Name = testDB.Name_Data.String
}

// Backup generates a json file from a slice of all TestDB instances in the backrepo
func (backRepoTest *BackRepoTestStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TestDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TestDB, 0)
	for _, testDB := range backRepoTest.Map_TestDBID_TestDB {
		forBackup = append(forBackup, testDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Test ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Test file", err.Error())
	}
}

// Backup generates a json file from a slice of all TestDB instances in the backrepo
func (backRepoTest *BackRepoTestStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TestDB, 0)
	for _, testDB := range backRepoTest.Map_TestDBID_TestDB {
		forBackup = append(forBackup, testDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Test")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Test_Fields, -1)
	for _, testDB := range forBackup {

		var testWOP TestWOP
		testDB.CopyBasicFieldsToTestWOP(&testWOP)

		row := sh.AddRow()
		row.WriteStruct(&testWOP, -1)
	}
}

// RestoreXL from the "Test" sheet all TestDB instances
func (backRepoTest *BackRepoTestStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTestid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Test"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTest.rowVisitorTest)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTest *BackRepoTestStruct) rowVisitorTest(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var testWOP TestWOP
		row.ReadStruct(&testWOP)

		// add the unmarshalled struct to the stage
		testDB := new(TestDB)
		testDB.CopyBasicFieldsFromTestWOP(&testWOP)

		testDB_ID_atBackupTime := testDB.ID
		testDB.ID = 0
		query := backRepoTest.db.Create(testDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTest.Map_TestDBID_TestDB[testDB.ID] = testDB
		BackRepoTestid_atBckpTime_newID[testDB_ID_atBackupTime] = testDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TestDB.json" in dirPath that stores an array
// of TestDB and stores it in the database
// the map BackRepoTestid_atBckpTime_newID is updated accordingly
func (backRepoTest *BackRepoTestStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTestid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TestDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Test file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TestDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TestDBID_TestDB
	for _, testDB := range forRestore {

		testDB_ID_atBackupTime := testDB.ID
		testDB.ID = 0
		query := backRepoTest.db.Create(testDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTest.Map_TestDBID_TestDB[testDB.ID] = testDB
		BackRepoTestid_atBckpTime_newID[testDB_ID_atBackupTime] = testDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Test file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Test>id_atBckpTime_newID
// to compute new index
func (backRepoTest *BackRepoTestStruct) RestorePhaseTwo() {

	for _, testDB := range backRepoTest.Map_TestDBID_TestDB {

		// next line of code is to avert unused variable compilation error
		_ = testDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTest.db.Model(testDB).Updates(*testDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTest.ResetReversePointers commits all staged instances of Test to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTest *BackRepoTestStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, test := range backRepoTest.Map_TestDBID_TestPtr {
		backRepoTest.ResetReversePointersInstance(backRepo, idx, test)
	}

	return
}

func (backRepoTest *BackRepoTestStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, test *models.Test) (Error error) {

	// fetch matching testDB
	if testDB, ok := backRepoTest.Map_TestDBID_TestDB[idx]; ok {
		_ = testDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTestid_atBckpTime_newID map[uint]uint
