// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_StaticWebSiteImage_sql sql.NullBool
var dummy_StaticWebSiteImage_time time.Duration
var dummy_StaticWebSiteImage_sort sort.Float64Slice

// StaticWebSiteImageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model staticwebsiteimageAPI
type StaticWebSiteImageAPI struct {
	gorm.Model

	models.StaticWebSiteImage_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	StaticWebSiteImagePointersEncoding StaticWebSiteImagePointersEncoding
}

// StaticWebSiteImagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type StaticWebSiteImagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// StaticWebSiteImageDB describes a staticwebsiteimage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model staticwebsiteimageDB
type StaticWebSiteImageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field staticwebsiteimageDB.Name
	Name_Data sql.NullString

	// Declation for basic field staticwebsiteimageDB.SourceDirectoryPath
	SourceDirectoryPath_Data sql.NullString

	// Declation for basic field staticwebsiteimageDB.Width
	Width_Data sql.NullInt64

	// Declation for basic field staticwebsiteimageDB.Height
	Height_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	StaticWebSiteImagePointersEncoding
}

// StaticWebSiteImageDBs arrays staticwebsiteimageDBs
// swagger:response staticwebsiteimageDBsResponse
type StaticWebSiteImageDBs []StaticWebSiteImageDB

// StaticWebSiteImageDBResponse provides response
// swagger:response staticwebsiteimageDBResponse
type StaticWebSiteImageDBResponse struct {
	StaticWebSiteImageDB
}

// StaticWebSiteImageWOP is a StaticWebSiteImage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type StaticWebSiteImageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SourceDirectoryPath string `xlsx:"2"`

	Width int `xlsx:"3"`

	Height int `xlsx:"4"`
	// insertion for WOP pointer fields
}

var StaticWebSiteImage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SourceDirectoryPath",
	"Width",
	"Height",
}

type BackRepoStaticWebSiteImageStruct struct {
	// stores StaticWebSiteImageDB according to their gorm ID
	Map_StaticWebSiteImageDBID_StaticWebSiteImageDB map[uint]*StaticWebSiteImageDB

	// stores StaticWebSiteImageDB ID according to StaticWebSiteImage address
	Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID map[*models.StaticWebSiteImage]uint

	// stores StaticWebSiteImage according to their gorm ID
	Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr map[uint]*models.StaticWebSiteImage

	db db.DBInterface

	stage *models.Stage
}

func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoStaticWebSiteImage.stage
	return
}

func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) GetDB() db.DBInterface {
	return backRepoStaticWebSiteImage.db
}

// GetStaticWebSiteImageDBFromStaticWebSiteImagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) GetStaticWebSiteImageDBFromStaticWebSiteImagePtr(staticwebsiteimage *models.StaticWebSiteImage) (staticwebsiteimageDB *StaticWebSiteImageDB) {
	id := backRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteimage]
	staticwebsiteimageDB = backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB[id]
	return
}

// BackRepoStaticWebSiteImage.CommitPhaseOne commits all staged instances of StaticWebSiteImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var staticwebsiteimages []*models.StaticWebSiteImage
	for staticwebsiteimage := range stage.StaticWebSiteImages {
		staticwebsiteimages = append(staticwebsiteimages, staticwebsiteimage)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(staticwebsiteimages, func(i, j int) bool {
		return stage.StaticWebSiteImageMap_Staged_Order[staticwebsiteimages[i]] < stage.StaticWebSiteImageMap_Staged_Order[staticwebsiteimages[j]]
	})

	for _, staticwebsiteimage := range staticwebsiteimages {
		backRepoStaticWebSiteImage.CommitPhaseOneInstance(staticwebsiteimage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, staticwebsiteimage := range backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr {
		if _, ok := stage.StaticWebSiteImages[staticwebsiteimage]; !ok {
			backRepoStaticWebSiteImage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStaticWebSiteImage.CommitDeleteInstance commits deletion of StaticWebSiteImage to the BackRepo
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CommitDeleteInstance(id uint) (Error error) {

	staticwebsiteimage := backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr[id]

	// staticwebsiteimage is not staged anymore, remove staticwebsiteimageDB
	staticwebsiteimageDB := backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB[id]
	db, _ := backRepoStaticWebSiteImage.db.Unscoped()
	_, err := db.Delete(staticwebsiteimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID, staticwebsiteimage)
	delete(backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr, id)
	delete(backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB, id)

	return
}

// BackRepoStaticWebSiteImage.CommitPhaseOneInstance commits staticwebsiteimage staged instances of StaticWebSiteImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CommitPhaseOneInstance(staticwebsiteimage *models.StaticWebSiteImage) (Error error) {

	// check if the staticwebsiteimage is not commited yet
	if _, ok := backRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteimage]; ok {
		return
	}

	// initiate staticwebsiteimage
	var staticwebsiteimageDB StaticWebSiteImageDB
	staticwebsiteimageDB.CopyBasicFieldsFromStaticWebSiteImage(staticwebsiteimage)

	_, err := backRepoStaticWebSiteImage.db.Create(&staticwebsiteimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteimage] = staticwebsiteimageDB.ID
	backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr[staticwebsiteimageDB.ID] = staticwebsiteimage
	backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB[staticwebsiteimageDB.ID] = &staticwebsiteimageDB

	return
}

// BackRepoStaticWebSiteImage.CommitPhaseTwo commits all staged instances of StaticWebSiteImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, staticwebsiteimage := range backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr {
		backRepoStaticWebSiteImage.CommitPhaseTwoInstance(backRepo, idx, staticwebsiteimage)
	}

	return
}

// BackRepoStaticWebSiteImage.CommitPhaseTwoInstance commits {{structname }} of models.StaticWebSiteImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, staticwebsiteimage *models.StaticWebSiteImage) (Error error) {

	// fetch matching staticwebsiteimageDB
	if staticwebsiteimageDB, ok := backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB[idx]; ok {

		staticwebsiteimageDB.CopyBasicFieldsFromStaticWebSiteImage(staticwebsiteimage)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoStaticWebSiteImage.db.Save(staticwebsiteimageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown StaticWebSiteImage intance %s", staticwebsiteimage.Name))
		return err
	}

	return
}

// BackRepoStaticWebSiteImage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CheckoutPhaseOne() (Error error) {

	staticwebsiteimageDBArray := make([]StaticWebSiteImageDB, 0)
	_, err := backRepoStaticWebSiteImage.db.Find(&staticwebsiteimageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	staticwebsiteimageInstancesToBeRemovedFromTheStage := make(map[*models.StaticWebSiteImage]any)
	for key, value := range backRepoStaticWebSiteImage.stage.StaticWebSiteImages {
		staticwebsiteimageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, staticwebsiteimageDB := range staticwebsiteimageDBArray {
		backRepoStaticWebSiteImage.CheckoutPhaseOneInstance(&staticwebsiteimageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		staticwebsiteimage, ok := backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr[staticwebsiteimageDB.ID]
		if ok {
			delete(staticwebsiteimageInstancesToBeRemovedFromTheStage, staticwebsiteimage)
		}
	}

	// remove from stage and back repo's 3 maps all staticwebsiteimages that are not in the checkout
	for staticwebsiteimage := range staticwebsiteimageInstancesToBeRemovedFromTheStage {
		staticwebsiteimage.Unstage(backRepoStaticWebSiteImage.GetStage())

		// remove instance from the back repo 3 maps
		staticwebsiteimageID := backRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteimage]
		delete(backRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID, staticwebsiteimage)
		delete(backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB, staticwebsiteimageID)
		delete(backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr, staticwebsiteimageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a staticwebsiteimageDB that has been found in the DB, updates the backRepo and stages the
// models version of the staticwebsiteimageDB
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CheckoutPhaseOneInstance(staticwebsiteimageDB *StaticWebSiteImageDB) (Error error) {

	staticwebsiteimage, ok := backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr[staticwebsiteimageDB.ID]
	if !ok {
		staticwebsiteimage = new(models.StaticWebSiteImage)

		backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr[staticwebsiteimageDB.ID] = staticwebsiteimage
		backRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteimage] = staticwebsiteimageDB.ID

		// append model store with the new element
		staticwebsiteimage.Name = staticwebsiteimageDB.Name_Data.String
		staticwebsiteimage.Stage(backRepoStaticWebSiteImage.GetStage())
	}
	staticwebsiteimageDB.CopyBasicFieldsToStaticWebSiteImage(staticwebsiteimage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	staticwebsiteimage.Stage(backRepoStaticWebSiteImage.GetStage())

	// preserve pointer to staticwebsiteimageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_StaticWebSiteImageDBID_StaticWebSiteImageDB)[staticwebsiteimageDB hold variable pointers
	staticwebsiteimageDB_Data := *staticwebsiteimageDB
	preservedPtrToStaticWebSiteImage := &staticwebsiteimageDB_Data
	backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB[staticwebsiteimageDB.ID] = preservedPtrToStaticWebSiteImage

	return
}

// BackRepoStaticWebSiteImage.CheckoutPhaseTwo Checkouts all staged instances of StaticWebSiteImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, staticwebsiteimageDB := range backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB {
		backRepoStaticWebSiteImage.CheckoutPhaseTwoInstance(backRepo, staticwebsiteimageDB)
	}
	return
}

// BackRepoStaticWebSiteImage.CheckoutPhaseTwoInstance Checkouts staged instances of StaticWebSiteImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, staticwebsiteimageDB *StaticWebSiteImageDB) (Error error) {

	staticwebsiteimage := backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr[staticwebsiteimageDB.ID]

	staticwebsiteimageDB.DecodePointers(backRepo, staticwebsiteimage)

	return
}

func (staticwebsiteimageDB *StaticWebSiteImageDB) DecodePointers(backRepo *BackRepoStruct, staticwebsiteimage *models.StaticWebSiteImage) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStaticWebSiteImage allows commit of a single staticwebsiteimage (if already staged)
func (backRepo *BackRepoStruct) CommitStaticWebSiteImage(staticwebsiteimage *models.StaticWebSiteImage) {
	backRepo.BackRepoStaticWebSiteImage.CommitPhaseOneInstance(staticwebsiteimage)
	if id, ok := backRepo.BackRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteimage]; ok {
		backRepo.BackRepoStaticWebSiteImage.CommitPhaseTwoInstance(backRepo, id, staticwebsiteimage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStaticWebSiteImage allows checkout of a single staticwebsiteimage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStaticWebSiteImage(staticwebsiteimage *models.StaticWebSiteImage) {
	// check if the staticwebsiteimage is staged
	if _, ok := backRepo.BackRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteimage]; ok {

		if id, ok := backRepo.BackRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteimage]; ok {
			var staticwebsiteimageDB StaticWebSiteImageDB
			staticwebsiteimageDB.ID = id

			if _, err := backRepo.BackRepoStaticWebSiteImage.db.First(&staticwebsiteimageDB, id); err != nil {
				log.Fatalln("CheckoutStaticWebSiteImage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStaticWebSiteImage.CheckoutPhaseOneInstance(&staticwebsiteimageDB)
			backRepo.BackRepoStaticWebSiteImage.CheckoutPhaseTwoInstance(backRepo, &staticwebsiteimageDB)
		}
	}
}

// CopyBasicFieldsFromStaticWebSiteImage
func (staticwebsiteimageDB *StaticWebSiteImageDB) CopyBasicFieldsFromStaticWebSiteImage(staticwebsiteimage *models.StaticWebSiteImage) {
	// insertion point for fields commit

	staticwebsiteimageDB.Name_Data.String = staticwebsiteimage.Name
	staticwebsiteimageDB.Name_Data.Valid = true

	staticwebsiteimageDB.SourceDirectoryPath_Data.String = staticwebsiteimage.SourceDirectoryPath
	staticwebsiteimageDB.SourceDirectoryPath_Data.Valid = true

	staticwebsiteimageDB.Width_Data.Int64 = int64(staticwebsiteimage.Width)
	staticwebsiteimageDB.Width_Data.Valid = true

	staticwebsiteimageDB.Height_Data.Int64 = int64(staticwebsiteimage.Height)
	staticwebsiteimageDB.Height_Data.Valid = true
}

// CopyBasicFieldsFromStaticWebSiteImage_WOP
func (staticwebsiteimageDB *StaticWebSiteImageDB) CopyBasicFieldsFromStaticWebSiteImage_WOP(staticwebsiteimage *models.StaticWebSiteImage_WOP) {
	// insertion point for fields commit

	staticwebsiteimageDB.Name_Data.String = staticwebsiteimage.Name
	staticwebsiteimageDB.Name_Data.Valid = true

	staticwebsiteimageDB.SourceDirectoryPath_Data.String = staticwebsiteimage.SourceDirectoryPath
	staticwebsiteimageDB.SourceDirectoryPath_Data.Valid = true

	staticwebsiteimageDB.Width_Data.Int64 = int64(staticwebsiteimage.Width)
	staticwebsiteimageDB.Width_Data.Valid = true

	staticwebsiteimageDB.Height_Data.Int64 = int64(staticwebsiteimage.Height)
	staticwebsiteimageDB.Height_Data.Valid = true
}

// CopyBasicFieldsFromStaticWebSiteImageWOP
func (staticwebsiteimageDB *StaticWebSiteImageDB) CopyBasicFieldsFromStaticWebSiteImageWOP(staticwebsiteimage *StaticWebSiteImageWOP) {
	// insertion point for fields commit

	staticwebsiteimageDB.Name_Data.String = staticwebsiteimage.Name
	staticwebsiteimageDB.Name_Data.Valid = true

	staticwebsiteimageDB.SourceDirectoryPath_Data.String = staticwebsiteimage.SourceDirectoryPath
	staticwebsiteimageDB.SourceDirectoryPath_Data.Valid = true

	staticwebsiteimageDB.Width_Data.Int64 = int64(staticwebsiteimage.Width)
	staticwebsiteimageDB.Width_Data.Valid = true

	staticwebsiteimageDB.Height_Data.Int64 = int64(staticwebsiteimage.Height)
	staticwebsiteimageDB.Height_Data.Valid = true
}

// CopyBasicFieldsToStaticWebSiteImage
func (staticwebsiteimageDB *StaticWebSiteImageDB) CopyBasicFieldsToStaticWebSiteImage(staticwebsiteimage *models.StaticWebSiteImage) {
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsiteimage.Name = staticwebsiteimageDB.Name_Data.String
	staticwebsiteimage.SourceDirectoryPath = staticwebsiteimageDB.SourceDirectoryPath_Data.String
	staticwebsiteimage.Width = int(staticwebsiteimageDB.Width_Data.Int64)
	staticwebsiteimage.Height = int(staticwebsiteimageDB.Height_Data.Int64)
}

// CopyBasicFieldsToStaticWebSiteImage_WOP
func (staticwebsiteimageDB *StaticWebSiteImageDB) CopyBasicFieldsToStaticWebSiteImage_WOP(staticwebsiteimage *models.StaticWebSiteImage_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsiteimage.Name = staticwebsiteimageDB.Name_Data.String
	staticwebsiteimage.SourceDirectoryPath = staticwebsiteimageDB.SourceDirectoryPath_Data.String
	staticwebsiteimage.Width = int(staticwebsiteimageDB.Width_Data.Int64)
	staticwebsiteimage.Height = int(staticwebsiteimageDB.Height_Data.Int64)
}

// CopyBasicFieldsToStaticWebSiteImageWOP
func (staticwebsiteimageDB *StaticWebSiteImageDB) CopyBasicFieldsToStaticWebSiteImageWOP(staticwebsiteimage *StaticWebSiteImageWOP) {
	staticwebsiteimage.ID = int(staticwebsiteimageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsiteimage.Name = staticwebsiteimageDB.Name_Data.String
	staticwebsiteimage.SourceDirectoryPath = staticwebsiteimageDB.SourceDirectoryPath_Data.String
	staticwebsiteimage.Width = int(staticwebsiteimageDB.Width_Data.Int64)
	staticwebsiteimage.Height = int(staticwebsiteimageDB.Height_Data.Int64)
}

// Backup generates a json file from a slice of all StaticWebSiteImageDB instances in the backrepo
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "StaticWebSiteImageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StaticWebSiteImageDB, 0)
	for _, staticwebsiteimageDB := range backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB {
		forBackup = append(forBackup, staticwebsiteimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json StaticWebSiteImage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json StaticWebSiteImage file", err.Error())
	}
}

// Backup generates a json file from a slice of all StaticWebSiteImageDB instances in the backrepo
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StaticWebSiteImageDB, 0)
	for _, staticwebsiteimageDB := range backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB {
		forBackup = append(forBackup, staticwebsiteimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("StaticWebSiteImage")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&StaticWebSiteImage_Fields, -1)
	for _, staticwebsiteimageDB := range forBackup {

		var staticwebsiteimageWOP StaticWebSiteImageWOP
		staticwebsiteimageDB.CopyBasicFieldsToStaticWebSiteImageWOP(&staticwebsiteimageWOP)

		row := sh.AddRow()
		row.WriteStruct(&staticwebsiteimageWOP, -1)
	}
}

// RestoreXL from the "StaticWebSiteImage" sheet all StaticWebSiteImageDB instances
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStaticWebSiteImageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["StaticWebSiteImage"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStaticWebSiteImage.rowVisitorStaticWebSiteImage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) rowVisitorStaticWebSiteImage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var staticwebsiteimageWOP StaticWebSiteImageWOP
		row.ReadStruct(&staticwebsiteimageWOP)

		// add the unmarshalled struct to the stage
		staticwebsiteimageDB := new(StaticWebSiteImageDB)
		staticwebsiteimageDB.CopyBasicFieldsFromStaticWebSiteImageWOP(&staticwebsiteimageWOP)

		staticwebsiteimageDB_ID_atBackupTime := staticwebsiteimageDB.ID
		staticwebsiteimageDB.ID = 0
		_, err := backRepoStaticWebSiteImage.db.Create(staticwebsiteimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB[staticwebsiteimageDB.ID] = staticwebsiteimageDB
		BackRepoStaticWebSiteImageid_atBckpTime_newID[staticwebsiteimageDB_ID_atBackupTime] = staticwebsiteimageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "StaticWebSiteImageDB.json" in dirPath that stores an array
// of StaticWebSiteImageDB and stores it in the database
// the map BackRepoStaticWebSiteImageid_atBckpTime_newID is updated accordingly
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStaticWebSiteImageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "StaticWebSiteImageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json StaticWebSiteImage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*StaticWebSiteImageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_StaticWebSiteImageDBID_StaticWebSiteImageDB
	for _, staticwebsiteimageDB := range forRestore {

		staticwebsiteimageDB_ID_atBackupTime := staticwebsiteimageDB.ID
		staticwebsiteimageDB.ID = 0
		_, err := backRepoStaticWebSiteImage.db.Create(staticwebsiteimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB[staticwebsiteimageDB.ID] = staticwebsiteimageDB
		BackRepoStaticWebSiteImageid_atBckpTime_newID[staticwebsiteimageDB_ID_atBackupTime] = staticwebsiteimageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json StaticWebSiteImage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<StaticWebSiteImage>id_atBckpTime_newID
// to compute new index
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) RestorePhaseTwo() {

	for _, staticwebsiteimageDB := range backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB {

		// next line of code is to avert unused variable compilation error
		_ = staticwebsiteimageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoStaticWebSiteImage.db.Model(staticwebsiteimageDB)
		_, err := db.Updates(*staticwebsiteimageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoStaticWebSiteImage.ResetReversePointers commits all staged instances of StaticWebSiteImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, staticwebsiteimage := range backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr {
		backRepoStaticWebSiteImage.ResetReversePointersInstance(backRepo, idx, staticwebsiteimage)
	}

	return
}

func (backRepoStaticWebSiteImage *BackRepoStaticWebSiteImageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, staticwebsiteimage *models.StaticWebSiteImage) (Error error) {

	// fetch matching staticwebsiteimageDB
	if staticwebsiteimageDB, ok := backRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImageDB[idx]; ok {
		_ = staticwebsiteimageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStaticWebSiteImageid_atBckpTime_newID map[uint]uint
