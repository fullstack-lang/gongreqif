// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_EmbeddedPngImage_sql sql.NullBool
var dummy_EmbeddedPngImage_time time.Duration
var dummy_EmbeddedPngImage_sort sort.Float64Slice

// EmbeddedPngImageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model embeddedpngimageAPI
type EmbeddedPngImageAPI struct {
	gorm.Model

	models.EmbeddedPngImage_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EmbeddedPngImagePointersEncoding EmbeddedPngImagePointersEncoding
}

// EmbeddedPngImagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EmbeddedPngImagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EmbeddedPngImageDB describes a embeddedpngimage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model embeddedpngimageDB
type EmbeddedPngImageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field embeddedpngimageDB.Name
	Name_Data sql.NullString

	// Declation for basic field embeddedpngimageDB.Base64Content
	Base64Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EmbeddedPngImagePointersEncoding
}

// EmbeddedPngImageDBs arrays embeddedpngimageDBs
// swagger:response embeddedpngimageDBsResponse
type EmbeddedPngImageDBs []EmbeddedPngImageDB

// EmbeddedPngImageDBResponse provides response
// swagger:response embeddedpngimageDBResponse
type EmbeddedPngImageDBResponse struct {
	EmbeddedPngImageDB
}

// EmbeddedPngImageWOP is a EmbeddedPngImage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EmbeddedPngImageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Base64Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var EmbeddedPngImage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Base64Content",
}

type BackRepoEmbeddedPngImageStruct struct {
	// stores EmbeddedPngImageDB according to their gorm ID
	Map_EmbeddedPngImageDBID_EmbeddedPngImageDB map[uint]*EmbeddedPngImageDB

	// stores EmbeddedPngImageDB ID according to EmbeddedPngImage address
	Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID map[*models.EmbeddedPngImage]uint

	// stores EmbeddedPngImage according to their gorm ID
	Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr map[uint]*models.EmbeddedPngImage

	db db.DBInterface

	stage *models.Stage
}

func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoEmbeddedPngImage.stage
	return
}

func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) GetDB() db.DBInterface {
	return backRepoEmbeddedPngImage.db
}

// GetEmbeddedPngImageDBFromEmbeddedPngImagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) GetEmbeddedPngImageDBFromEmbeddedPngImagePtr(embeddedpngimage *models.EmbeddedPngImage) (embeddedpngimageDB *EmbeddedPngImageDB) {
	id := backRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID[embeddedpngimage]
	embeddedpngimageDB = backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB[id]
	return
}

// BackRepoEmbeddedPngImage.CommitPhaseOne commits all staged instances of EmbeddedPngImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var embeddedpngimages []*models.EmbeddedPngImage
	for embeddedpngimage := range stage.EmbeddedPngImages {
		embeddedpngimages = append(embeddedpngimages, embeddedpngimage)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(embeddedpngimages, func(i, j int) bool {
		return stage.EmbeddedPngImageMap_Staged_Order[embeddedpngimages[i]] < stage.EmbeddedPngImageMap_Staged_Order[embeddedpngimages[j]]
	})

	for _, embeddedpngimage := range embeddedpngimages {
		backRepoEmbeddedPngImage.CommitPhaseOneInstance(embeddedpngimage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, embeddedpngimage := range backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr {
		if _, ok := stage.EmbeddedPngImages[embeddedpngimage]; !ok {
			backRepoEmbeddedPngImage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmbeddedPngImage.CommitDeleteInstance commits deletion of EmbeddedPngImage to the BackRepo
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CommitDeleteInstance(id uint) (Error error) {

	embeddedpngimage := backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr[id]

	// embeddedpngimage is not staged anymore, remove embeddedpngimageDB
	embeddedpngimageDB := backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB[id]
	db, _ := backRepoEmbeddedPngImage.db.Unscoped()
	_, err := db.Delete(embeddedpngimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID, embeddedpngimage)
	delete(backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr, id)
	delete(backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB, id)

	return
}

// BackRepoEmbeddedPngImage.CommitPhaseOneInstance commits embeddedpngimage staged instances of EmbeddedPngImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CommitPhaseOneInstance(embeddedpngimage *models.EmbeddedPngImage) (Error error) {

	// check if the embeddedpngimage is not commited yet
	if _, ok := backRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID[embeddedpngimage]; ok {
		return
	}

	// initiate embeddedpngimage
	var embeddedpngimageDB EmbeddedPngImageDB
	embeddedpngimageDB.CopyBasicFieldsFromEmbeddedPngImage(embeddedpngimage)

	_, err := backRepoEmbeddedPngImage.db.Create(&embeddedpngimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID[embeddedpngimage] = embeddedpngimageDB.ID
	backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr[embeddedpngimageDB.ID] = embeddedpngimage
	backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB[embeddedpngimageDB.ID] = &embeddedpngimageDB

	return
}

// BackRepoEmbeddedPngImage.CommitPhaseTwo commits all staged instances of EmbeddedPngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, embeddedpngimage := range backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr {
		backRepoEmbeddedPngImage.CommitPhaseTwoInstance(backRepo, idx, embeddedpngimage)
	}

	return
}

// BackRepoEmbeddedPngImage.CommitPhaseTwoInstance commits {{structname }} of models.EmbeddedPngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, embeddedpngimage *models.EmbeddedPngImage) (Error error) {

	// fetch matching embeddedpngimageDB
	if embeddedpngimageDB, ok := backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB[idx]; ok {

		embeddedpngimageDB.CopyBasicFieldsFromEmbeddedPngImage(embeddedpngimage)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoEmbeddedPngImage.db.Save(embeddedpngimageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown EmbeddedPngImage intance %s", embeddedpngimage.Name))
		return err
	}

	return
}

// BackRepoEmbeddedPngImage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CheckoutPhaseOne() (Error error) {

	embeddedpngimageDBArray := make([]EmbeddedPngImageDB, 0)
	_, err := backRepoEmbeddedPngImage.db.Find(&embeddedpngimageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	embeddedpngimageInstancesToBeRemovedFromTheStage := make(map[*models.EmbeddedPngImage]any)
	for key, value := range backRepoEmbeddedPngImage.stage.EmbeddedPngImages {
		embeddedpngimageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, embeddedpngimageDB := range embeddedpngimageDBArray {
		backRepoEmbeddedPngImage.CheckoutPhaseOneInstance(&embeddedpngimageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		embeddedpngimage, ok := backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr[embeddedpngimageDB.ID]
		if ok {
			delete(embeddedpngimageInstancesToBeRemovedFromTheStage, embeddedpngimage)
		}
	}

	// remove from stage and back repo's 3 maps all embeddedpngimages that are not in the checkout
	for embeddedpngimage := range embeddedpngimageInstancesToBeRemovedFromTheStage {
		embeddedpngimage.Unstage(backRepoEmbeddedPngImage.GetStage())

		// remove instance from the back repo 3 maps
		embeddedpngimageID := backRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID[embeddedpngimage]
		delete(backRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID, embeddedpngimage)
		delete(backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB, embeddedpngimageID)
		delete(backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr, embeddedpngimageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a embeddedpngimageDB that has been found in the DB, updates the backRepo and stages the
// models version of the embeddedpngimageDB
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CheckoutPhaseOneInstance(embeddedpngimageDB *EmbeddedPngImageDB) (Error error) {

	embeddedpngimage, ok := backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr[embeddedpngimageDB.ID]
	if !ok {
		embeddedpngimage = new(models.EmbeddedPngImage)

		backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr[embeddedpngimageDB.ID] = embeddedpngimage
		backRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID[embeddedpngimage] = embeddedpngimageDB.ID

		// append model store with the new element
		embeddedpngimage.Name = embeddedpngimageDB.Name_Data.String
		embeddedpngimage.Stage(backRepoEmbeddedPngImage.GetStage())
	}
	embeddedpngimageDB.CopyBasicFieldsToEmbeddedPngImage(embeddedpngimage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	embeddedpngimage.Stage(backRepoEmbeddedPngImage.GetStage())

	// preserve pointer to embeddedpngimageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EmbeddedPngImageDBID_EmbeddedPngImageDB)[embeddedpngimageDB hold variable pointers
	embeddedpngimageDB_Data := *embeddedpngimageDB
	preservedPtrToEmbeddedPngImage := &embeddedpngimageDB_Data
	backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB[embeddedpngimageDB.ID] = preservedPtrToEmbeddedPngImage

	return
}

// BackRepoEmbeddedPngImage.CheckoutPhaseTwo Checkouts all staged instances of EmbeddedPngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, embeddedpngimageDB := range backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB {
		backRepoEmbeddedPngImage.CheckoutPhaseTwoInstance(backRepo, embeddedpngimageDB)
	}
	return
}

// BackRepoEmbeddedPngImage.CheckoutPhaseTwoInstance Checkouts staged instances of EmbeddedPngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, embeddedpngimageDB *EmbeddedPngImageDB) (Error error) {

	embeddedpngimage := backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr[embeddedpngimageDB.ID]

	embeddedpngimageDB.DecodePointers(backRepo, embeddedpngimage)

	return
}

func (embeddedpngimageDB *EmbeddedPngImageDB) DecodePointers(backRepo *BackRepoStruct, embeddedpngimage *models.EmbeddedPngImage) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmbeddedPngImage allows commit of a single embeddedpngimage (if already staged)
func (backRepo *BackRepoStruct) CommitEmbeddedPngImage(embeddedpngimage *models.EmbeddedPngImage) {
	backRepo.BackRepoEmbeddedPngImage.CommitPhaseOneInstance(embeddedpngimage)
	if id, ok := backRepo.BackRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID[embeddedpngimage]; ok {
		backRepo.BackRepoEmbeddedPngImage.CommitPhaseTwoInstance(backRepo, id, embeddedpngimage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmbeddedPngImage allows checkout of a single embeddedpngimage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmbeddedPngImage(embeddedpngimage *models.EmbeddedPngImage) {
	// check if the embeddedpngimage is staged
	if _, ok := backRepo.BackRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID[embeddedpngimage]; ok {

		if id, ok := backRepo.BackRepoEmbeddedPngImage.Map_EmbeddedPngImagePtr_EmbeddedPngImageDBID[embeddedpngimage]; ok {
			var embeddedpngimageDB EmbeddedPngImageDB
			embeddedpngimageDB.ID = id

			if _, err := backRepo.BackRepoEmbeddedPngImage.db.First(&embeddedpngimageDB, id); err != nil {
				log.Fatalln("CheckoutEmbeddedPngImage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmbeddedPngImage.CheckoutPhaseOneInstance(&embeddedpngimageDB)
			backRepo.BackRepoEmbeddedPngImage.CheckoutPhaseTwoInstance(backRepo, &embeddedpngimageDB)
		}
	}
}

// CopyBasicFieldsFromEmbeddedPngImage
func (embeddedpngimageDB *EmbeddedPngImageDB) CopyBasicFieldsFromEmbeddedPngImage(embeddedpngimage *models.EmbeddedPngImage) {
	// insertion point for fields commit

	embeddedpngimageDB.Name_Data.String = embeddedpngimage.Name
	embeddedpngimageDB.Name_Data.Valid = true

	embeddedpngimageDB.Base64Content_Data.String = embeddedpngimage.Base64Content
	embeddedpngimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsFromEmbeddedPngImage_WOP
func (embeddedpngimageDB *EmbeddedPngImageDB) CopyBasicFieldsFromEmbeddedPngImage_WOP(embeddedpngimage *models.EmbeddedPngImage_WOP) {
	// insertion point for fields commit

	embeddedpngimageDB.Name_Data.String = embeddedpngimage.Name
	embeddedpngimageDB.Name_Data.Valid = true

	embeddedpngimageDB.Base64Content_Data.String = embeddedpngimage.Base64Content
	embeddedpngimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsFromEmbeddedPngImageWOP
func (embeddedpngimageDB *EmbeddedPngImageDB) CopyBasicFieldsFromEmbeddedPngImageWOP(embeddedpngimage *EmbeddedPngImageWOP) {
	// insertion point for fields commit

	embeddedpngimageDB.Name_Data.String = embeddedpngimage.Name
	embeddedpngimageDB.Name_Data.Valid = true

	embeddedpngimageDB.Base64Content_Data.String = embeddedpngimage.Base64Content
	embeddedpngimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsToEmbeddedPngImage
func (embeddedpngimageDB *EmbeddedPngImageDB) CopyBasicFieldsToEmbeddedPngImage(embeddedpngimage *models.EmbeddedPngImage) {
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedpngimage.Name = embeddedpngimageDB.Name_Data.String
	embeddedpngimage.Base64Content = embeddedpngimageDB.Base64Content_Data.String
}

// CopyBasicFieldsToEmbeddedPngImage_WOP
func (embeddedpngimageDB *EmbeddedPngImageDB) CopyBasicFieldsToEmbeddedPngImage_WOP(embeddedpngimage *models.EmbeddedPngImage_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedpngimage.Name = embeddedpngimageDB.Name_Data.String
	embeddedpngimage.Base64Content = embeddedpngimageDB.Base64Content_Data.String
}

// CopyBasicFieldsToEmbeddedPngImageWOP
func (embeddedpngimageDB *EmbeddedPngImageDB) CopyBasicFieldsToEmbeddedPngImageWOP(embeddedpngimage *EmbeddedPngImageWOP) {
	embeddedpngimage.ID = int(embeddedpngimageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedpngimage.Name = embeddedpngimageDB.Name_Data.String
	embeddedpngimage.Base64Content = embeddedpngimageDB.Base64Content_Data.String
}

// Backup generates a json file from a slice of all EmbeddedPngImageDB instances in the backrepo
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EmbeddedPngImageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EmbeddedPngImageDB, 0)
	for _, embeddedpngimageDB := range backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB {
		forBackup = append(forBackup, embeddedpngimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json EmbeddedPngImage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json EmbeddedPngImage file", err.Error())
	}
}

// Backup generates a json file from a slice of all EmbeddedPngImageDB instances in the backrepo
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EmbeddedPngImageDB, 0)
	for _, embeddedpngimageDB := range backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB {
		forBackup = append(forBackup, embeddedpngimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("EmbeddedPngImage")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&EmbeddedPngImage_Fields, -1)
	for _, embeddedpngimageDB := range forBackup {

		var embeddedpngimageWOP EmbeddedPngImageWOP
		embeddedpngimageDB.CopyBasicFieldsToEmbeddedPngImageWOP(&embeddedpngimageWOP)

		row := sh.AddRow()
		row.WriteStruct(&embeddedpngimageWOP, -1)
	}
}

// RestoreXL from the "EmbeddedPngImage" sheet all EmbeddedPngImageDB instances
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmbeddedPngImageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["EmbeddedPngImage"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmbeddedPngImage.rowVisitorEmbeddedPngImage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) rowVisitorEmbeddedPngImage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var embeddedpngimageWOP EmbeddedPngImageWOP
		row.ReadStruct(&embeddedpngimageWOP)

		// add the unmarshalled struct to the stage
		embeddedpngimageDB := new(EmbeddedPngImageDB)
		embeddedpngimageDB.CopyBasicFieldsFromEmbeddedPngImageWOP(&embeddedpngimageWOP)

		embeddedpngimageDB_ID_atBackupTime := embeddedpngimageDB.ID
		embeddedpngimageDB.ID = 0
		_, err := backRepoEmbeddedPngImage.db.Create(embeddedpngimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB[embeddedpngimageDB.ID] = embeddedpngimageDB
		BackRepoEmbeddedPngImageid_atBckpTime_newID[embeddedpngimageDB_ID_atBackupTime] = embeddedpngimageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EmbeddedPngImageDB.json" in dirPath that stores an array
// of EmbeddedPngImageDB and stores it in the database
// the map BackRepoEmbeddedPngImageid_atBckpTime_newID is updated accordingly
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmbeddedPngImageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EmbeddedPngImageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json EmbeddedPngImage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EmbeddedPngImageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EmbeddedPngImageDBID_EmbeddedPngImageDB
	for _, embeddedpngimageDB := range forRestore {

		embeddedpngimageDB_ID_atBackupTime := embeddedpngimageDB.ID
		embeddedpngimageDB.ID = 0
		_, err := backRepoEmbeddedPngImage.db.Create(embeddedpngimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB[embeddedpngimageDB.ID] = embeddedpngimageDB
		BackRepoEmbeddedPngImageid_atBckpTime_newID[embeddedpngimageDB_ID_atBackupTime] = embeddedpngimageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json EmbeddedPngImage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<EmbeddedPngImage>id_atBckpTime_newID
// to compute new index
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) RestorePhaseTwo() {

	for _, embeddedpngimageDB := range backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB {

		// next line of code is to avert unused variable compilation error
		_ = embeddedpngimageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoEmbeddedPngImage.db.Model(embeddedpngimageDB)
		_, err := db.Updates(*embeddedpngimageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoEmbeddedPngImage.ResetReversePointers commits all staged instances of EmbeddedPngImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, embeddedpngimage := range backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImagePtr {
		backRepoEmbeddedPngImage.ResetReversePointersInstance(backRepo, idx, embeddedpngimage)
	}

	return
}

func (backRepoEmbeddedPngImage *BackRepoEmbeddedPngImageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, embeddedpngimage *models.EmbeddedPngImage) (Error error) {

	// fetch matching embeddedpngimageDB
	if embeddedpngimageDB, ok := backRepoEmbeddedPngImage.Map_EmbeddedPngImageDBID_EmbeddedPngImageDB[idx]; ok {
		_ = embeddedpngimageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmbeddedPngImageid_atBckpTime_newID map[uint]uint
