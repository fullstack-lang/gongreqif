// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Map_SPECIFICATION_Nodes_expandedEntry_sql sql.NullBool
var dummy_Map_SPECIFICATION_Nodes_expandedEntry_time time.Duration
var dummy_Map_SPECIFICATION_Nodes_expandedEntry_sort sort.Float64Slice

// Map_SPECIFICATION_Nodes_expandedEntryAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model map_specification_nodes_expandedentryAPI
type Map_SPECIFICATION_Nodes_expandedEntryAPI struct {
	gorm.Model

	models.Map_SPECIFICATION_Nodes_expandedEntry_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Map_SPECIFICATION_Nodes_expandedEntryPointersEncoding Map_SPECIFICATION_Nodes_expandedEntryPointersEncoding
}

// Map_SPECIFICATION_Nodes_expandedEntryPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Map_SPECIFICATION_Nodes_expandedEntryPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Map_SPECIFICATION_Nodes_expandedEntryDB describes a map_specification_nodes_expandedentry in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model map_specification_nodes_expandedentryDB
type Map_SPECIFICATION_Nodes_expandedEntryDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field map_specification_nodes_expandedentryDB.Name
	Name_Data sql.NullString

	// Declation for basic field map_specification_nodes_expandedentryDB.Value
	// provide the sql storage for the boolan
	Value_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Map_SPECIFICATION_Nodes_expandedEntryPointersEncoding
}

// Map_SPECIFICATION_Nodes_expandedEntryDBs arrays map_specification_nodes_expandedentryDBs
// swagger:response map_specification_nodes_expandedentryDBsResponse
type Map_SPECIFICATION_Nodes_expandedEntryDBs []Map_SPECIFICATION_Nodes_expandedEntryDB

// Map_SPECIFICATION_Nodes_expandedEntryDBResponse provides response
// swagger:response map_specification_nodes_expandedentryDBResponse
type Map_SPECIFICATION_Nodes_expandedEntryDBResponse struct {
	Map_SPECIFICATION_Nodes_expandedEntryDB
}

// Map_SPECIFICATION_Nodes_expandedEntryWOP is a Map_SPECIFICATION_Nodes_expandedEntry without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Map_SPECIFICATION_Nodes_expandedEntryWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Map_SPECIFICATION_Nodes_expandedEntry_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct struct {
	// stores Map_SPECIFICATION_Nodes_expandedEntryDB according to their gorm ID
	Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB map[uint]*Map_SPECIFICATION_Nodes_expandedEntryDB

	// stores Map_SPECIFICATION_Nodes_expandedEntryDB ID according to Map_SPECIFICATION_Nodes_expandedEntry address
	Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID map[*models.Map_SPECIFICATION_Nodes_expandedEntry]uint

	// stores Map_SPECIFICATION_Nodes_expandedEntry according to their gorm ID
	Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr map[uint]*models.Map_SPECIFICATION_Nodes_expandedEntry

	db db.DBInterface

	stage *models.Stage
}

func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) GetStage() (stage *models.Stage) {
	stage = backRepoMap_SPECIFICATION_Nodes_expandedEntry.stage
	return
}

func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) GetDB() db.DBInterface {
	return backRepoMap_SPECIFICATION_Nodes_expandedEntry.db
}

// GetMap_SPECIFICATION_Nodes_expandedEntryDBFromMap_SPECIFICATION_Nodes_expandedEntryPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) GetMap_SPECIFICATION_Nodes_expandedEntryDBFromMap_SPECIFICATION_Nodes_expandedEntryPtr(map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) (map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) {
	id := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID[map_specification_nodes_expandedentry]
	map_specification_nodes_expandedentryDB = backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB[id]
	return
}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitPhaseOne commits all staged instances of Map_SPECIFICATION_Nodes_expandedEntry to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var map_specification_nodes_expandedentrys []*models.Map_SPECIFICATION_Nodes_expandedEntry
	for map_specification_nodes_expandedentry := range stage.Map_SPECIFICATION_Nodes_expandedEntrys {
		map_specification_nodes_expandedentrys = append(map_specification_nodes_expandedentrys, map_specification_nodes_expandedentry)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(map_specification_nodes_expandedentrys, func(i, j int) bool {
		return stage.Map_SPECIFICATION_Nodes_expandedEntryMap_Staged_Order[map_specification_nodes_expandedentrys[i]] < stage.Map_SPECIFICATION_Nodes_expandedEntryMap_Staged_Order[map_specification_nodes_expandedentrys[j]]
	})

	for _, map_specification_nodes_expandedentry := range map_specification_nodes_expandedentrys {
		backRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitPhaseOneInstance(map_specification_nodes_expandedentry)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, map_specification_nodes_expandedentry := range backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr {
		if _, ok := stage.Map_SPECIFICATION_Nodes_expandedEntrys[map_specification_nodes_expandedentry]; !ok {
			backRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitDeleteInstance commits deletion of Map_SPECIFICATION_Nodes_expandedEntry to the BackRepo
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CommitDeleteInstance(id uint) (Error error) {

	map_specification_nodes_expandedentry := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr[id]

	// map_specification_nodes_expandedentry is not staged anymore, remove map_specification_nodes_expandedentryDB
	map_specification_nodes_expandedentryDB := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB[id]
	db, _ := backRepoMap_SPECIFICATION_Nodes_expandedEntry.db.Unscoped()
	_, err := db.Delete(map_specification_nodes_expandedentryDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID, map_specification_nodes_expandedentry)
	delete(backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr, id)
	delete(backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB, id)

	return
}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitPhaseOneInstance commits map_specification_nodes_expandedentry staged instances of Map_SPECIFICATION_Nodes_expandedEntry to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CommitPhaseOneInstance(map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) (Error error) {

	// check if the map_specification_nodes_expandedentry is not commited yet
	if _, ok := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID[map_specification_nodes_expandedentry]; ok {
		return
	}

	// initiate map_specification_nodes_expandedentry
	var map_specification_nodes_expandedentryDB Map_SPECIFICATION_Nodes_expandedEntryDB
	map_specification_nodes_expandedentryDB.CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntry(map_specification_nodes_expandedentry)

	_, err := backRepoMap_SPECIFICATION_Nodes_expandedEntry.db.Create(&map_specification_nodes_expandedentryDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID[map_specification_nodes_expandedentry] = map_specification_nodes_expandedentryDB.ID
	backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr[map_specification_nodes_expandedentryDB.ID] = map_specification_nodes_expandedentry
	backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB[map_specification_nodes_expandedentryDB.ID] = &map_specification_nodes_expandedentryDB

	return
}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitPhaseTwo commits all staged instances of Map_SPECIFICATION_Nodes_expandedEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, map_specification_nodes_expandedentry := range backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr {
		backRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitPhaseTwoInstance(backRepo, idx, map_specification_nodes_expandedentry)
	}

	return
}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitPhaseTwoInstance commits {{structname }} of models.Map_SPECIFICATION_Nodes_expandedEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) (Error error) {

	// fetch matching map_specification_nodes_expandedentryDB
	if map_specification_nodes_expandedentryDB, ok := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB[idx]; ok {

		map_specification_nodes_expandedentryDB.CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntry(map_specification_nodes_expandedentry)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoMap_SPECIFICATION_Nodes_expandedEntry.db.Save(map_specification_nodes_expandedentryDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Map_SPECIFICATION_Nodes_expandedEntry intance %s", map_specification_nodes_expandedentry.Name))
		return err
	}

	return
}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CheckoutPhaseOne() (Error error) {

	map_specification_nodes_expandedentryDBArray := make([]Map_SPECIFICATION_Nodes_expandedEntryDB, 0)
	_, err := backRepoMap_SPECIFICATION_Nodes_expandedEntry.db.Find(&map_specification_nodes_expandedentryDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	map_specification_nodes_expandedentryInstancesToBeRemovedFromTheStage := make(map[*models.Map_SPECIFICATION_Nodes_expandedEntry]any)
	for key, value := range backRepoMap_SPECIFICATION_Nodes_expandedEntry.stage.Map_SPECIFICATION_Nodes_expandedEntrys {
		map_specification_nodes_expandedentryInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, map_specification_nodes_expandedentryDB := range map_specification_nodes_expandedentryDBArray {
		backRepoMap_SPECIFICATION_Nodes_expandedEntry.CheckoutPhaseOneInstance(&map_specification_nodes_expandedentryDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		map_specification_nodes_expandedentry, ok := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr[map_specification_nodes_expandedentryDB.ID]
		if ok {
			delete(map_specification_nodes_expandedentryInstancesToBeRemovedFromTheStage, map_specification_nodes_expandedentry)
		}
	}

	// remove from stage and back repo's 3 maps all map_specification_nodes_expandedentrys that are not in the checkout
	for map_specification_nodes_expandedentry := range map_specification_nodes_expandedentryInstancesToBeRemovedFromTheStage {
		map_specification_nodes_expandedentry.Unstage(backRepoMap_SPECIFICATION_Nodes_expandedEntry.GetStage())

		// remove instance from the back repo 3 maps
		map_specification_nodes_expandedentryID := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID[map_specification_nodes_expandedentry]
		delete(backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID, map_specification_nodes_expandedentry)
		delete(backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB, map_specification_nodes_expandedentryID)
		delete(backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr, map_specification_nodes_expandedentryID)
	}

	return
}

// CheckoutPhaseOneInstance takes a map_specification_nodes_expandedentryDB that has been found in the DB, updates the backRepo and stages the
// models version of the map_specification_nodes_expandedentryDB
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CheckoutPhaseOneInstance(map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) (Error error) {

	map_specification_nodes_expandedentry, ok := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr[map_specification_nodes_expandedentryDB.ID]
	if !ok {
		map_specification_nodes_expandedentry = new(models.Map_SPECIFICATION_Nodes_expandedEntry)

		backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr[map_specification_nodes_expandedentryDB.ID] = map_specification_nodes_expandedentry
		backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID[map_specification_nodes_expandedentry] = map_specification_nodes_expandedentryDB.ID

		// append model store with the new element
		map_specification_nodes_expandedentry.Name = map_specification_nodes_expandedentryDB.Name_Data.String
		map_specification_nodes_expandedentry.Stage(backRepoMap_SPECIFICATION_Nodes_expandedEntry.GetStage())
	}
	map_specification_nodes_expandedentryDB.CopyBasicFieldsToMap_SPECIFICATION_Nodes_expandedEntry(map_specification_nodes_expandedentry)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	map_specification_nodes_expandedentry.Stage(backRepoMap_SPECIFICATION_Nodes_expandedEntry.GetStage())

	// preserve pointer to map_specification_nodes_expandedentryDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB)[map_specification_nodes_expandedentryDB hold variable pointers
	map_specification_nodes_expandedentryDB_Data := *map_specification_nodes_expandedentryDB
	preservedPtrToMap_SPECIFICATION_Nodes_expandedEntry := &map_specification_nodes_expandedentryDB_Data
	backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB[map_specification_nodes_expandedentryDB.ID] = preservedPtrToMap_SPECIFICATION_Nodes_expandedEntry

	return
}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CheckoutPhaseTwo Checkouts all staged instances of Map_SPECIFICATION_Nodes_expandedEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, map_specification_nodes_expandedentryDB := range backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB {
		backRepoMap_SPECIFICATION_Nodes_expandedEntry.CheckoutPhaseTwoInstance(backRepo, map_specification_nodes_expandedentryDB)
	}
	return
}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CheckoutPhaseTwoInstance Checkouts staged instances of Map_SPECIFICATION_Nodes_expandedEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) (Error error) {

	map_specification_nodes_expandedentry := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr[map_specification_nodes_expandedentryDB.ID]

	map_specification_nodes_expandedentryDB.DecodePointers(backRepo, map_specification_nodes_expandedentry)

	return
}

func (map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) DecodePointers(backRepo *BackRepoStruct, map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMap_SPECIFICATION_Nodes_expandedEntry allows commit of a single map_specification_nodes_expandedentry (if already staged)
func (backRepo *BackRepoStruct) CommitMap_SPECIFICATION_Nodes_expandedEntry(map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) {
	backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitPhaseOneInstance(map_specification_nodes_expandedentry)
	if id, ok := backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID[map_specification_nodes_expandedentry]; ok {
		backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CommitPhaseTwoInstance(backRepo, id, map_specification_nodes_expandedentry)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMap_SPECIFICATION_Nodes_expandedEntry allows checkout of a single map_specification_nodes_expandedentry (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMap_SPECIFICATION_Nodes_expandedEntry(map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) {
	// check if the map_specification_nodes_expandedentry is staged
	if _, ok := backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID[map_specification_nodes_expandedentry]; ok {

		if id, ok := backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryPtr_Map_SPECIFICATION_Nodes_expandedEntryDBID[map_specification_nodes_expandedentry]; ok {
			var map_specification_nodes_expandedentryDB Map_SPECIFICATION_Nodes_expandedEntryDB
			map_specification_nodes_expandedentryDB.ID = id

			if _, err := backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.db.First(&map_specification_nodes_expandedentryDB, id); err != nil {
				log.Fatalln("CheckoutMap_SPECIFICATION_Nodes_expandedEntry : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CheckoutPhaseOneInstance(&map_specification_nodes_expandedentryDB)
			backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.CheckoutPhaseTwoInstance(backRepo, &map_specification_nodes_expandedentryDB)
		}
	}
}

// CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntry
func (map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntry(map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) {
	// insertion point for fields commit

	map_specification_nodes_expandedentryDB.Name_Data.String = map_specification_nodes_expandedentry.Name
	map_specification_nodes_expandedentryDB.Name_Data.Valid = true

	map_specification_nodes_expandedentryDB.Value_Data.Bool = map_specification_nodes_expandedentry.Value
	map_specification_nodes_expandedentryDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntry_WOP
func (map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntry_WOP(map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry_WOP) {
	// insertion point for fields commit

	map_specification_nodes_expandedentryDB.Name_Data.String = map_specification_nodes_expandedentry.Name
	map_specification_nodes_expandedentryDB.Name_Data.Valid = true

	map_specification_nodes_expandedentryDB.Value_Data.Bool = map_specification_nodes_expandedentry.Value
	map_specification_nodes_expandedentryDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntryWOP
func (map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntryWOP(map_specification_nodes_expandedentry *Map_SPECIFICATION_Nodes_expandedEntryWOP) {
	// insertion point for fields commit

	map_specification_nodes_expandedentryDB.Name_Data.String = map_specification_nodes_expandedentry.Name
	map_specification_nodes_expandedentryDB.Name_Data.Valid = true

	map_specification_nodes_expandedentryDB.Value_Data.Bool = map_specification_nodes_expandedentry.Value
	map_specification_nodes_expandedentryDB.Value_Data.Valid = true
}

// CopyBasicFieldsToMap_SPECIFICATION_Nodes_expandedEntry
func (map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) CopyBasicFieldsToMap_SPECIFICATION_Nodes_expandedEntry(map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) {
	// insertion point for checkout of basic fields (back repo to stage)
	map_specification_nodes_expandedentry.Name = map_specification_nodes_expandedentryDB.Name_Data.String
	map_specification_nodes_expandedentry.Value = map_specification_nodes_expandedentryDB.Value_Data.Bool
}

// CopyBasicFieldsToMap_SPECIFICATION_Nodes_expandedEntry_WOP
func (map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) CopyBasicFieldsToMap_SPECIFICATION_Nodes_expandedEntry_WOP(map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	map_specification_nodes_expandedentry.Name = map_specification_nodes_expandedentryDB.Name_Data.String
	map_specification_nodes_expandedentry.Value = map_specification_nodes_expandedentryDB.Value_Data.Bool
}

// CopyBasicFieldsToMap_SPECIFICATION_Nodes_expandedEntryWOP
func (map_specification_nodes_expandedentryDB *Map_SPECIFICATION_Nodes_expandedEntryDB) CopyBasicFieldsToMap_SPECIFICATION_Nodes_expandedEntryWOP(map_specification_nodes_expandedentry *Map_SPECIFICATION_Nodes_expandedEntryWOP) {
	map_specification_nodes_expandedentry.ID = int(map_specification_nodes_expandedentryDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	map_specification_nodes_expandedentry.Name = map_specification_nodes_expandedentryDB.Name_Data.String
	map_specification_nodes_expandedentry.Value = map_specification_nodes_expandedentryDB.Value_Data.Bool
}

// Backup generates a json file from a slice of all Map_SPECIFICATION_Nodes_expandedEntryDB instances in the backrepo
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Map_SPECIFICATION_Nodes_expandedEntryDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Map_SPECIFICATION_Nodes_expandedEntryDB, 0)
	for _, map_specification_nodes_expandedentryDB := range backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB {
		forBackup = append(forBackup, map_specification_nodes_expandedentryDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Map_SPECIFICATION_Nodes_expandedEntry ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Map_SPECIFICATION_Nodes_expandedEntry file", err.Error())
	}
}

// Backup generates a json file from a slice of all Map_SPECIFICATION_Nodes_expandedEntryDB instances in the backrepo
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Map_SPECIFICATION_Nodes_expandedEntryDB, 0)
	for _, map_specification_nodes_expandedentryDB := range backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB {
		forBackup = append(forBackup, map_specification_nodes_expandedentryDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Map_SPECIFICATION_Nodes_expandedEntry")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Map_SPECIFICATION_Nodes_expandedEntry_Fields, -1)
	for _, map_specification_nodes_expandedentryDB := range forBackup {

		var map_specification_nodes_expandedentryWOP Map_SPECIFICATION_Nodes_expandedEntryWOP
		map_specification_nodes_expandedentryDB.CopyBasicFieldsToMap_SPECIFICATION_Nodes_expandedEntryWOP(&map_specification_nodes_expandedentryWOP)

		row := sh.AddRow()
		row.WriteStruct(&map_specification_nodes_expandedentryWOP, -1)
	}
}

// RestoreXL from the "Map_SPECIFICATION_Nodes_expandedEntry" sheet all Map_SPECIFICATION_Nodes_expandedEntryDB instances
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMap_SPECIFICATION_Nodes_expandedEntryid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Map_SPECIFICATION_Nodes_expandedEntry"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMap_SPECIFICATION_Nodes_expandedEntry.rowVisitorMap_SPECIFICATION_Nodes_expandedEntry)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) rowVisitorMap_SPECIFICATION_Nodes_expandedEntry(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var map_specification_nodes_expandedentryWOP Map_SPECIFICATION_Nodes_expandedEntryWOP
		row.ReadStruct(&map_specification_nodes_expandedentryWOP)

		// add the unmarshalled struct to the stage
		map_specification_nodes_expandedentryDB := new(Map_SPECIFICATION_Nodes_expandedEntryDB)
		map_specification_nodes_expandedentryDB.CopyBasicFieldsFromMap_SPECIFICATION_Nodes_expandedEntryWOP(&map_specification_nodes_expandedentryWOP)

		map_specification_nodes_expandedentryDB_ID_atBackupTime := map_specification_nodes_expandedentryDB.ID
		map_specification_nodes_expandedentryDB.ID = 0
		_, err := backRepoMap_SPECIFICATION_Nodes_expandedEntry.db.Create(map_specification_nodes_expandedentryDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB[map_specification_nodes_expandedentryDB.ID] = map_specification_nodes_expandedentryDB
		BackRepoMap_SPECIFICATION_Nodes_expandedEntryid_atBckpTime_newID[map_specification_nodes_expandedentryDB_ID_atBackupTime] = map_specification_nodes_expandedentryDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Map_SPECIFICATION_Nodes_expandedEntryDB.json" in dirPath that stores an array
// of Map_SPECIFICATION_Nodes_expandedEntryDB and stores it in the database
// the map BackRepoMap_SPECIFICATION_Nodes_expandedEntryid_atBckpTime_newID is updated accordingly
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMap_SPECIFICATION_Nodes_expandedEntryid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Map_SPECIFICATION_Nodes_expandedEntryDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Map_SPECIFICATION_Nodes_expandedEntry file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Map_SPECIFICATION_Nodes_expandedEntryDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB
	for _, map_specification_nodes_expandedentryDB := range forRestore {

		map_specification_nodes_expandedentryDB_ID_atBackupTime := map_specification_nodes_expandedentryDB.ID
		map_specification_nodes_expandedentryDB.ID = 0
		_, err := backRepoMap_SPECIFICATION_Nodes_expandedEntry.db.Create(map_specification_nodes_expandedentryDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB[map_specification_nodes_expandedentryDB.ID] = map_specification_nodes_expandedentryDB
		BackRepoMap_SPECIFICATION_Nodes_expandedEntryid_atBckpTime_newID[map_specification_nodes_expandedentryDB_ID_atBackupTime] = map_specification_nodes_expandedentryDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Map_SPECIFICATION_Nodes_expandedEntry file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Map_SPECIFICATION_Nodes_expandedEntry>id_atBckpTime_newID
// to compute new index
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) RestorePhaseTwo() {

	for _, map_specification_nodes_expandedentryDB := range backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB {

		// next line of code is to avert unused variable compilation error
		_ = map_specification_nodes_expandedentryDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoMap_SPECIFICATION_Nodes_expandedEntry.db.Model(map_specification_nodes_expandedentryDB)
		_, err := db.Updates(*map_specification_nodes_expandedentryDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoMap_SPECIFICATION_Nodes_expandedEntry.ResetReversePointers commits all staged instances of Map_SPECIFICATION_Nodes_expandedEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, map_specification_nodes_expandedentry := range backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr {
		backRepoMap_SPECIFICATION_Nodes_expandedEntry.ResetReversePointersInstance(backRepo, idx, map_specification_nodes_expandedentry)
	}

	return
}

func (backRepoMap_SPECIFICATION_Nodes_expandedEntry *BackRepoMap_SPECIFICATION_Nodes_expandedEntryStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, map_specification_nodes_expandedentry *models.Map_SPECIFICATION_Nodes_expandedEntry) (Error error) {

	// fetch matching map_specification_nodes_expandedentryDB
	if map_specification_nodes_expandedentryDB, ok := backRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryDB[idx]; ok {
		_ = map_specification_nodes_expandedentryDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMap_SPECIFICATION_Nodes_expandedEntryid_atBckpTime_newID map[uint]uint
