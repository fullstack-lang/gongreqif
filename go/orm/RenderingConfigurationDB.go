// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_RenderingConfiguration_sql sql.NullBool
var dummy_RenderingConfiguration_time time.Duration
var dummy_RenderingConfiguration_sort sort.Float64Slice

// RenderingConfigurationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model renderingconfigurationAPI
type RenderingConfigurationAPI struct {
	gorm.Model

	models.RenderingConfiguration_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RenderingConfigurationPointersEncoding RenderingConfigurationPointersEncoding
}

// RenderingConfigurationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RenderingConfigurationPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries IntSlice `gorm:"type:TEXT"`

	// field Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries IntSlice `gorm:"type:TEXT"`

	// field Map_SPECIFICATION_Nodes_expandedEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_SPECIFICATION_Nodes_expandedEntries IntSlice `gorm:"type:TEXT"`

	// field Map_SPEC_OBJECT_TYPE_showIdentifierEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_SPEC_OBJECT_TYPE_showIdentifierEntries IntSlice `gorm:"type:TEXT"`

	// field Map_SPEC_OBJECT_TYPE_showNameEntries is a slice of pointers to another Struct (optional or 0..1)
	Map_SPEC_OBJECT_TYPE_showNameEntries IntSlice `gorm:"type:TEXT"`
}

// RenderingConfigurationDB describes a renderingconfiguration in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model renderingconfigurationDB
type RenderingConfigurationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field renderingconfigurationDB.Name
	Name_Data sql.NullString

	// Declation for basic field renderingconfigurationDB.ShowSpecHierachyIdentifiers
	// provide the sql storage for the boolan
	ShowSpecHierachyIdentifiers_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RenderingConfigurationPointersEncoding
}

// RenderingConfigurationDBs arrays renderingconfigurationDBs
// swagger:response renderingconfigurationDBsResponse
type RenderingConfigurationDBs []RenderingConfigurationDB

// RenderingConfigurationDBResponse provides response
// swagger:response renderingconfigurationDBResponse
type RenderingConfigurationDBResponse struct {
	RenderingConfigurationDB
}

// RenderingConfigurationWOP is a RenderingConfiguration without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RenderingConfigurationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ShowSpecHierachyIdentifiers bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var RenderingConfiguration_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ShowSpecHierachyIdentifiers",
}

type BackRepoRenderingConfigurationStruct struct {
	// stores RenderingConfigurationDB according to their gorm ID
	Map_RenderingConfigurationDBID_RenderingConfigurationDB map[uint]*RenderingConfigurationDB

	// stores RenderingConfigurationDB ID according to RenderingConfiguration address
	Map_RenderingConfigurationPtr_RenderingConfigurationDBID map[*models.RenderingConfiguration]uint

	// stores RenderingConfiguration according to their gorm ID
	Map_RenderingConfigurationDBID_RenderingConfigurationPtr map[uint]*models.RenderingConfiguration

	db db.DBInterface

	stage *models.Stage
}

func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) GetStage() (stage *models.Stage) {
	stage = backRepoRenderingConfiguration.stage
	return
}

func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) GetDB() db.DBInterface {
	return backRepoRenderingConfiguration.db
}

// GetRenderingConfigurationDBFromRenderingConfigurationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) GetRenderingConfigurationDBFromRenderingConfigurationPtr(renderingconfiguration *models.RenderingConfiguration) (renderingconfigurationDB *RenderingConfigurationDB) {
	id := backRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID[renderingconfiguration]
	renderingconfigurationDB = backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB[id]
	return
}

// BackRepoRenderingConfiguration.CommitPhaseOne commits all staged instances of RenderingConfiguration to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var renderingconfigurations []*models.RenderingConfiguration
	for renderingconfiguration := range stage.RenderingConfigurations {
		renderingconfigurations = append(renderingconfigurations, renderingconfiguration)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(renderingconfigurations, func(i, j int) bool {
		return stage.RenderingConfigurationMap_Staged_Order[renderingconfigurations[i]] < stage.RenderingConfigurationMap_Staged_Order[renderingconfigurations[j]]
	})

	for _, renderingconfiguration := range renderingconfigurations {
		backRepoRenderingConfiguration.CommitPhaseOneInstance(renderingconfiguration)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, renderingconfiguration := range backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr {
		if _, ok := stage.RenderingConfigurations[renderingconfiguration]; !ok {
			backRepoRenderingConfiguration.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRenderingConfiguration.CommitDeleteInstance commits deletion of RenderingConfiguration to the BackRepo
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CommitDeleteInstance(id uint) (Error error) {

	renderingconfiguration := backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr[id]

	// renderingconfiguration is not staged anymore, remove renderingconfigurationDB
	renderingconfigurationDB := backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB[id]
	db, _ := backRepoRenderingConfiguration.db.Unscoped()
	_, err := db.Delete(renderingconfigurationDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID, renderingconfiguration)
	delete(backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr, id)
	delete(backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB, id)

	return
}

// BackRepoRenderingConfiguration.CommitPhaseOneInstance commits renderingconfiguration staged instances of RenderingConfiguration to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CommitPhaseOneInstance(renderingconfiguration *models.RenderingConfiguration) (Error error) {

	// check if the renderingconfiguration is not commited yet
	if _, ok := backRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID[renderingconfiguration]; ok {
		return
	}

	// initiate renderingconfiguration
	var renderingconfigurationDB RenderingConfigurationDB
	renderingconfigurationDB.CopyBasicFieldsFromRenderingConfiguration(renderingconfiguration)

	_, err := backRepoRenderingConfiguration.db.Create(&renderingconfigurationDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID[renderingconfiguration] = renderingconfigurationDB.ID
	backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr[renderingconfigurationDB.ID] = renderingconfiguration
	backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB[renderingconfigurationDB.ID] = &renderingconfigurationDB

	return
}

// BackRepoRenderingConfiguration.CommitPhaseTwo commits all staged instances of RenderingConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, renderingconfiguration := range backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr {
		backRepoRenderingConfiguration.CommitPhaseTwoInstance(backRepo, idx, renderingconfiguration)
	}

	return
}

// BackRepoRenderingConfiguration.CommitPhaseTwoInstance commits {{structname }} of models.RenderingConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, renderingconfiguration *models.RenderingConfiguration) (Error error) {

	// fetch matching renderingconfigurationDB
	if renderingconfigurationDB, ok := backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB[idx]; ok {

		renderingconfigurationDB.CopyBasicFieldsFromRenderingConfiguration(renderingconfiguration)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries = make([]int, 0)
		// 2. encode
		for _, map_spec_object_type_isnodeexpandedentryAssocEnd := range renderingconfiguration.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries {
			map_spec_object_type_isnodeexpandedentryAssocEnd_DB :=
				backRepo.BackRepoMap_SPEC_OBJECT_TYPE_isNodeExpandedEntry.GetMap_SPEC_OBJECT_TYPE_isNodeExpandedEntryDBFromMap_SPEC_OBJECT_TYPE_isNodeExpandedEntryPtr(map_spec_object_type_isnodeexpandedentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_spec_object_type_isnodeexpandedentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_spec_object_type_isnodeexpandedentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries, int(map_spec_object_type_isnodeexpandedentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_xhtml_showintitleentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries {
			map_attribute_definition_xhtml_showintitleentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntry.GetMap_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntryDBFromMap_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntryPtr(map_attribute_definition_xhtml_showintitleentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_xhtml_showintitleentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_xhtml_showintitleentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries, int(map_attribute_definition_xhtml_showintitleentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_string_showintitleentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries {
			map_attribute_definition_string_showintitleentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntry.GetMap_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntryDBFromMap_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntryPtr(map_attribute_definition_string_showintitleentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_string_showintitleentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_string_showintitleentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries, int(map_attribute_definition_string_showintitleentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_boolean_showintitleentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries {
			map_attribute_definition_boolean_showintitleentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntry.GetMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntryDBFromMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntryPtr(map_attribute_definition_boolean_showintitleentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_boolean_showintitleentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_boolean_showintitleentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries, int(map_attribute_definition_boolean_showintitleentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_integer_showintitleentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries {
			map_attribute_definition_integer_showintitleentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntry.GetMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntryDBFromMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntryPtr(map_attribute_definition_integer_showintitleentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_integer_showintitleentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_integer_showintitleentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries, int(map_attribute_definition_integer_showintitleentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_date_showintitleentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries {
			map_attribute_definition_date_showintitleentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntry.GetMap_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntryDBFromMap_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntryPtr(map_attribute_definition_date_showintitleentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_date_showintitleentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_date_showintitleentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries, int(map_attribute_definition_date_showintitleentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_real_showintitleentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries {
			map_attribute_definition_real_showintitleentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntry.GetMap_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntryDBFromMap_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntryPtr(map_attribute_definition_real_showintitleentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_real_showintitleentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_real_showintitleentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries, int(map_attribute_definition_real_showintitleentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_enumeration_showintitleentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries {
			map_attribute_definition_enumeration_showintitleentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntry.GetMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntryDBFromMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntryPtr(map_attribute_definition_enumeration_showintitleentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_enumeration_showintitleentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_enumeration_showintitleentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries, int(map_attribute_definition_enumeration_showintitleentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_xhtml_showintableentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries {
			map_attribute_definition_xhtml_showintableentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntry.GetMap_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntryDBFromMap_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntryPtr(map_attribute_definition_xhtml_showintableentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_xhtml_showintableentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_xhtml_showintableentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries, int(map_attribute_definition_xhtml_showintableentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_string_showintableentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries {
			map_attribute_definition_string_showintableentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntry.GetMap_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntryDBFromMap_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntryPtr(map_attribute_definition_string_showintableentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_string_showintableentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_string_showintableentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries, int(map_attribute_definition_string_showintableentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_boolean_showintableentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries {
			map_attribute_definition_boolean_showintableentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntry.GetMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntryDBFromMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntryPtr(map_attribute_definition_boolean_showintableentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_boolean_showintableentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_boolean_showintableentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries, int(map_attribute_definition_boolean_showintableentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_integer_showintableentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries {
			map_attribute_definition_integer_showintableentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntry.GetMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntryDBFromMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntryPtr(map_attribute_definition_integer_showintableentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_integer_showintableentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_integer_showintableentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries, int(map_attribute_definition_integer_showintableentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_date_showintableentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries {
			map_attribute_definition_date_showintableentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntry.GetMap_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntryDBFromMap_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntryPtr(map_attribute_definition_date_showintableentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_date_showintableentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_date_showintableentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries, int(map_attribute_definition_date_showintableentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_real_showintableentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries {
			map_attribute_definition_real_showintableentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntry.GetMap_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntryDBFromMap_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntryPtr(map_attribute_definition_real_showintableentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_real_showintableentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_real_showintableentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries, int(map_attribute_definition_real_showintableentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_enumeration_showintableentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries {
			map_attribute_definition_enumeration_showintableentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntry.GetMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntryDBFromMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntryPtr(map_attribute_definition_enumeration_showintableentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_enumeration_showintableentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_enumeration_showintableentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries, int(map_attribute_definition_enumeration_showintableentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_xhtml_showinsubjectentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries {
			map_attribute_definition_xhtml_showinsubjectentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntry.GetMap_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntryDBFromMap_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntryPtr(map_attribute_definition_xhtml_showinsubjectentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_xhtml_showinsubjectentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_xhtml_showinsubjectentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries, int(map_attribute_definition_xhtml_showinsubjectentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_string_showinsubjectentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries {
			map_attribute_definition_string_showinsubjectentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntry.GetMap_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntryDBFromMap_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntryPtr(map_attribute_definition_string_showinsubjectentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_string_showinsubjectentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_string_showinsubjectentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries, int(map_attribute_definition_string_showinsubjectentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_boolean_showinsubjectentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries {
			map_attribute_definition_boolean_showinsubjectentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntry.GetMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntryDBFromMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntryPtr(map_attribute_definition_boolean_showinsubjectentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_boolean_showinsubjectentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_boolean_showinsubjectentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries, int(map_attribute_definition_boolean_showinsubjectentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_integer_showinsubjectentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries {
			map_attribute_definition_integer_showinsubjectentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntry.GetMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntryDBFromMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntryPtr(map_attribute_definition_integer_showinsubjectentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_integer_showinsubjectentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_integer_showinsubjectentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries, int(map_attribute_definition_integer_showinsubjectentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_date_showinsubjectentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries {
			map_attribute_definition_date_showinsubjectentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntry.GetMap_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntryDBFromMap_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntryPtr(map_attribute_definition_date_showinsubjectentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_date_showinsubjectentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_date_showinsubjectentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries, int(map_attribute_definition_date_showinsubjectentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_real_showinsubjectentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries {
			map_attribute_definition_real_showinsubjectentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntry.GetMap_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntryDBFromMap_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntryPtr(map_attribute_definition_real_showinsubjectentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_real_showinsubjectentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_real_showinsubjectentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries, int(map_attribute_definition_real_showinsubjectentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries = make([]int, 0)
		// 2. encode
		for _, map_attribute_definition_enumeration_showinsubjectentryAssocEnd := range renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries {
			map_attribute_definition_enumeration_showinsubjectentryAssocEnd_DB :=
				backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntry.GetMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntryDBFromMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntryPtr(map_attribute_definition_enumeration_showinsubjectentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_attribute_definition_enumeration_showinsubjectentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_attribute_definition_enumeration_showinsubjectentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries, int(map_attribute_definition_enumeration_showinsubjectentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPECIFICATION_Nodes_expandedEntries = make([]int, 0)
		// 2. encode
		for _, map_specification_nodes_expandedentryAssocEnd := range renderingconfiguration.Map_SPECIFICATION_Nodes_expandedEntries {
			map_specification_nodes_expandedentryAssocEnd_DB :=
				backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.GetMap_SPECIFICATION_Nodes_expandedEntryDBFromMap_SPECIFICATION_Nodes_expandedEntryPtr(map_specification_nodes_expandedentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_specification_nodes_expandedentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_specification_nodes_expandedentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPECIFICATION_Nodes_expandedEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPECIFICATION_Nodes_expandedEntries, int(map_specification_nodes_expandedentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_showIdentifierEntries = make([]int, 0)
		// 2. encode
		for _, map_spec_object_type_showidentifierentryAssocEnd := range renderingconfiguration.Map_SPEC_OBJECT_TYPE_showIdentifierEntries {
			map_spec_object_type_showidentifierentryAssocEnd_DB :=
				backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.GetMap_SPEC_OBJECT_TYPE_showIdentifierEntryDBFromMap_SPEC_OBJECT_TYPE_showIdentifierEntryPtr(map_spec_object_type_showidentifierentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_spec_object_type_showidentifierentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_spec_object_type_showidentifierentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_showIdentifierEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_showIdentifierEntries, int(map_spec_object_type_showidentifierentryAssocEnd_DB.ID))
		}

		// 1. reset
		renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_showNameEntries = make([]int, 0)
		// 2. encode
		for _, map_spec_object_type_shownameentryAssocEnd := range renderingconfiguration.Map_SPEC_OBJECT_TYPE_showNameEntries {
			map_spec_object_type_shownameentryAssocEnd_DB :=
				backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showNameEntry.GetMap_SPEC_OBJECT_TYPE_showNameEntryDBFromMap_SPEC_OBJECT_TYPE_showNameEntryPtr(map_spec_object_type_shownameentryAssocEnd)
			
			// the stage might be inconsistant, meaning that the map_spec_object_type_shownameentryAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if map_spec_object_type_shownameentryAssocEnd_DB == nil {
				continue
			}
			
			renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_showNameEntries =
				append(renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_showNameEntries, int(map_spec_object_type_shownameentryAssocEnd_DB.ID))
		}

		_, err := backRepoRenderingConfiguration.db.Save(renderingconfigurationDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown RenderingConfiguration intance %s", renderingconfiguration.Name))
		return err
	}

	return
}

// BackRepoRenderingConfiguration.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CheckoutPhaseOne() (Error error) {

	renderingconfigurationDBArray := make([]RenderingConfigurationDB, 0)
	_, err := backRepoRenderingConfiguration.db.Find(&renderingconfigurationDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	renderingconfigurationInstancesToBeRemovedFromTheStage := make(map[*models.RenderingConfiguration]any)
	for key, value := range backRepoRenderingConfiguration.stage.RenderingConfigurations {
		renderingconfigurationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, renderingconfigurationDB := range renderingconfigurationDBArray {
		backRepoRenderingConfiguration.CheckoutPhaseOneInstance(&renderingconfigurationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		renderingconfiguration, ok := backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr[renderingconfigurationDB.ID]
		if ok {
			delete(renderingconfigurationInstancesToBeRemovedFromTheStage, renderingconfiguration)
		}
	}

	// remove from stage and back repo's 3 maps all renderingconfigurations that are not in the checkout
	for renderingconfiguration := range renderingconfigurationInstancesToBeRemovedFromTheStage {
		renderingconfiguration.Unstage(backRepoRenderingConfiguration.GetStage())

		// remove instance from the back repo 3 maps
		renderingconfigurationID := backRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID[renderingconfiguration]
		delete(backRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID, renderingconfiguration)
		delete(backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB, renderingconfigurationID)
		delete(backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr, renderingconfigurationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a renderingconfigurationDB that has been found in the DB, updates the backRepo and stages the
// models version of the renderingconfigurationDB
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CheckoutPhaseOneInstance(renderingconfigurationDB *RenderingConfigurationDB) (Error error) {

	renderingconfiguration, ok := backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr[renderingconfigurationDB.ID]
	if !ok {
		renderingconfiguration = new(models.RenderingConfiguration)

		backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr[renderingconfigurationDB.ID] = renderingconfiguration
		backRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID[renderingconfiguration] = renderingconfigurationDB.ID

		// append model store with the new element
		renderingconfiguration.Name = renderingconfigurationDB.Name_Data.String
		renderingconfiguration.Stage(backRepoRenderingConfiguration.GetStage())
	}
	renderingconfigurationDB.CopyBasicFieldsToRenderingConfiguration(renderingconfiguration)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	renderingconfiguration.Stage(backRepoRenderingConfiguration.GetStage())

	// preserve pointer to renderingconfigurationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RenderingConfigurationDBID_RenderingConfigurationDB)[renderingconfigurationDB hold variable pointers
	renderingconfigurationDB_Data := *renderingconfigurationDB
	preservedPtrToRenderingConfiguration := &renderingconfigurationDB_Data
	backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB[renderingconfigurationDB.ID] = preservedPtrToRenderingConfiguration

	return
}

// BackRepoRenderingConfiguration.CheckoutPhaseTwo Checkouts all staged instances of RenderingConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, renderingconfigurationDB := range backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB {
		backRepoRenderingConfiguration.CheckoutPhaseTwoInstance(backRepo, renderingconfigurationDB)
	}
	return
}

// BackRepoRenderingConfiguration.CheckoutPhaseTwoInstance Checkouts staged instances of RenderingConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, renderingconfigurationDB *RenderingConfigurationDB) (Error error) {

	renderingconfiguration := backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr[renderingconfigurationDB.ID]

	renderingconfigurationDB.DecodePointers(backRepo, renderingconfiguration)

	return
}

func (renderingconfigurationDB *RenderingConfigurationDB) DecodePointers(backRepo *BackRepoStruct, renderingconfiguration *models.RenderingConfiguration) {

	// insertion point for checkout of pointer encoding
	// This loop redeem renderingconfiguration.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries in the stage from the encode in the back repo
	// It parses all Map_SPEC_OBJECT_TYPE_isNodeExpandedEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries = renderingconfiguration.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries[:0]
	for _, _Map_SPEC_OBJECT_TYPE_isNodeExpandedEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries {
		renderingconfiguration.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries = append(renderingconfiguration.Map_SPEC_OBJECT_TYPE_isNodeExpandedEntries, backRepo.BackRepoMap_SPEC_OBJECT_TYPE_isNodeExpandedEntry.Map_Map_SPEC_OBJECT_TYPE_isNodeExpandedEntryDBID_Map_SPEC_OBJECT_TYPE_isNodeExpandedEntryPtr[uint(_Map_SPEC_OBJECT_TYPE_isNodeExpandedEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntry.Map_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntryDBID_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTitleEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntry.Map_Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntryDBID_Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_STRING_ShowInTitleEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntry.Map_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntryDBID_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTitleEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntry.Map_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntryDBID_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTitleEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntry.Map_Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntryDBID_Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_DATE_ShowInTitleEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntry.Map_Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntryDBID_Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_REAL_ShowInTitleEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntry.Map_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntryDBID_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTitleEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntry.Map_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntryDBID_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInTableEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntry.Map_Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntryDBID_Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_STRING_ShowInTableEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntry.Map_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntryDBID_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInTableEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntry.Map_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntryDBID_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInTableEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntry.Map_Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntryDBID_Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_DATE_ShowInTableEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntry.Map_Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntryDBID_Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_REAL_ShowInTableEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntry.Map_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntryDBID_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInTableEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntry.Map_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntryDBID_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_XHTML_ShowInSubjectEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntry.Map_Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntryDBID_Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_STRING_ShowInSubjectEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntry.Map_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntryDBID_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_BOOLEAN_ShowInSubjectEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntry.Map_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntryDBID_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_INTEGER_ShowInSubjectEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntry.Map_Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntryDBID_Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_DATE_ShowInSubjectEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntry.Map_Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntryDBID_Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_REAL_ShowInSubjectEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries in the stage from the encode in the back repo
	// It parses all Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries = renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries[:0]
	for _, _Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries {
		renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries = append(renderingconfiguration.Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntries, backRepo.BackRepoMap_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntry.Map_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntryDBID_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntryPtr[uint(_Map_ATTRIBUTE_DEFINITION_ENUMERATION_ShowInSubjectEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_SPECIFICATION_Nodes_expandedEntries in the stage from the encode in the back repo
	// It parses all Map_SPECIFICATION_Nodes_expandedEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_SPECIFICATION_Nodes_expandedEntries = renderingconfiguration.Map_SPECIFICATION_Nodes_expandedEntries[:0]
	for _, _Map_SPECIFICATION_Nodes_expandedEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPECIFICATION_Nodes_expandedEntries {
		renderingconfiguration.Map_SPECIFICATION_Nodes_expandedEntries = append(renderingconfiguration.Map_SPECIFICATION_Nodes_expandedEntries, backRepo.BackRepoMap_SPECIFICATION_Nodes_expandedEntry.Map_Map_SPECIFICATION_Nodes_expandedEntryDBID_Map_SPECIFICATION_Nodes_expandedEntryPtr[uint(_Map_SPECIFICATION_Nodes_expandedEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_SPEC_OBJECT_TYPE_showIdentifierEntries in the stage from the encode in the back repo
	// It parses all Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_SPEC_OBJECT_TYPE_showIdentifierEntries = renderingconfiguration.Map_SPEC_OBJECT_TYPE_showIdentifierEntries[:0]
	for _, _Map_SPEC_OBJECT_TYPE_showIdentifierEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_showIdentifierEntries {
		renderingconfiguration.Map_SPEC_OBJECT_TYPE_showIdentifierEntries = append(renderingconfiguration.Map_SPEC_OBJECT_TYPE_showIdentifierEntries, backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr[uint(_Map_SPEC_OBJECT_TYPE_showIdentifierEntryid)])
	}

	// This loop redeem renderingconfiguration.Map_SPEC_OBJECT_TYPE_showNameEntries in the stage from the encode in the back repo
	// It parses all Map_SPEC_OBJECT_TYPE_showNameEntryDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renderingconfiguration.Map_SPEC_OBJECT_TYPE_showNameEntries = renderingconfiguration.Map_SPEC_OBJECT_TYPE_showNameEntries[:0]
	for _, _Map_SPEC_OBJECT_TYPE_showNameEntryid := range renderingconfigurationDB.RenderingConfigurationPointersEncoding.Map_SPEC_OBJECT_TYPE_showNameEntries {
		renderingconfiguration.Map_SPEC_OBJECT_TYPE_showNameEntries = append(renderingconfiguration.Map_SPEC_OBJECT_TYPE_showNameEntries, backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showNameEntry.Map_Map_SPEC_OBJECT_TYPE_showNameEntryDBID_Map_SPEC_OBJECT_TYPE_showNameEntryPtr[uint(_Map_SPEC_OBJECT_TYPE_showNameEntryid)])
	}

	return
}

// CommitRenderingConfiguration allows commit of a single renderingconfiguration (if already staged)
func (backRepo *BackRepoStruct) CommitRenderingConfiguration(renderingconfiguration *models.RenderingConfiguration) {
	backRepo.BackRepoRenderingConfiguration.CommitPhaseOneInstance(renderingconfiguration)
	if id, ok := backRepo.BackRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID[renderingconfiguration]; ok {
		backRepo.BackRepoRenderingConfiguration.CommitPhaseTwoInstance(backRepo, id, renderingconfiguration)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRenderingConfiguration allows checkout of a single renderingconfiguration (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRenderingConfiguration(renderingconfiguration *models.RenderingConfiguration) {
	// check if the renderingconfiguration is staged
	if _, ok := backRepo.BackRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID[renderingconfiguration]; ok {

		if id, ok := backRepo.BackRepoRenderingConfiguration.Map_RenderingConfigurationPtr_RenderingConfigurationDBID[renderingconfiguration]; ok {
			var renderingconfigurationDB RenderingConfigurationDB
			renderingconfigurationDB.ID = id

			if _, err := backRepo.BackRepoRenderingConfiguration.db.First(&renderingconfigurationDB, id); err != nil {
				log.Fatalln("CheckoutRenderingConfiguration : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRenderingConfiguration.CheckoutPhaseOneInstance(&renderingconfigurationDB)
			backRepo.BackRepoRenderingConfiguration.CheckoutPhaseTwoInstance(backRepo, &renderingconfigurationDB)
		}
	}
}

// CopyBasicFieldsFromRenderingConfiguration
func (renderingconfigurationDB *RenderingConfigurationDB) CopyBasicFieldsFromRenderingConfiguration(renderingconfiguration *models.RenderingConfiguration) {
	// insertion point for fields commit

	renderingconfigurationDB.Name_Data.String = renderingconfiguration.Name
	renderingconfigurationDB.Name_Data.Valid = true

	renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Bool = renderingconfiguration.ShowSpecHierachyIdentifiers
	renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Valid = true
}

// CopyBasicFieldsFromRenderingConfiguration_WOP
func (renderingconfigurationDB *RenderingConfigurationDB) CopyBasicFieldsFromRenderingConfiguration_WOP(renderingconfiguration *models.RenderingConfiguration_WOP) {
	// insertion point for fields commit

	renderingconfigurationDB.Name_Data.String = renderingconfiguration.Name
	renderingconfigurationDB.Name_Data.Valid = true

	renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Bool = renderingconfiguration.ShowSpecHierachyIdentifiers
	renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Valid = true
}

// CopyBasicFieldsFromRenderingConfigurationWOP
func (renderingconfigurationDB *RenderingConfigurationDB) CopyBasicFieldsFromRenderingConfigurationWOP(renderingconfiguration *RenderingConfigurationWOP) {
	// insertion point for fields commit

	renderingconfigurationDB.Name_Data.String = renderingconfiguration.Name
	renderingconfigurationDB.Name_Data.Valid = true

	renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Bool = renderingconfiguration.ShowSpecHierachyIdentifiers
	renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Valid = true
}

// CopyBasicFieldsToRenderingConfiguration
func (renderingconfigurationDB *RenderingConfigurationDB) CopyBasicFieldsToRenderingConfiguration(renderingconfiguration *models.RenderingConfiguration) {
	// insertion point for checkout of basic fields (back repo to stage)
	renderingconfiguration.Name = renderingconfigurationDB.Name_Data.String
	renderingconfiguration.ShowSpecHierachyIdentifiers = renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Bool
}

// CopyBasicFieldsToRenderingConfiguration_WOP
func (renderingconfigurationDB *RenderingConfigurationDB) CopyBasicFieldsToRenderingConfiguration_WOP(renderingconfiguration *models.RenderingConfiguration_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	renderingconfiguration.Name = renderingconfigurationDB.Name_Data.String
	renderingconfiguration.ShowSpecHierachyIdentifiers = renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Bool
}

// CopyBasicFieldsToRenderingConfigurationWOP
func (renderingconfigurationDB *RenderingConfigurationDB) CopyBasicFieldsToRenderingConfigurationWOP(renderingconfiguration *RenderingConfigurationWOP) {
	renderingconfiguration.ID = int(renderingconfigurationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	renderingconfiguration.Name = renderingconfigurationDB.Name_Data.String
	renderingconfiguration.ShowSpecHierachyIdentifiers = renderingconfigurationDB.ShowSpecHierachyIdentifiers_Data.Bool
}

// Backup generates a json file from a slice of all RenderingConfigurationDB instances in the backrepo
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RenderingConfigurationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RenderingConfigurationDB, 0)
	for _, renderingconfigurationDB := range backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB {
		forBackup = append(forBackup, renderingconfigurationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json RenderingConfiguration ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json RenderingConfiguration file", err.Error())
	}
}

// Backup generates a json file from a slice of all RenderingConfigurationDB instances in the backrepo
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RenderingConfigurationDB, 0)
	for _, renderingconfigurationDB := range backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB {
		forBackup = append(forBackup, renderingconfigurationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("RenderingConfiguration")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&RenderingConfiguration_Fields, -1)
	for _, renderingconfigurationDB := range forBackup {

		var renderingconfigurationWOP RenderingConfigurationWOP
		renderingconfigurationDB.CopyBasicFieldsToRenderingConfigurationWOP(&renderingconfigurationWOP)

		row := sh.AddRow()
		row.WriteStruct(&renderingconfigurationWOP, -1)
	}
}

// RestoreXL from the "RenderingConfiguration" sheet all RenderingConfigurationDB instances
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRenderingConfigurationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["RenderingConfiguration"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRenderingConfiguration.rowVisitorRenderingConfiguration)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) rowVisitorRenderingConfiguration(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var renderingconfigurationWOP RenderingConfigurationWOP
		row.ReadStruct(&renderingconfigurationWOP)

		// add the unmarshalled struct to the stage
		renderingconfigurationDB := new(RenderingConfigurationDB)
		renderingconfigurationDB.CopyBasicFieldsFromRenderingConfigurationWOP(&renderingconfigurationWOP)

		renderingconfigurationDB_ID_atBackupTime := renderingconfigurationDB.ID
		renderingconfigurationDB.ID = 0
		_, err := backRepoRenderingConfiguration.db.Create(renderingconfigurationDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB[renderingconfigurationDB.ID] = renderingconfigurationDB
		BackRepoRenderingConfigurationid_atBckpTime_newID[renderingconfigurationDB_ID_atBackupTime] = renderingconfigurationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RenderingConfigurationDB.json" in dirPath that stores an array
// of RenderingConfigurationDB and stores it in the database
// the map BackRepoRenderingConfigurationid_atBckpTime_newID is updated accordingly
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRenderingConfigurationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RenderingConfigurationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json RenderingConfiguration file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RenderingConfigurationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RenderingConfigurationDBID_RenderingConfigurationDB
	for _, renderingconfigurationDB := range forRestore {

		renderingconfigurationDB_ID_atBackupTime := renderingconfigurationDB.ID
		renderingconfigurationDB.ID = 0
		_, err := backRepoRenderingConfiguration.db.Create(renderingconfigurationDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB[renderingconfigurationDB.ID] = renderingconfigurationDB
		BackRepoRenderingConfigurationid_atBckpTime_newID[renderingconfigurationDB_ID_atBackupTime] = renderingconfigurationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json RenderingConfiguration file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<RenderingConfiguration>id_atBckpTime_newID
// to compute new index
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) RestorePhaseTwo() {

	for _, renderingconfigurationDB := range backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB {

		// next line of code is to avert unused variable compilation error
		_ = renderingconfigurationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoRenderingConfiguration.db.Model(renderingconfigurationDB)
		_, err := db.Updates(*renderingconfigurationDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoRenderingConfiguration.ResetReversePointers commits all staged instances of RenderingConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, renderingconfiguration := range backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationPtr {
		backRepoRenderingConfiguration.ResetReversePointersInstance(backRepo, idx, renderingconfiguration)
	}

	return
}

func (backRepoRenderingConfiguration *BackRepoRenderingConfigurationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, renderingconfiguration *models.RenderingConfiguration) (Error error) {

	// fetch matching renderingconfigurationDB
	if renderingconfigurationDB, ok := backRepoRenderingConfiguration.Map_RenderingConfigurationDBID_RenderingConfigurationDB[idx]; ok {
		_ = renderingconfigurationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRenderingConfigurationid_atBckpTime_newID map[uint]uint
