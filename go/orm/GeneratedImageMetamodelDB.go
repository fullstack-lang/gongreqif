// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GeneratedImageMetamodel_sql sql.NullBool
var dummy_GeneratedImageMetamodel_time time.Duration
var dummy_GeneratedImageMetamodel_sort sort.Float64Slice

// GeneratedImageMetamodelAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model generatedimagemetamodelAPI
type GeneratedImageMetamodelAPI struct {
	gorm.Model

	models.GeneratedImageMetamodel_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GeneratedImageMetamodelPointersEncoding GeneratedImageMetamodelPointersEncoding
}

// GeneratedImageMetamodelPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GeneratedImageMetamodelPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// GeneratedImageMetamodelDB describes a generatedimagemetamodel in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model generatedimagemetamodelDB
type GeneratedImageMetamodelDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field generatedimagemetamodelDB.Name
	Name_Data sql.NullString

	// Declation for basic field generatedimagemetamodelDB.ImageName
	ImageName_Data sql.NullString

	// Declation for basic field generatedimagemetamodelDB.IsMetamodel
	// provide the sql storage for the boolan
	IsMetamodel_Data sql.NullBool

	// Declation for basic field generatedimagemetamodelDB.LegendMarkdownContent
	LegendMarkdownContent_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GeneratedImageMetamodelPointersEncoding
}

// GeneratedImageMetamodelDBs arrays generatedimagemetamodelDBs
// swagger:response generatedimagemetamodelDBsResponse
type GeneratedImageMetamodelDBs []GeneratedImageMetamodelDB

// GeneratedImageMetamodelDBResponse provides response
// swagger:response generatedimagemetamodelDBResponse
type GeneratedImageMetamodelDBResponse struct {
	GeneratedImageMetamodelDB
}

// GeneratedImageMetamodelWOP is a GeneratedImageMetamodel without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GeneratedImageMetamodelWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ImageName string `xlsx:"2"`

	IsMetamodel bool `xlsx:"3"`

	LegendMarkdownContent string `xlsx:"4"`
	// insertion for WOP pointer fields
}

var GeneratedImageMetamodel_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ImageName",
	"IsMetamodel",
	"LegendMarkdownContent",
}

type BackRepoGeneratedImageMetamodelStruct struct {
	// stores GeneratedImageMetamodelDB according to their gorm ID
	Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB map[uint]*GeneratedImageMetamodelDB

	// stores GeneratedImageMetamodelDB ID according to GeneratedImageMetamodel address
	Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID map[*models.GeneratedImageMetamodel]uint

	// stores GeneratedImageMetamodel according to their gorm ID
	Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr map[uint]*models.GeneratedImageMetamodel

	db db.DBInterface

	stage *models.Stage
}

func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) GetStage() (stage *models.Stage) {
	stage = backRepoGeneratedImageMetamodel.stage
	return
}

func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) GetDB() db.DBInterface {
	return backRepoGeneratedImageMetamodel.db
}

// GetGeneratedImageMetamodelDBFromGeneratedImageMetamodelPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) GetGeneratedImageMetamodelDBFromGeneratedImageMetamodelPtr(generatedimagemetamodel *models.GeneratedImageMetamodel) (generatedimagemetamodelDB *GeneratedImageMetamodelDB) {
	id := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID[generatedimagemetamodel]
	generatedimagemetamodelDB = backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB[id]
	return
}

// BackRepoGeneratedImageMetamodel.CommitPhaseOne commits all staged instances of GeneratedImageMetamodel to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var generatedimagemetamodels []*models.GeneratedImageMetamodel
	for generatedimagemetamodel := range stage.GeneratedImageMetamodels {
		generatedimagemetamodels = append(generatedimagemetamodels, generatedimagemetamodel)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(generatedimagemetamodels, func(i, j int) bool {
		return stage.GeneratedImageMetamodelMap_Staged_Order[generatedimagemetamodels[i]] < stage.GeneratedImageMetamodelMap_Staged_Order[generatedimagemetamodels[j]]
	})

	for _, generatedimagemetamodel := range generatedimagemetamodels {
		backRepoGeneratedImageMetamodel.CommitPhaseOneInstance(generatedimagemetamodel)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, generatedimagemetamodel := range backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr {
		if _, ok := stage.GeneratedImageMetamodels[generatedimagemetamodel]; !ok {
			backRepoGeneratedImageMetamodel.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGeneratedImageMetamodel.CommitDeleteInstance commits deletion of GeneratedImageMetamodel to the BackRepo
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CommitDeleteInstance(id uint) (Error error) {

	generatedimagemetamodel := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr[id]

	// generatedimagemetamodel is not staged anymore, remove generatedimagemetamodelDB
	generatedimagemetamodelDB := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB[id]
	db, _ := backRepoGeneratedImageMetamodel.db.Unscoped()
	_, err := db.Delete(generatedimagemetamodelDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID, generatedimagemetamodel)
	delete(backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr, id)
	delete(backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB, id)

	return
}

// BackRepoGeneratedImageMetamodel.CommitPhaseOneInstance commits generatedimagemetamodel staged instances of GeneratedImageMetamodel to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CommitPhaseOneInstance(generatedimagemetamodel *models.GeneratedImageMetamodel) (Error error) {

	// check if the generatedimagemetamodel is not commited yet
	if _, ok := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID[generatedimagemetamodel]; ok {
		return
	}

	// initiate generatedimagemetamodel
	var generatedimagemetamodelDB GeneratedImageMetamodelDB
	generatedimagemetamodelDB.CopyBasicFieldsFromGeneratedImageMetamodel(generatedimagemetamodel)

	_, err := backRepoGeneratedImageMetamodel.db.Create(&generatedimagemetamodelDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID[generatedimagemetamodel] = generatedimagemetamodelDB.ID
	backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr[generatedimagemetamodelDB.ID] = generatedimagemetamodel
	backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB[generatedimagemetamodelDB.ID] = &generatedimagemetamodelDB

	return
}

// BackRepoGeneratedImageMetamodel.CommitPhaseTwo commits all staged instances of GeneratedImageMetamodel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, generatedimagemetamodel := range backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr {
		backRepoGeneratedImageMetamodel.CommitPhaseTwoInstance(backRepo, idx, generatedimagemetamodel)
	}

	return
}

// BackRepoGeneratedImageMetamodel.CommitPhaseTwoInstance commits {{structname }} of models.GeneratedImageMetamodel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, generatedimagemetamodel *models.GeneratedImageMetamodel) (Error error) {

	// fetch matching generatedimagemetamodelDB
	if generatedimagemetamodelDB, ok := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB[idx]; ok {

		generatedimagemetamodelDB.CopyBasicFieldsFromGeneratedImageMetamodel(generatedimagemetamodel)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoGeneratedImageMetamodel.db.Save(generatedimagemetamodelDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GeneratedImageMetamodel intance %s", generatedimagemetamodel.Name))
		return err
	}

	return
}

// BackRepoGeneratedImageMetamodel.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CheckoutPhaseOne() (Error error) {

	generatedimagemetamodelDBArray := make([]GeneratedImageMetamodelDB, 0)
	_, err := backRepoGeneratedImageMetamodel.db.Find(&generatedimagemetamodelDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	generatedimagemetamodelInstancesToBeRemovedFromTheStage := make(map[*models.GeneratedImageMetamodel]any)
	for key, value := range backRepoGeneratedImageMetamodel.stage.GeneratedImageMetamodels {
		generatedimagemetamodelInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, generatedimagemetamodelDB := range generatedimagemetamodelDBArray {
		backRepoGeneratedImageMetamodel.CheckoutPhaseOneInstance(&generatedimagemetamodelDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		generatedimagemetamodel, ok := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr[generatedimagemetamodelDB.ID]
		if ok {
			delete(generatedimagemetamodelInstancesToBeRemovedFromTheStage, generatedimagemetamodel)
		}
	}

	// remove from stage and back repo's 3 maps all generatedimagemetamodels that are not in the checkout
	for generatedimagemetamodel := range generatedimagemetamodelInstancesToBeRemovedFromTheStage {
		generatedimagemetamodel.Unstage(backRepoGeneratedImageMetamodel.GetStage())

		// remove instance from the back repo 3 maps
		generatedimagemetamodelID := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID[generatedimagemetamodel]
		delete(backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID, generatedimagemetamodel)
		delete(backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB, generatedimagemetamodelID)
		delete(backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr, generatedimagemetamodelID)
	}

	return
}

// CheckoutPhaseOneInstance takes a generatedimagemetamodelDB that has been found in the DB, updates the backRepo and stages the
// models version of the generatedimagemetamodelDB
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CheckoutPhaseOneInstance(generatedimagemetamodelDB *GeneratedImageMetamodelDB) (Error error) {

	generatedimagemetamodel, ok := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr[generatedimagemetamodelDB.ID]
	if !ok {
		generatedimagemetamodel = new(models.GeneratedImageMetamodel)

		backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr[generatedimagemetamodelDB.ID] = generatedimagemetamodel
		backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID[generatedimagemetamodel] = generatedimagemetamodelDB.ID

		// append model store with the new element
		generatedimagemetamodel.Name = generatedimagemetamodelDB.Name_Data.String
		generatedimagemetamodel.Stage(backRepoGeneratedImageMetamodel.GetStage())
	}
	generatedimagemetamodelDB.CopyBasicFieldsToGeneratedImageMetamodel(generatedimagemetamodel)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	generatedimagemetamodel.Stage(backRepoGeneratedImageMetamodel.GetStage())

	// preserve pointer to generatedimagemetamodelDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB)[generatedimagemetamodelDB hold variable pointers
	generatedimagemetamodelDB_Data := *generatedimagemetamodelDB
	preservedPtrToGeneratedImageMetamodel := &generatedimagemetamodelDB_Data
	backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB[generatedimagemetamodelDB.ID] = preservedPtrToGeneratedImageMetamodel

	return
}

// BackRepoGeneratedImageMetamodel.CheckoutPhaseTwo Checkouts all staged instances of GeneratedImageMetamodel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, generatedimagemetamodelDB := range backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB {
		backRepoGeneratedImageMetamodel.CheckoutPhaseTwoInstance(backRepo, generatedimagemetamodelDB)
	}
	return
}

// BackRepoGeneratedImageMetamodel.CheckoutPhaseTwoInstance Checkouts staged instances of GeneratedImageMetamodel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, generatedimagemetamodelDB *GeneratedImageMetamodelDB) (Error error) {

	generatedimagemetamodel := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr[generatedimagemetamodelDB.ID]

	generatedimagemetamodelDB.DecodePointers(backRepo, generatedimagemetamodel)

	return
}

func (generatedimagemetamodelDB *GeneratedImageMetamodelDB) DecodePointers(backRepo *BackRepoStruct, generatedimagemetamodel *models.GeneratedImageMetamodel) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGeneratedImageMetamodel allows commit of a single generatedimagemetamodel (if already staged)
func (backRepo *BackRepoStruct) CommitGeneratedImageMetamodel(generatedimagemetamodel *models.GeneratedImageMetamodel) {
	backRepo.BackRepoGeneratedImageMetamodel.CommitPhaseOneInstance(generatedimagemetamodel)
	if id, ok := backRepo.BackRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID[generatedimagemetamodel]; ok {
		backRepo.BackRepoGeneratedImageMetamodel.CommitPhaseTwoInstance(backRepo, id, generatedimagemetamodel)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGeneratedImageMetamodel allows checkout of a single generatedimagemetamodel (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGeneratedImageMetamodel(generatedimagemetamodel *models.GeneratedImageMetamodel) {
	// check if the generatedimagemetamodel is staged
	if _, ok := backRepo.BackRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID[generatedimagemetamodel]; ok {

		if id, ok := backRepo.BackRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelPtr_GeneratedImageMetamodelDBID[generatedimagemetamodel]; ok {
			var generatedimagemetamodelDB GeneratedImageMetamodelDB
			generatedimagemetamodelDB.ID = id

			if _, err := backRepo.BackRepoGeneratedImageMetamodel.db.First(&generatedimagemetamodelDB, id); err != nil {
				log.Fatalln("CheckoutGeneratedImageMetamodel : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGeneratedImageMetamodel.CheckoutPhaseOneInstance(&generatedimagemetamodelDB)
			backRepo.BackRepoGeneratedImageMetamodel.CheckoutPhaseTwoInstance(backRepo, &generatedimagemetamodelDB)
		}
	}
}

// CopyBasicFieldsFromGeneratedImageMetamodel
func (generatedimagemetamodelDB *GeneratedImageMetamodelDB) CopyBasicFieldsFromGeneratedImageMetamodel(generatedimagemetamodel *models.GeneratedImageMetamodel) {
	// insertion point for fields commit

	generatedimagemetamodelDB.Name_Data.String = generatedimagemetamodel.Name
	generatedimagemetamodelDB.Name_Data.Valid = true

	generatedimagemetamodelDB.ImageName_Data.String = generatedimagemetamodel.ImageName
	generatedimagemetamodelDB.ImageName_Data.Valid = true

	generatedimagemetamodelDB.IsMetamodel_Data.Bool = generatedimagemetamodel.IsMetamodel
	generatedimagemetamodelDB.IsMetamodel_Data.Valid = true

	generatedimagemetamodelDB.LegendMarkdownContent_Data.String = generatedimagemetamodel.LegendMarkdownContent
	generatedimagemetamodelDB.LegendMarkdownContent_Data.Valid = true
}

// CopyBasicFieldsFromGeneratedImageMetamodel_WOP
func (generatedimagemetamodelDB *GeneratedImageMetamodelDB) CopyBasicFieldsFromGeneratedImageMetamodel_WOP(generatedimagemetamodel *models.GeneratedImageMetamodel_WOP) {
	// insertion point for fields commit

	generatedimagemetamodelDB.Name_Data.String = generatedimagemetamodel.Name
	generatedimagemetamodelDB.Name_Data.Valid = true

	generatedimagemetamodelDB.ImageName_Data.String = generatedimagemetamodel.ImageName
	generatedimagemetamodelDB.ImageName_Data.Valid = true

	generatedimagemetamodelDB.IsMetamodel_Data.Bool = generatedimagemetamodel.IsMetamodel
	generatedimagemetamodelDB.IsMetamodel_Data.Valid = true

	generatedimagemetamodelDB.LegendMarkdownContent_Data.String = generatedimagemetamodel.LegendMarkdownContent
	generatedimagemetamodelDB.LegendMarkdownContent_Data.Valid = true
}

// CopyBasicFieldsFromGeneratedImageMetamodelWOP
func (generatedimagemetamodelDB *GeneratedImageMetamodelDB) CopyBasicFieldsFromGeneratedImageMetamodelWOP(generatedimagemetamodel *GeneratedImageMetamodelWOP) {
	// insertion point for fields commit

	generatedimagemetamodelDB.Name_Data.String = generatedimagemetamodel.Name
	generatedimagemetamodelDB.Name_Data.Valid = true

	generatedimagemetamodelDB.ImageName_Data.String = generatedimagemetamodel.ImageName
	generatedimagemetamodelDB.ImageName_Data.Valid = true

	generatedimagemetamodelDB.IsMetamodel_Data.Bool = generatedimagemetamodel.IsMetamodel
	generatedimagemetamodelDB.IsMetamodel_Data.Valid = true

	generatedimagemetamodelDB.LegendMarkdownContent_Data.String = generatedimagemetamodel.LegendMarkdownContent
	generatedimagemetamodelDB.LegendMarkdownContent_Data.Valid = true
}

// CopyBasicFieldsToGeneratedImageMetamodel
func (generatedimagemetamodelDB *GeneratedImageMetamodelDB) CopyBasicFieldsToGeneratedImageMetamodel(generatedimagemetamodel *models.GeneratedImageMetamodel) {
	// insertion point for checkout of basic fields (back repo to stage)
	generatedimagemetamodel.Name = generatedimagemetamodelDB.Name_Data.String
	generatedimagemetamodel.ImageName = generatedimagemetamodelDB.ImageName_Data.String
	generatedimagemetamodel.IsMetamodel = generatedimagemetamodelDB.IsMetamodel_Data.Bool
	generatedimagemetamodel.LegendMarkdownContent = generatedimagemetamodelDB.LegendMarkdownContent_Data.String
}

// CopyBasicFieldsToGeneratedImageMetamodel_WOP
func (generatedimagemetamodelDB *GeneratedImageMetamodelDB) CopyBasicFieldsToGeneratedImageMetamodel_WOP(generatedimagemetamodel *models.GeneratedImageMetamodel_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	generatedimagemetamodel.Name = generatedimagemetamodelDB.Name_Data.String
	generatedimagemetamodel.ImageName = generatedimagemetamodelDB.ImageName_Data.String
	generatedimagemetamodel.IsMetamodel = generatedimagemetamodelDB.IsMetamodel_Data.Bool
	generatedimagemetamodel.LegendMarkdownContent = generatedimagemetamodelDB.LegendMarkdownContent_Data.String
}

// CopyBasicFieldsToGeneratedImageMetamodelWOP
func (generatedimagemetamodelDB *GeneratedImageMetamodelDB) CopyBasicFieldsToGeneratedImageMetamodelWOP(generatedimagemetamodel *GeneratedImageMetamodelWOP) {
	generatedimagemetamodel.ID = int(generatedimagemetamodelDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	generatedimagemetamodel.Name = generatedimagemetamodelDB.Name_Data.String
	generatedimagemetamodel.ImageName = generatedimagemetamodelDB.ImageName_Data.String
	generatedimagemetamodel.IsMetamodel = generatedimagemetamodelDB.IsMetamodel_Data.Bool
	generatedimagemetamodel.LegendMarkdownContent = generatedimagemetamodelDB.LegendMarkdownContent_Data.String
}

// Backup generates a json file from a slice of all GeneratedImageMetamodelDB instances in the backrepo
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GeneratedImageMetamodelDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GeneratedImageMetamodelDB, 0)
	for _, generatedimagemetamodelDB := range backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB {
		forBackup = append(forBackup, generatedimagemetamodelDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json GeneratedImageMetamodel ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json GeneratedImageMetamodel file", err.Error())
	}
}

// Backup generates a json file from a slice of all GeneratedImageMetamodelDB instances in the backrepo
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GeneratedImageMetamodelDB, 0)
	for _, generatedimagemetamodelDB := range backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB {
		forBackup = append(forBackup, generatedimagemetamodelDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GeneratedImageMetamodel")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GeneratedImageMetamodel_Fields, -1)
	for _, generatedimagemetamodelDB := range forBackup {

		var generatedimagemetamodelWOP GeneratedImageMetamodelWOP
		generatedimagemetamodelDB.CopyBasicFieldsToGeneratedImageMetamodelWOP(&generatedimagemetamodelWOP)

		row := sh.AddRow()
		row.WriteStruct(&generatedimagemetamodelWOP, -1)
	}
}

// RestoreXL from the "GeneratedImageMetamodel" sheet all GeneratedImageMetamodelDB instances
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGeneratedImageMetamodelid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GeneratedImageMetamodel"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGeneratedImageMetamodel.rowVisitorGeneratedImageMetamodel)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) rowVisitorGeneratedImageMetamodel(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var generatedimagemetamodelWOP GeneratedImageMetamodelWOP
		row.ReadStruct(&generatedimagemetamodelWOP)

		// add the unmarshalled struct to the stage
		generatedimagemetamodelDB := new(GeneratedImageMetamodelDB)
		generatedimagemetamodelDB.CopyBasicFieldsFromGeneratedImageMetamodelWOP(&generatedimagemetamodelWOP)

		generatedimagemetamodelDB_ID_atBackupTime := generatedimagemetamodelDB.ID
		generatedimagemetamodelDB.ID = 0
		_, err := backRepoGeneratedImageMetamodel.db.Create(generatedimagemetamodelDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB[generatedimagemetamodelDB.ID] = generatedimagemetamodelDB
		BackRepoGeneratedImageMetamodelid_atBckpTime_newID[generatedimagemetamodelDB_ID_atBackupTime] = generatedimagemetamodelDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GeneratedImageMetamodelDB.json" in dirPath that stores an array
// of GeneratedImageMetamodelDB and stores it in the database
// the map BackRepoGeneratedImageMetamodelid_atBckpTime_newID is updated accordingly
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGeneratedImageMetamodelid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GeneratedImageMetamodelDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json GeneratedImageMetamodel file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GeneratedImageMetamodelDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB
	for _, generatedimagemetamodelDB := range forRestore {

		generatedimagemetamodelDB_ID_atBackupTime := generatedimagemetamodelDB.ID
		generatedimagemetamodelDB.ID = 0
		_, err := backRepoGeneratedImageMetamodel.db.Create(generatedimagemetamodelDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB[generatedimagemetamodelDB.ID] = generatedimagemetamodelDB
		BackRepoGeneratedImageMetamodelid_atBckpTime_newID[generatedimagemetamodelDB_ID_atBackupTime] = generatedimagemetamodelDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json GeneratedImageMetamodel file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GeneratedImageMetamodel>id_atBckpTime_newID
// to compute new index
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) RestorePhaseTwo() {

	for _, generatedimagemetamodelDB := range backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB {

		// next line of code is to avert unused variable compilation error
		_ = generatedimagemetamodelDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoGeneratedImageMetamodel.db.Model(generatedimagemetamodelDB)
		_, err := db.Updates(*generatedimagemetamodelDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoGeneratedImageMetamodel.ResetReversePointers commits all staged instances of GeneratedImageMetamodel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, generatedimagemetamodel := range backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelPtr {
		backRepoGeneratedImageMetamodel.ResetReversePointersInstance(backRepo, idx, generatedimagemetamodel)
	}

	return
}

func (backRepoGeneratedImageMetamodel *BackRepoGeneratedImageMetamodelStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, generatedimagemetamodel *models.GeneratedImageMetamodel) (Error error) {

	// fetch matching generatedimagemetamodelDB
	if generatedimagemetamodelDB, ok := backRepoGeneratedImageMetamodel.Map_GeneratedImageMetamodelDBID_GeneratedImageMetamodelDB[idx]; ok {
		_ = generatedimagemetamodelDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGeneratedImageMetamodelid_atBckpTime_newID map[uint]uint
