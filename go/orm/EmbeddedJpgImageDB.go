// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_EmbeddedJpgImage_sql sql.NullBool
var dummy_EmbeddedJpgImage_time time.Duration
var dummy_EmbeddedJpgImage_sort sort.Float64Slice

// EmbeddedJpgImageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model embeddedjpgimageAPI
type EmbeddedJpgImageAPI struct {
	gorm.Model

	models.EmbeddedJpgImage_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EmbeddedJpgImagePointersEncoding EmbeddedJpgImagePointersEncoding
}

// EmbeddedJpgImagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EmbeddedJpgImagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EmbeddedJpgImageDB describes a embeddedjpgimage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model embeddedjpgimageDB
type EmbeddedJpgImageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field embeddedjpgimageDB.Name
	Name_Data sql.NullString

	// Declation for basic field embeddedjpgimageDB.Base64Content
	Base64Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EmbeddedJpgImagePointersEncoding
}

// EmbeddedJpgImageDBs arrays embeddedjpgimageDBs
// swagger:response embeddedjpgimageDBsResponse
type EmbeddedJpgImageDBs []EmbeddedJpgImageDB

// EmbeddedJpgImageDBResponse provides response
// swagger:response embeddedjpgimageDBResponse
type EmbeddedJpgImageDBResponse struct {
	EmbeddedJpgImageDB
}

// EmbeddedJpgImageWOP is a EmbeddedJpgImage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EmbeddedJpgImageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Base64Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var EmbeddedJpgImage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Base64Content",
}

type BackRepoEmbeddedJpgImageStruct struct {
	// stores EmbeddedJpgImageDB according to their gorm ID
	Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB map[uint]*EmbeddedJpgImageDB

	// stores EmbeddedJpgImageDB ID according to EmbeddedJpgImage address
	Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID map[*models.EmbeddedJpgImage]uint

	// stores EmbeddedJpgImage according to their gorm ID
	Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr map[uint]*models.EmbeddedJpgImage

	db db.DBInterface

	stage *models.Stage
}

func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoEmbeddedJpgImage.stage
	return
}

func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) GetDB() db.DBInterface {
	return backRepoEmbeddedJpgImage.db
}

// GetEmbeddedJpgImageDBFromEmbeddedJpgImagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) GetEmbeddedJpgImageDBFromEmbeddedJpgImagePtr(embeddedjpgimage *models.EmbeddedJpgImage) (embeddedjpgimageDB *EmbeddedJpgImageDB) {
	id := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID[embeddedjpgimage]
	embeddedjpgimageDB = backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB[id]
	return
}

// BackRepoEmbeddedJpgImage.CommitPhaseOne commits all staged instances of EmbeddedJpgImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var embeddedjpgimages []*models.EmbeddedJpgImage
	for embeddedjpgimage := range stage.EmbeddedJpgImages {
		embeddedjpgimages = append(embeddedjpgimages, embeddedjpgimage)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(embeddedjpgimages, func(i, j int) bool {
		return stage.EmbeddedJpgImageMap_Staged_Order[embeddedjpgimages[i]] < stage.EmbeddedJpgImageMap_Staged_Order[embeddedjpgimages[j]]
	})

	for _, embeddedjpgimage := range embeddedjpgimages {
		backRepoEmbeddedJpgImage.CommitPhaseOneInstance(embeddedjpgimage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, embeddedjpgimage := range backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr {
		if _, ok := stage.EmbeddedJpgImages[embeddedjpgimage]; !ok {
			backRepoEmbeddedJpgImage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmbeddedJpgImage.CommitDeleteInstance commits deletion of EmbeddedJpgImage to the BackRepo
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CommitDeleteInstance(id uint) (Error error) {

	embeddedjpgimage := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr[id]

	// embeddedjpgimage is not staged anymore, remove embeddedjpgimageDB
	embeddedjpgimageDB := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB[id]
	db, _ := backRepoEmbeddedJpgImage.db.Unscoped()
	_, err := db.Delete(embeddedjpgimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID, embeddedjpgimage)
	delete(backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr, id)
	delete(backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB, id)

	return
}

// BackRepoEmbeddedJpgImage.CommitPhaseOneInstance commits embeddedjpgimage staged instances of EmbeddedJpgImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CommitPhaseOneInstance(embeddedjpgimage *models.EmbeddedJpgImage) (Error error) {

	// check if the embeddedjpgimage is not commited yet
	if _, ok := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID[embeddedjpgimage]; ok {
		return
	}

	// initiate embeddedjpgimage
	var embeddedjpgimageDB EmbeddedJpgImageDB
	embeddedjpgimageDB.CopyBasicFieldsFromEmbeddedJpgImage(embeddedjpgimage)

	_, err := backRepoEmbeddedJpgImage.db.Create(&embeddedjpgimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID[embeddedjpgimage] = embeddedjpgimageDB.ID
	backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr[embeddedjpgimageDB.ID] = embeddedjpgimage
	backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB[embeddedjpgimageDB.ID] = &embeddedjpgimageDB

	return
}

// BackRepoEmbeddedJpgImage.CommitPhaseTwo commits all staged instances of EmbeddedJpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, embeddedjpgimage := range backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr {
		backRepoEmbeddedJpgImage.CommitPhaseTwoInstance(backRepo, idx, embeddedjpgimage)
	}

	return
}

// BackRepoEmbeddedJpgImage.CommitPhaseTwoInstance commits {{structname }} of models.EmbeddedJpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, embeddedjpgimage *models.EmbeddedJpgImage) (Error error) {

	// fetch matching embeddedjpgimageDB
	if embeddedjpgimageDB, ok := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB[idx]; ok {

		embeddedjpgimageDB.CopyBasicFieldsFromEmbeddedJpgImage(embeddedjpgimage)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoEmbeddedJpgImage.db.Save(embeddedjpgimageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown EmbeddedJpgImage intance %s", embeddedjpgimage.Name))
		return err
	}

	return
}

// BackRepoEmbeddedJpgImage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CheckoutPhaseOne() (Error error) {

	embeddedjpgimageDBArray := make([]EmbeddedJpgImageDB, 0)
	_, err := backRepoEmbeddedJpgImage.db.Find(&embeddedjpgimageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	embeddedjpgimageInstancesToBeRemovedFromTheStage := make(map[*models.EmbeddedJpgImage]any)
	for key, value := range backRepoEmbeddedJpgImage.stage.EmbeddedJpgImages {
		embeddedjpgimageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, embeddedjpgimageDB := range embeddedjpgimageDBArray {
		backRepoEmbeddedJpgImage.CheckoutPhaseOneInstance(&embeddedjpgimageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		embeddedjpgimage, ok := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr[embeddedjpgimageDB.ID]
		if ok {
			delete(embeddedjpgimageInstancesToBeRemovedFromTheStage, embeddedjpgimage)
		}
	}

	// remove from stage and back repo's 3 maps all embeddedjpgimages that are not in the checkout
	for embeddedjpgimage := range embeddedjpgimageInstancesToBeRemovedFromTheStage {
		embeddedjpgimage.Unstage(backRepoEmbeddedJpgImage.GetStage())

		// remove instance from the back repo 3 maps
		embeddedjpgimageID := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID[embeddedjpgimage]
		delete(backRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID, embeddedjpgimage)
		delete(backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB, embeddedjpgimageID)
		delete(backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr, embeddedjpgimageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a embeddedjpgimageDB that has been found in the DB, updates the backRepo and stages the
// models version of the embeddedjpgimageDB
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CheckoutPhaseOneInstance(embeddedjpgimageDB *EmbeddedJpgImageDB) (Error error) {

	embeddedjpgimage, ok := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr[embeddedjpgimageDB.ID]
	if !ok {
		embeddedjpgimage = new(models.EmbeddedJpgImage)

		backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr[embeddedjpgimageDB.ID] = embeddedjpgimage
		backRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID[embeddedjpgimage] = embeddedjpgimageDB.ID

		// append model store with the new element
		embeddedjpgimage.Name = embeddedjpgimageDB.Name_Data.String
		embeddedjpgimage.Stage(backRepoEmbeddedJpgImage.GetStage())
	}
	embeddedjpgimageDB.CopyBasicFieldsToEmbeddedJpgImage(embeddedjpgimage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	embeddedjpgimage.Stage(backRepoEmbeddedJpgImage.GetStage())

	// preserve pointer to embeddedjpgimageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB)[embeddedjpgimageDB hold variable pointers
	embeddedjpgimageDB_Data := *embeddedjpgimageDB
	preservedPtrToEmbeddedJpgImage := &embeddedjpgimageDB_Data
	backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB[embeddedjpgimageDB.ID] = preservedPtrToEmbeddedJpgImage

	return
}

// BackRepoEmbeddedJpgImage.CheckoutPhaseTwo Checkouts all staged instances of EmbeddedJpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, embeddedjpgimageDB := range backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB {
		backRepoEmbeddedJpgImage.CheckoutPhaseTwoInstance(backRepo, embeddedjpgimageDB)
	}
	return
}

// BackRepoEmbeddedJpgImage.CheckoutPhaseTwoInstance Checkouts staged instances of EmbeddedJpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, embeddedjpgimageDB *EmbeddedJpgImageDB) (Error error) {

	embeddedjpgimage := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr[embeddedjpgimageDB.ID]

	embeddedjpgimageDB.DecodePointers(backRepo, embeddedjpgimage)

	return
}

func (embeddedjpgimageDB *EmbeddedJpgImageDB) DecodePointers(backRepo *BackRepoStruct, embeddedjpgimage *models.EmbeddedJpgImage) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmbeddedJpgImage allows commit of a single embeddedjpgimage (if already staged)
func (backRepo *BackRepoStruct) CommitEmbeddedJpgImage(embeddedjpgimage *models.EmbeddedJpgImage) {
	backRepo.BackRepoEmbeddedJpgImage.CommitPhaseOneInstance(embeddedjpgimage)
	if id, ok := backRepo.BackRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID[embeddedjpgimage]; ok {
		backRepo.BackRepoEmbeddedJpgImage.CommitPhaseTwoInstance(backRepo, id, embeddedjpgimage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmbeddedJpgImage allows checkout of a single embeddedjpgimage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmbeddedJpgImage(embeddedjpgimage *models.EmbeddedJpgImage) {
	// check if the embeddedjpgimage is staged
	if _, ok := backRepo.BackRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID[embeddedjpgimage]; ok {

		if id, ok := backRepo.BackRepoEmbeddedJpgImage.Map_EmbeddedJpgImagePtr_EmbeddedJpgImageDBID[embeddedjpgimage]; ok {
			var embeddedjpgimageDB EmbeddedJpgImageDB
			embeddedjpgimageDB.ID = id

			if _, err := backRepo.BackRepoEmbeddedJpgImage.db.First(&embeddedjpgimageDB, id); err != nil {
				log.Fatalln("CheckoutEmbeddedJpgImage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmbeddedJpgImage.CheckoutPhaseOneInstance(&embeddedjpgimageDB)
			backRepo.BackRepoEmbeddedJpgImage.CheckoutPhaseTwoInstance(backRepo, &embeddedjpgimageDB)
		}
	}
}

// CopyBasicFieldsFromEmbeddedJpgImage
func (embeddedjpgimageDB *EmbeddedJpgImageDB) CopyBasicFieldsFromEmbeddedJpgImage(embeddedjpgimage *models.EmbeddedJpgImage) {
	// insertion point for fields commit

	embeddedjpgimageDB.Name_Data.String = embeddedjpgimage.Name
	embeddedjpgimageDB.Name_Data.Valid = true

	embeddedjpgimageDB.Base64Content_Data.String = embeddedjpgimage.Base64Content
	embeddedjpgimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsFromEmbeddedJpgImage_WOP
func (embeddedjpgimageDB *EmbeddedJpgImageDB) CopyBasicFieldsFromEmbeddedJpgImage_WOP(embeddedjpgimage *models.EmbeddedJpgImage_WOP) {
	// insertion point for fields commit

	embeddedjpgimageDB.Name_Data.String = embeddedjpgimage.Name
	embeddedjpgimageDB.Name_Data.Valid = true

	embeddedjpgimageDB.Base64Content_Data.String = embeddedjpgimage.Base64Content
	embeddedjpgimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsFromEmbeddedJpgImageWOP
func (embeddedjpgimageDB *EmbeddedJpgImageDB) CopyBasicFieldsFromEmbeddedJpgImageWOP(embeddedjpgimage *EmbeddedJpgImageWOP) {
	// insertion point for fields commit

	embeddedjpgimageDB.Name_Data.String = embeddedjpgimage.Name
	embeddedjpgimageDB.Name_Data.Valid = true

	embeddedjpgimageDB.Base64Content_Data.String = embeddedjpgimage.Base64Content
	embeddedjpgimageDB.Base64Content_Data.Valid = true
}

// CopyBasicFieldsToEmbeddedJpgImage
func (embeddedjpgimageDB *EmbeddedJpgImageDB) CopyBasicFieldsToEmbeddedJpgImage(embeddedjpgimage *models.EmbeddedJpgImage) {
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedjpgimage.Name = embeddedjpgimageDB.Name_Data.String
	embeddedjpgimage.Base64Content = embeddedjpgimageDB.Base64Content_Data.String
}

// CopyBasicFieldsToEmbeddedJpgImage_WOP
func (embeddedjpgimageDB *EmbeddedJpgImageDB) CopyBasicFieldsToEmbeddedJpgImage_WOP(embeddedjpgimage *models.EmbeddedJpgImage_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedjpgimage.Name = embeddedjpgimageDB.Name_Data.String
	embeddedjpgimage.Base64Content = embeddedjpgimageDB.Base64Content_Data.String
}

// CopyBasicFieldsToEmbeddedJpgImageWOP
func (embeddedjpgimageDB *EmbeddedJpgImageDB) CopyBasicFieldsToEmbeddedJpgImageWOP(embeddedjpgimage *EmbeddedJpgImageWOP) {
	embeddedjpgimage.ID = int(embeddedjpgimageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedjpgimage.Name = embeddedjpgimageDB.Name_Data.String
	embeddedjpgimage.Base64Content = embeddedjpgimageDB.Base64Content_Data.String
}

// Backup generates a json file from a slice of all EmbeddedJpgImageDB instances in the backrepo
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EmbeddedJpgImageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EmbeddedJpgImageDB, 0)
	for _, embeddedjpgimageDB := range backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB {
		forBackup = append(forBackup, embeddedjpgimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json EmbeddedJpgImage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json EmbeddedJpgImage file", err.Error())
	}
}

// Backup generates a json file from a slice of all EmbeddedJpgImageDB instances in the backrepo
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EmbeddedJpgImageDB, 0)
	for _, embeddedjpgimageDB := range backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB {
		forBackup = append(forBackup, embeddedjpgimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("EmbeddedJpgImage")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&EmbeddedJpgImage_Fields, -1)
	for _, embeddedjpgimageDB := range forBackup {

		var embeddedjpgimageWOP EmbeddedJpgImageWOP
		embeddedjpgimageDB.CopyBasicFieldsToEmbeddedJpgImageWOP(&embeddedjpgimageWOP)

		row := sh.AddRow()
		row.WriteStruct(&embeddedjpgimageWOP, -1)
	}
}

// RestoreXL from the "EmbeddedJpgImage" sheet all EmbeddedJpgImageDB instances
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmbeddedJpgImageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["EmbeddedJpgImage"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmbeddedJpgImage.rowVisitorEmbeddedJpgImage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) rowVisitorEmbeddedJpgImage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var embeddedjpgimageWOP EmbeddedJpgImageWOP
		row.ReadStruct(&embeddedjpgimageWOP)

		// add the unmarshalled struct to the stage
		embeddedjpgimageDB := new(EmbeddedJpgImageDB)
		embeddedjpgimageDB.CopyBasicFieldsFromEmbeddedJpgImageWOP(&embeddedjpgimageWOP)

		embeddedjpgimageDB_ID_atBackupTime := embeddedjpgimageDB.ID
		embeddedjpgimageDB.ID = 0
		_, err := backRepoEmbeddedJpgImage.db.Create(embeddedjpgimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB[embeddedjpgimageDB.ID] = embeddedjpgimageDB
		BackRepoEmbeddedJpgImageid_atBckpTime_newID[embeddedjpgimageDB_ID_atBackupTime] = embeddedjpgimageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EmbeddedJpgImageDB.json" in dirPath that stores an array
// of EmbeddedJpgImageDB and stores it in the database
// the map BackRepoEmbeddedJpgImageid_atBckpTime_newID is updated accordingly
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmbeddedJpgImageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EmbeddedJpgImageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json EmbeddedJpgImage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EmbeddedJpgImageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB
	for _, embeddedjpgimageDB := range forRestore {

		embeddedjpgimageDB_ID_atBackupTime := embeddedjpgimageDB.ID
		embeddedjpgimageDB.ID = 0
		_, err := backRepoEmbeddedJpgImage.db.Create(embeddedjpgimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB[embeddedjpgimageDB.ID] = embeddedjpgimageDB
		BackRepoEmbeddedJpgImageid_atBckpTime_newID[embeddedjpgimageDB_ID_atBackupTime] = embeddedjpgimageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json EmbeddedJpgImage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<EmbeddedJpgImage>id_atBckpTime_newID
// to compute new index
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) RestorePhaseTwo() {

	for _, embeddedjpgimageDB := range backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB {

		// next line of code is to avert unused variable compilation error
		_ = embeddedjpgimageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoEmbeddedJpgImage.db.Model(embeddedjpgimageDB)
		_, err := db.Updates(*embeddedjpgimageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoEmbeddedJpgImage.ResetReversePointers commits all staged instances of EmbeddedJpgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, embeddedjpgimage := range backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImagePtr {
		backRepoEmbeddedJpgImage.ResetReversePointersInstance(backRepo, idx, embeddedjpgimage)
	}

	return
}

func (backRepoEmbeddedJpgImage *BackRepoEmbeddedJpgImageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, embeddedjpgimage *models.EmbeddedJpgImage) (Error error) {

	// fetch matching embeddedjpgimageDB
	if embeddedjpgimageDB, ok := backRepoEmbeddedJpgImage.Map_EmbeddedJpgImageDBID_EmbeddedJpgImageDB[idx]; ok {
		_ = embeddedjpgimageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmbeddedJpgImageid_atBckpTime_newID map[uint]uint
