// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Map_SPEC_OBJECT_TYPE_showIdentifierEntry_sql sql.NullBool
var dummy_Map_SPEC_OBJECT_TYPE_showIdentifierEntry_time time.Duration
var dummy_Map_SPEC_OBJECT_TYPE_showIdentifierEntry_sort sort.Float64Slice

// Map_SPEC_OBJECT_TYPE_showIdentifierEntryAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model map_spec_object_type_showidentifierentryAPI
type Map_SPEC_OBJECT_TYPE_showIdentifierEntryAPI struct {
	gorm.Model

	models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Map_SPEC_OBJECT_TYPE_showIdentifierEntryPointersEncoding Map_SPEC_OBJECT_TYPE_showIdentifierEntryPointersEncoding
}

// Map_SPEC_OBJECT_TYPE_showIdentifierEntryPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Map_SPEC_OBJECT_TYPE_showIdentifierEntryPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB describes a map_spec_object_type_showidentifierentry in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model map_spec_object_type_showidentifierentryDB
type Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field map_spec_object_type_showidentifierentryDB.Name
	Name_Data sql.NullString

	// Declation for basic field map_spec_object_type_showidentifierentryDB.Value
	// provide the sql storage for the boolan
	Value_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Map_SPEC_OBJECT_TYPE_showIdentifierEntryPointersEncoding
}

// Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBs arrays map_spec_object_type_showidentifierentryDBs
// swagger:response map_spec_object_type_showidentifierentryDBsResponse
type Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBs []Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB

// Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBResponse provides response
// swagger:response map_spec_object_type_showidentifierentryDBResponse
type Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBResponse struct {
	Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB
}

// Map_SPEC_OBJECT_TYPE_showIdentifierEntryWOP is a Map_SPEC_OBJECT_TYPE_showIdentifierEntry without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Map_SPEC_OBJECT_TYPE_showIdentifierEntryWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Map_SPEC_OBJECT_TYPE_showIdentifierEntry_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct struct {
	// stores Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB according to their gorm ID
	Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB map[uint]*Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB

	// stores Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB ID according to Map_SPEC_OBJECT_TYPE_showIdentifierEntry address
	Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID map[*models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry]uint

	// stores Map_SPEC_OBJECT_TYPE_showIdentifierEntry according to their gorm ID
	Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr map[uint]*models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry

	db db.DBInterface

	stage *models.Stage
}

func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) GetStage() (stage *models.Stage) {
	stage = backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.stage
	return
}

func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) GetDB() db.DBInterface {
	return backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db
}

// GetMap_SPEC_OBJECT_TYPE_showIdentifierEntryDBFromMap_SPEC_OBJECT_TYPE_showIdentifierEntryPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) GetMap_SPEC_OBJECT_TYPE_showIdentifierEntryDBFromMap_SPEC_OBJECT_TYPE_showIdentifierEntryPtr(map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) (map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) {
	id := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID[map_spec_object_type_showidentifierentry]
	map_spec_object_type_showidentifierentryDB = backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB[id]
	return
}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitPhaseOne commits all staged instances of Map_SPEC_OBJECT_TYPE_showIdentifierEntry to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var map_spec_object_type_showidentifierentrys []*models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry
	for map_spec_object_type_showidentifierentry := range stage.Map_SPEC_OBJECT_TYPE_showIdentifierEntrys {
		map_spec_object_type_showidentifierentrys = append(map_spec_object_type_showidentifierentrys, map_spec_object_type_showidentifierentry)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(map_spec_object_type_showidentifierentrys, func(i, j int) bool {
		return stage.Map_SPEC_OBJECT_TYPE_showIdentifierEntryMap_Staged_Order[map_spec_object_type_showidentifierentrys[i]] < stage.Map_SPEC_OBJECT_TYPE_showIdentifierEntryMap_Staged_Order[map_spec_object_type_showidentifierentrys[j]]
	})

	for _, map_spec_object_type_showidentifierentry := range map_spec_object_type_showidentifierentrys {
		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitPhaseOneInstance(map_spec_object_type_showidentifierentry)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, map_spec_object_type_showidentifierentry := range backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr {
		if _, ok := stage.Map_SPEC_OBJECT_TYPE_showIdentifierEntrys[map_spec_object_type_showidentifierentry]; !ok {
			backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitDeleteInstance commits deletion of Map_SPEC_OBJECT_TYPE_showIdentifierEntry to the BackRepo
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CommitDeleteInstance(id uint) (Error error) {

	map_spec_object_type_showidentifierentry := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr[id]

	// map_spec_object_type_showidentifierentry is not staged anymore, remove map_spec_object_type_showidentifierentryDB
	map_spec_object_type_showidentifierentryDB := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB[id]
	db, _ := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db.Unscoped()
	_, err := db.Delete(map_spec_object_type_showidentifierentryDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID, map_spec_object_type_showidentifierentry)
	delete(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr, id)
	delete(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB, id)

	return
}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitPhaseOneInstance commits map_spec_object_type_showidentifierentry staged instances of Map_SPEC_OBJECT_TYPE_showIdentifierEntry to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CommitPhaseOneInstance(map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) (Error error) {

	// check if the map_spec_object_type_showidentifierentry is not commited yet
	if _, ok := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID[map_spec_object_type_showidentifierentry]; ok {
		return
	}

	// initiate map_spec_object_type_showidentifierentry
	var map_spec_object_type_showidentifierentryDB Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB
	map_spec_object_type_showidentifierentryDB.CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntry(map_spec_object_type_showidentifierentry)

	_, err := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db.Create(&map_spec_object_type_showidentifierentryDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID[map_spec_object_type_showidentifierentry] = map_spec_object_type_showidentifierentryDB.ID
	backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr[map_spec_object_type_showidentifierentryDB.ID] = map_spec_object_type_showidentifierentry
	backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB[map_spec_object_type_showidentifierentryDB.ID] = &map_spec_object_type_showidentifierentryDB

	return
}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitPhaseTwo commits all staged instances of Map_SPEC_OBJECT_TYPE_showIdentifierEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, map_spec_object_type_showidentifierentry := range backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr {
		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitPhaseTwoInstance(backRepo, idx, map_spec_object_type_showidentifierentry)
	}

	return
}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitPhaseTwoInstance commits {{structname }} of models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) (Error error) {

	// fetch matching map_spec_object_type_showidentifierentryDB
	if map_spec_object_type_showidentifierentryDB, ok := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB[idx]; ok {

		map_spec_object_type_showidentifierentryDB.CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntry(map_spec_object_type_showidentifierentry)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db.Save(map_spec_object_type_showidentifierentryDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Map_SPEC_OBJECT_TYPE_showIdentifierEntry intance %s", map_spec_object_type_showidentifierentry.Name))
		return err
	}

	return
}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CheckoutPhaseOne() (Error error) {

	map_spec_object_type_showidentifierentryDBArray := make([]Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB, 0)
	_, err := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db.Find(&map_spec_object_type_showidentifierentryDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	map_spec_object_type_showidentifierentryInstancesToBeRemovedFromTheStage := make(map[*models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry]any)
	for key, value := range backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.stage.Map_SPEC_OBJECT_TYPE_showIdentifierEntrys {
		map_spec_object_type_showidentifierentryInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, map_spec_object_type_showidentifierentryDB := range map_spec_object_type_showidentifierentryDBArray {
		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CheckoutPhaseOneInstance(&map_spec_object_type_showidentifierentryDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		map_spec_object_type_showidentifierentry, ok := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr[map_spec_object_type_showidentifierentryDB.ID]
		if ok {
			delete(map_spec_object_type_showidentifierentryInstancesToBeRemovedFromTheStage, map_spec_object_type_showidentifierentry)
		}
	}

	// remove from stage and back repo's 3 maps all map_spec_object_type_showidentifierentrys that are not in the checkout
	for map_spec_object_type_showidentifierentry := range map_spec_object_type_showidentifierentryInstancesToBeRemovedFromTheStage {
		map_spec_object_type_showidentifierentry.Unstage(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.GetStage())

		// remove instance from the back repo 3 maps
		map_spec_object_type_showidentifierentryID := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID[map_spec_object_type_showidentifierentry]
		delete(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID, map_spec_object_type_showidentifierentry)
		delete(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB, map_spec_object_type_showidentifierentryID)
		delete(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr, map_spec_object_type_showidentifierentryID)
	}

	return
}

// CheckoutPhaseOneInstance takes a map_spec_object_type_showidentifierentryDB that has been found in the DB, updates the backRepo and stages the
// models version of the map_spec_object_type_showidentifierentryDB
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CheckoutPhaseOneInstance(map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) (Error error) {

	map_spec_object_type_showidentifierentry, ok := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr[map_spec_object_type_showidentifierentryDB.ID]
	if !ok {
		map_spec_object_type_showidentifierentry = new(models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry)

		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr[map_spec_object_type_showidentifierentryDB.ID] = map_spec_object_type_showidentifierentry
		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID[map_spec_object_type_showidentifierentry] = map_spec_object_type_showidentifierentryDB.ID

		// append model store with the new element
		map_spec_object_type_showidentifierentry.Name = map_spec_object_type_showidentifierentryDB.Name_Data.String
		map_spec_object_type_showidentifierentry.Stage(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.GetStage())
	}
	map_spec_object_type_showidentifierentryDB.CopyBasicFieldsToMap_SPEC_OBJECT_TYPE_showIdentifierEntry(map_spec_object_type_showidentifierentry)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	map_spec_object_type_showidentifierentry.Stage(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.GetStage())

	// preserve pointer to map_spec_object_type_showidentifierentryDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB)[map_spec_object_type_showidentifierentryDB hold variable pointers
	map_spec_object_type_showidentifierentryDB_Data := *map_spec_object_type_showidentifierentryDB
	preservedPtrToMap_SPEC_OBJECT_TYPE_showIdentifierEntry := &map_spec_object_type_showidentifierentryDB_Data
	backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB[map_spec_object_type_showidentifierentryDB.ID] = preservedPtrToMap_SPEC_OBJECT_TYPE_showIdentifierEntry

	return
}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CheckoutPhaseTwo Checkouts all staged instances of Map_SPEC_OBJECT_TYPE_showIdentifierEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, map_spec_object_type_showidentifierentryDB := range backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB {
		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CheckoutPhaseTwoInstance(backRepo, map_spec_object_type_showidentifierentryDB)
	}
	return
}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CheckoutPhaseTwoInstance Checkouts staged instances of Map_SPEC_OBJECT_TYPE_showIdentifierEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) (Error error) {

	map_spec_object_type_showidentifierentry := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr[map_spec_object_type_showidentifierentryDB.ID]

	map_spec_object_type_showidentifierentryDB.DecodePointers(backRepo, map_spec_object_type_showidentifierentry)

	return
}

func (map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) DecodePointers(backRepo *BackRepoStruct, map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMap_SPEC_OBJECT_TYPE_showIdentifierEntry allows commit of a single map_spec_object_type_showidentifierentry (if already staged)
func (backRepo *BackRepoStruct) CommitMap_SPEC_OBJECT_TYPE_showIdentifierEntry(map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) {
	backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitPhaseOneInstance(map_spec_object_type_showidentifierentry)
	if id, ok := backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID[map_spec_object_type_showidentifierentry]; ok {
		backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CommitPhaseTwoInstance(backRepo, id, map_spec_object_type_showidentifierentry)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMap_SPEC_OBJECT_TYPE_showIdentifierEntry allows checkout of a single map_spec_object_type_showidentifierentry (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMap_SPEC_OBJECT_TYPE_showIdentifierEntry(map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) {
	// check if the map_spec_object_type_showidentifierentry is staged
	if _, ok := backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID[map_spec_object_type_showidentifierentry]; ok {

		if id, ok := backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID[map_spec_object_type_showidentifierentry]; ok {
			var map_spec_object_type_showidentifierentryDB Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB
			map_spec_object_type_showidentifierentryDB.ID = id

			if _, err := backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db.First(&map_spec_object_type_showidentifierentryDB, id); err != nil {
				log.Fatalln("CheckoutMap_SPEC_OBJECT_TYPE_showIdentifierEntry : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CheckoutPhaseOneInstance(&map_spec_object_type_showidentifierentryDB)
			backRepo.BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.CheckoutPhaseTwoInstance(backRepo, &map_spec_object_type_showidentifierentryDB)
		}
	}
}

// CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntry
func (map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntry(map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) {
	// insertion point for fields commit

	map_spec_object_type_showidentifierentryDB.Name_Data.String = map_spec_object_type_showidentifierentry.Name
	map_spec_object_type_showidentifierentryDB.Name_Data.Valid = true

	map_spec_object_type_showidentifierentryDB.Value_Data.Bool = map_spec_object_type_showidentifierentry.Value
	map_spec_object_type_showidentifierentryDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntry_WOP
func (map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntry_WOP(map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry_WOP) {
	// insertion point for fields commit

	map_spec_object_type_showidentifierentryDB.Name_Data.String = map_spec_object_type_showidentifierentry.Name
	map_spec_object_type_showidentifierentryDB.Name_Data.Valid = true

	map_spec_object_type_showidentifierentryDB.Value_Data.Bool = map_spec_object_type_showidentifierentry.Value
	map_spec_object_type_showidentifierentryDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntryWOP
func (map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntryWOP(map_spec_object_type_showidentifierentry *Map_SPEC_OBJECT_TYPE_showIdentifierEntryWOP) {
	// insertion point for fields commit

	map_spec_object_type_showidentifierentryDB.Name_Data.String = map_spec_object_type_showidentifierentry.Name
	map_spec_object_type_showidentifierentryDB.Name_Data.Valid = true

	map_spec_object_type_showidentifierentryDB.Value_Data.Bool = map_spec_object_type_showidentifierentry.Value
	map_spec_object_type_showidentifierentryDB.Value_Data.Valid = true
}

// CopyBasicFieldsToMap_SPEC_OBJECT_TYPE_showIdentifierEntry
func (map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) CopyBasicFieldsToMap_SPEC_OBJECT_TYPE_showIdentifierEntry(map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) {
	// insertion point for checkout of basic fields (back repo to stage)
	map_spec_object_type_showidentifierentry.Name = map_spec_object_type_showidentifierentryDB.Name_Data.String
	map_spec_object_type_showidentifierentry.Value = map_spec_object_type_showidentifierentryDB.Value_Data.Bool
}

// CopyBasicFieldsToMap_SPEC_OBJECT_TYPE_showIdentifierEntry_WOP
func (map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) CopyBasicFieldsToMap_SPEC_OBJECT_TYPE_showIdentifierEntry_WOP(map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	map_spec_object_type_showidentifierentry.Name = map_spec_object_type_showidentifierentryDB.Name_Data.String
	map_spec_object_type_showidentifierentry.Value = map_spec_object_type_showidentifierentryDB.Value_Data.Bool
}

// CopyBasicFieldsToMap_SPEC_OBJECT_TYPE_showIdentifierEntryWOP
func (map_spec_object_type_showidentifierentryDB *Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB) CopyBasicFieldsToMap_SPEC_OBJECT_TYPE_showIdentifierEntryWOP(map_spec_object_type_showidentifierentry *Map_SPEC_OBJECT_TYPE_showIdentifierEntryWOP) {
	map_spec_object_type_showidentifierentry.ID = int(map_spec_object_type_showidentifierentryDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	map_spec_object_type_showidentifierentry.Name = map_spec_object_type_showidentifierentryDB.Name_Data.String
	map_spec_object_type_showidentifierentry.Value = map_spec_object_type_showidentifierentryDB.Value_Data.Bool
}

// Backup generates a json file from a slice of all Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB instances in the backrepo
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB, 0)
	for _, map_spec_object_type_showidentifierentryDB := range backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB {
		forBackup = append(forBackup, map_spec_object_type_showidentifierentryDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Map_SPEC_OBJECT_TYPE_showIdentifierEntry ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Map_SPEC_OBJECT_TYPE_showIdentifierEntry file", err.Error())
	}
}

// Backup generates a json file from a slice of all Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB instances in the backrepo
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB, 0)
	for _, map_spec_object_type_showidentifierentryDB := range backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB {
		forBackup = append(forBackup, map_spec_object_type_showidentifierentryDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Map_SPEC_OBJECT_TYPE_showIdentifierEntry")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Map_SPEC_OBJECT_TYPE_showIdentifierEntry_Fields, -1)
	for _, map_spec_object_type_showidentifierentryDB := range forBackup {

		var map_spec_object_type_showidentifierentryWOP Map_SPEC_OBJECT_TYPE_showIdentifierEntryWOP
		map_spec_object_type_showidentifierentryDB.CopyBasicFieldsToMap_SPEC_OBJECT_TYPE_showIdentifierEntryWOP(&map_spec_object_type_showidentifierentryWOP)

		row := sh.AddRow()
		row.WriteStruct(&map_spec_object_type_showidentifierentryWOP, -1)
	}
}

// RestoreXL from the "Map_SPEC_OBJECT_TYPE_showIdentifierEntry" sheet all Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB instances
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Map_SPEC_OBJECT_TYPE_showIdentifierEntry"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.rowVisitorMap_SPEC_OBJECT_TYPE_showIdentifierEntry)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) rowVisitorMap_SPEC_OBJECT_TYPE_showIdentifierEntry(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var map_spec_object_type_showidentifierentryWOP Map_SPEC_OBJECT_TYPE_showIdentifierEntryWOP
		row.ReadStruct(&map_spec_object_type_showidentifierentryWOP)

		// add the unmarshalled struct to the stage
		map_spec_object_type_showidentifierentryDB := new(Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB)
		map_spec_object_type_showidentifierentryDB.CopyBasicFieldsFromMap_SPEC_OBJECT_TYPE_showIdentifierEntryWOP(&map_spec_object_type_showidentifierentryWOP)

		map_spec_object_type_showidentifierentryDB_ID_atBackupTime := map_spec_object_type_showidentifierentryDB.ID
		map_spec_object_type_showidentifierentryDB.ID = 0
		_, err := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db.Create(map_spec_object_type_showidentifierentryDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB[map_spec_object_type_showidentifierentryDB.ID] = map_spec_object_type_showidentifierentryDB
		BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryid_atBckpTime_newID[map_spec_object_type_showidentifierentryDB_ID_atBackupTime] = map_spec_object_type_showidentifierentryDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB.json" in dirPath that stores an array
// of Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB and stores it in the database
// the map BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryid_atBckpTime_newID is updated accordingly
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Map_SPEC_OBJECT_TYPE_showIdentifierEntry file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB
	for _, map_spec_object_type_showidentifierentryDB := range forRestore {

		map_spec_object_type_showidentifierentryDB_ID_atBackupTime := map_spec_object_type_showidentifierentryDB.ID
		map_spec_object_type_showidentifierentryDB.ID = 0
		_, err := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db.Create(map_spec_object_type_showidentifierentryDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB[map_spec_object_type_showidentifierentryDB.ID] = map_spec_object_type_showidentifierentryDB
		BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryid_atBckpTime_newID[map_spec_object_type_showidentifierentryDB_ID_atBackupTime] = map_spec_object_type_showidentifierentryDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Map_SPEC_OBJECT_TYPE_showIdentifierEntry file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Map_SPEC_OBJECT_TYPE_showIdentifierEntry>id_atBckpTime_newID
// to compute new index
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) RestorePhaseTwo() {

	for _, map_spec_object_type_showidentifierentryDB := range backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB {

		// next line of code is to avert unused variable compilation error
		_ = map_spec_object_type_showidentifierentryDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.db.Model(map_spec_object_type_showidentifierentryDB)
		_, err := db.Updates(*map_spec_object_type_showidentifierentryDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.ResetReversePointers commits all staged instances of Map_SPEC_OBJECT_TYPE_showIdentifierEntry to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, map_spec_object_type_showidentifierentry := range backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryPtr {
		backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.ResetReversePointersInstance(backRepo, idx, map_spec_object_type_showidentifierentry)
	}

	return
}

func (backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry *BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, map_spec_object_type_showidentifierentry *models.Map_SPEC_OBJECT_TYPE_showIdentifierEntry) (Error error) {

	// fetch matching map_spec_object_type_showidentifierentryDB
	if map_spec_object_type_showidentifierentryDB, ok := backRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntry.Map_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDBID_Map_SPEC_OBJECT_TYPE_showIdentifierEntryDB[idx]; ok {
		_ = map_spec_object_type_showidentifierentryDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMap_SPEC_OBJECT_TYPE_showIdentifierEntryid_atBckpTime_newID map[uint]uint
