// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_EmbeddedSvgImage_sql sql.NullBool
var dummy_EmbeddedSvgImage_time time.Duration
var dummy_EmbeddedSvgImage_sort sort.Float64Slice

// EmbeddedSvgImageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model embeddedsvgimageAPI
type EmbeddedSvgImageAPI struct {
	gorm.Model

	models.EmbeddedSvgImage_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EmbeddedSvgImagePointersEncoding EmbeddedSvgImagePointersEncoding
}

// EmbeddedSvgImagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EmbeddedSvgImagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EmbeddedSvgImageDB describes a embeddedsvgimage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model embeddedsvgimageDB
type EmbeddedSvgImageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field embeddedsvgimageDB.Name
	Name_Data sql.NullString

	// Declation for basic field embeddedsvgimageDB.Content
	Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EmbeddedSvgImagePointersEncoding
}

// EmbeddedSvgImageDBs arrays embeddedsvgimageDBs
// swagger:response embeddedsvgimageDBsResponse
type EmbeddedSvgImageDBs []EmbeddedSvgImageDB

// EmbeddedSvgImageDBResponse provides response
// swagger:response embeddedsvgimageDBResponse
type EmbeddedSvgImageDBResponse struct {
	EmbeddedSvgImageDB
}

// EmbeddedSvgImageWOP is a EmbeddedSvgImage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EmbeddedSvgImageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var EmbeddedSvgImage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
}

type BackRepoEmbeddedSvgImageStruct struct {
	// stores EmbeddedSvgImageDB according to their gorm ID
	Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB map[uint]*EmbeddedSvgImageDB

	// stores EmbeddedSvgImageDB ID according to EmbeddedSvgImage address
	Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID map[*models.EmbeddedSvgImage]uint

	// stores EmbeddedSvgImage according to their gorm ID
	Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr map[uint]*models.EmbeddedSvgImage

	db db.DBInterface

	stage *models.Stage
}

func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) GetStage() (stage *models.Stage) {
	stage = backRepoEmbeddedSvgImage.stage
	return
}

func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) GetDB() db.DBInterface {
	return backRepoEmbeddedSvgImage.db
}

// GetEmbeddedSvgImageDBFromEmbeddedSvgImagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) GetEmbeddedSvgImageDBFromEmbeddedSvgImagePtr(embeddedsvgimage *models.EmbeddedSvgImage) (embeddedsvgimageDB *EmbeddedSvgImageDB) {
	id := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID[embeddedsvgimage]
	embeddedsvgimageDB = backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB[id]
	return
}

// BackRepoEmbeddedSvgImage.CommitPhaseOne commits all staged instances of EmbeddedSvgImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var embeddedsvgimages []*models.EmbeddedSvgImage
	for embeddedsvgimage := range stage.EmbeddedSvgImages {
		embeddedsvgimages = append(embeddedsvgimages, embeddedsvgimage)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(embeddedsvgimages, func(i, j int) bool {
		return stage.EmbeddedSvgImageMap_Staged_Order[embeddedsvgimages[i]] < stage.EmbeddedSvgImageMap_Staged_Order[embeddedsvgimages[j]]
	})

	for _, embeddedsvgimage := range embeddedsvgimages {
		backRepoEmbeddedSvgImage.CommitPhaseOneInstance(embeddedsvgimage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, embeddedsvgimage := range backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr {
		if _, ok := stage.EmbeddedSvgImages[embeddedsvgimage]; !ok {
			backRepoEmbeddedSvgImage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmbeddedSvgImage.CommitDeleteInstance commits deletion of EmbeddedSvgImage to the BackRepo
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CommitDeleteInstance(id uint) (Error error) {

	embeddedsvgimage := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr[id]

	// embeddedsvgimage is not staged anymore, remove embeddedsvgimageDB
	embeddedsvgimageDB := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB[id]
	db, _ := backRepoEmbeddedSvgImage.db.Unscoped()
	_, err := db.Delete(embeddedsvgimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID, embeddedsvgimage)
	delete(backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr, id)
	delete(backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB, id)

	return
}

// BackRepoEmbeddedSvgImage.CommitPhaseOneInstance commits embeddedsvgimage staged instances of EmbeddedSvgImage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CommitPhaseOneInstance(embeddedsvgimage *models.EmbeddedSvgImage) (Error error) {

	// check if the embeddedsvgimage is not commited yet
	if _, ok := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID[embeddedsvgimage]; ok {
		return
	}

	// initiate embeddedsvgimage
	var embeddedsvgimageDB EmbeddedSvgImageDB
	embeddedsvgimageDB.CopyBasicFieldsFromEmbeddedSvgImage(embeddedsvgimage)

	_, err := backRepoEmbeddedSvgImage.db.Create(&embeddedsvgimageDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID[embeddedsvgimage] = embeddedsvgimageDB.ID
	backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr[embeddedsvgimageDB.ID] = embeddedsvgimage
	backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB[embeddedsvgimageDB.ID] = &embeddedsvgimageDB

	return
}

// BackRepoEmbeddedSvgImage.CommitPhaseTwo commits all staged instances of EmbeddedSvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, embeddedsvgimage := range backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr {
		backRepoEmbeddedSvgImage.CommitPhaseTwoInstance(backRepo, idx, embeddedsvgimage)
	}

	return
}

// BackRepoEmbeddedSvgImage.CommitPhaseTwoInstance commits {{structname }} of models.EmbeddedSvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, embeddedsvgimage *models.EmbeddedSvgImage) (Error error) {

	// fetch matching embeddedsvgimageDB
	if embeddedsvgimageDB, ok := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB[idx]; ok {

		embeddedsvgimageDB.CopyBasicFieldsFromEmbeddedSvgImage(embeddedsvgimage)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoEmbeddedSvgImage.db.Save(embeddedsvgimageDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown EmbeddedSvgImage intance %s", embeddedsvgimage.Name))
		return err
	}

	return
}

// BackRepoEmbeddedSvgImage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CheckoutPhaseOne() (Error error) {

	embeddedsvgimageDBArray := make([]EmbeddedSvgImageDB, 0)
	_, err := backRepoEmbeddedSvgImage.db.Find(&embeddedsvgimageDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	embeddedsvgimageInstancesToBeRemovedFromTheStage := make(map[*models.EmbeddedSvgImage]any)
	for key, value := range backRepoEmbeddedSvgImage.stage.EmbeddedSvgImages {
		embeddedsvgimageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, embeddedsvgimageDB := range embeddedsvgimageDBArray {
		backRepoEmbeddedSvgImage.CheckoutPhaseOneInstance(&embeddedsvgimageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		embeddedsvgimage, ok := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr[embeddedsvgimageDB.ID]
		if ok {
			delete(embeddedsvgimageInstancesToBeRemovedFromTheStage, embeddedsvgimage)
		}
	}

	// remove from stage and back repo's 3 maps all embeddedsvgimages that are not in the checkout
	for embeddedsvgimage := range embeddedsvgimageInstancesToBeRemovedFromTheStage {
		embeddedsvgimage.Unstage(backRepoEmbeddedSvgImage.GetStage())

		// remove instance from the back repo 3 maps
		embeddedsvgimageID := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID[embeddedsvgimage]
		delete(backRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID, embeddedsvgimage)
		delete(backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB, embeddedsvgimageID)
		delete(backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr, embeddedsvgimageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a embeddedsvgimageDB that has been found in the DB, updates the backRepo and stages the
// models version of the embeddedsvgimageDB
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CheckoutPhaseOneInstance(embeddedsvgimageDB *EmbeddedSvgImageDB) (Error error) {

	embeddedsvgimage, ok := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr[embeddedsvgimageDB.ID]
	if !ok {
		embeddedsvgimage = new(models.EmbeddedSvgImage)

		backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr[embeddedsvgimageDB.ID] = embeddedsvgimage
		backRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID[embeddedsvgimage] = embeddedsvgimageDB.ID

		// append model store with the new element
		embeddedsvgimage.Name = embeddedsvgimageDB.Name_Data.String
		embeddedsvgimage.Stage(backRepoEmbeddedSvgImage.GetStage())
	}
	embeddedsvgimageDB.CopyBasicFieldsToEmbeddedSvgImage(embeddedsvgimage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	embeddedsvgimage.Stage(backRepoEmbeddedSvgImage.GetStage())

	// preserve pointer to embeddedsvgimageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB)[embeddedsvgimageDB hold variable pointers
	embeddedsvgimageDB_Data := *embeddedsvgimageDB
	preservedPtrToEmbeddedSvgImage := &embeddedsvgimageDB_Data
	backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB[embeddedsvgimageDB.ID] = preservedPtrToEmbeddedSvgImage

	return
}

// BackRepoEmbeddedSvgImage.CheckoutPhaseTwo Checkouts all staged instances of EmbeddedSvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, embeddedsvgimageDB := range backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB {
		backRepoEmbeddedSvgImage.CheckoutPhaseTwoInstance(backRepo, embeddedsvgimageDB)
	}
	return
}

// BackRepoEmbeddedSvgImage.CheckoutPhaseTwoInstance Checkouts staged instances of EmbeddedSvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, embeddedsvgimageDB *EmbeddedSvgImageDB) (Error error) {

	embeddedsvgimage := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr[embeddedsvgimageDB.ID]

	embeddedsvgimageDB.DecodePointers(backRepo, embeddedsvgimage)

	return
}

func (embeddedsvgimageDB *EmbeddedSvgImageDB) DecodePointers(backRepo *BackRepoStruct, embeddedsvgimage *models.EmbeddedSvgImage) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmbeddedSvgImage allows commit of a single embeddedsvgimage (if already staged)
func (backRepo *BackRepoStruct) CommitEmbeddedSvgImage(embeddedsvgimage *models.EmbeddedSvgImage) {
	backRepo.BackRepoEmbeddedSvgImage.CommitPhaseOneInstance(embeddedsvgimage)
	if id, ok := backRepo.BackRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID[embeddedsvgimage]; ok {
		backRepo.BackRepoEmbeddedSvgImage.CommitPhaseTwoInstance(backRepo, id, embeddedsvgimage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmbeddedSvgImage allows checkout of a single embeddedsvgimage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmbeddedSvgImage(embeddedsvgimage *models.EmbeddedSvgImage) {
	// check if the embeddedsvgimage is staged
	if _, ok := backRepo.BackRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID[embeddedsvgimage]; ok {

		if id, ok := backRepo.BackRepoEmbeddedSvgImage.Map_EmbeddedSvgImagePtr_EmbeddedSvgImageDBID[embeddedsvgimage]; ok {
			var embeddedsvgimageDB EmbeddedSvgImageDB
			embeddedsvgimageDB.ID = id

			if _, err := backRepo.BackRepoEmbeddedSvgImage.db.First(&embeddedsvgimageDB, id); err != nil {
				log.Fatalln("CheckoutEmbeddedSvgImage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmbeddedSvgImage.CheckoutPhaseOneInstance(&embeddedsvgimageDB)
			backRepo.BackRepoEmbeddedSvgImage.CheckoutPhaseTwoInstance(backRepo, &embeddedsvgimageDB)
		}
	}
}

// CopyBasicFieldsFromEmbeddedSvgImage
func (embeddedsvgimageDB *EmbeddedSvgImageDB) CopyBasicFieldsFromEmbeddedSvgImage(embeddedsvgimage *models.EmbeddedSvgImage) {
	// insertion point for fields commit

	embeddedsvgimageDB.Name_Data.String = embeddedsvgimage.Name
	embeddedsvgimageDB.Name_Data.Valid = true

	embeddedsvgimageDB.Content_Data.String = embeddedsvgimage.Content
	embeddedsvgimageDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromEmbeddedSvgImage_WOP
func (embeddedsvgimageDB *EmbeddedSvgImageDB) CopyBasicFieldsFromEmbeddedSvgImage_WOP(embeddedsvgimage *models.EmbeddedSvgImage_WOP) {
	// insertion point for fields commit

	embeddedsvgimageDB.Name_Data.String = embeddedsvgimage.Name
	embeddedsvgimageDB.Name_Data.Valid = true

	embeddedsvgimageDB.Content_Data.String = embeddedsvgimage.Content
	embeddedsvgimageDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromEmbeddedSvgImageWOP
func (embeddedsvgimageDB *EmbeddedSvgImageDB) CopyBasicFieldsFromEmbeddedSvgImageWOP(embeddedsvgimage *EmbeddedSvgImageWOP) {
	// insertion point for fields commit

	embeddedsvgimageDB.Name_Data.String = embeddedsvgimage.Name
	embeddedsvgimageDB.Name_Data.Valid = true

	embeddedsvgimageDB.Content_Data.String = embeddedsvgimage.Content
	embeddedsvgimageDB.Content_Data.Valid = true
}

// CopyBasicFieldsToEmbeddedSvgImage
func (embeddedsvgimageDB *EmbeddedSvgImageDB) CopyBasicFieldsToEmbeddedSvgImage(embeddedsvgimage *models.EmbeddedSvgImage) {
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedsvgimage.Name = embeddedsvgimageDB.Name_Data.String
	embeddedsvgimage.Content = embeddedsvgimageDB.Content_Data.String
}

// CopyBasicFieldsToEmbeddedSvgImage_WOP
func (embeddedsvgimageDB *EmbeddedSvgImageDB) CopyBasicFieldsToEmbeddedSvgImage_WOP(embeddedsvgimage *models.EmbeddedSvgImage_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedsvgimage.Name = embeddedsvgimageDB.Name_Data.String
	embeddedsvgimage.Content = embeddedsvgimageDB.Content_Data.String
}

// CopyBasicFieldsToEmbeddedSvgImageWOP
func (embeddedsvgimageDB *EmbeddedSvgImageDB) CopyBasicFieldsToEmbeddedSvgImageWOP(embeddedsvgimage *EmbeddedSvgImageWOP) {
	embeddedsvgimage.ID = int(embeddedsvgimageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedsvgimage.Name = embeddedsvgimageDB.Name_Data.String
	embeddedsvgimage.Content = embeddedsvgimageDB.Content_Data.String
}

// Backup generates a json file from a slice of all EmbeddedSvgImageDB instances in the backrepo
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EmbeddedSvgImageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EmbeddedSvgImageDB, 0)
	for _, embeddedsvgimageDB := range backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB {
		forBackup = append(forBackup, embeddedsvgimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json EmbeddedSvgImage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json EmbeddedSvgImage file", err.Error())
	}
}

// Backup generates a json file from a slice of all EmbeddedSvgImageDB instances in the backrepo
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EmbeddedSvgImageDB, 0)
	for _, embeddedsvgimageDB := range backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB {
		forBackup = append(forBackup, embeddedsvgimageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("EmbeddedSvgImage")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&EmbeddedSvgImage_Fields, -1)
	for _, embeddedsvgimageDB := range forBackup {

		var embeddedsvgimageWOP EmbeddedSvgImageWOP
		embeddedsvgimageDB.CopyBasicFieldsToEmbeddedSvgImageWOP(&embeddedsvgimageWOP)

		row := sh.AddRow()
		row.WriteStruct(&embeddedsvgimageWOP, -1)
	}
}

// RestoreXL from the "EmbeddedSvgImage" sheet all EmbeddedSvgImageDB instances
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmbeddedSvgImageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["EmbeddedSvgImage"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmbeddedSvgImage.rowVisitorEmbeddedSvgImage)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) rowVisitorEmbeddedSvgImage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var embeddedsvgimageWOP EmbeddedSvgImageWOP
		row.ReadStruct(&embeddedsvgimageWOP)

		// add the unmarshalled struct to the stage
		embeddedsvgimageDB := new(EmbeddedSvgImageDB)
		embeddedsvgimageDB.CopyBasicFieldsFromEmbeddedSvgImageWOP(&embeddedsvgimageWOP)

		embeddedsvgimageDB_ID_atBackupTime := embeddedsvgimageDB.ID
		embeddedsvgimageDB.ID = 0
		_, err := backRepoEmbeddedSvgImage.db.Create(embeddedsvgimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB[embeddedsvgimageDB.ID] = embeddedsvgimageDB
		BackRepoEmbeddedSvgImageid_atBckpTime_newID[embeddedsvgimageDB_ID_atBackupTime] = embeddedsvgimageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EmbeddedSvgImageDB.json" in dirPath that stores an array
// of EmbeddedSvgImageDB and stores it in the database
// the map BackRepoEmbeddedSvgImageid_atBckpTime_newID is updated accordingly
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmbeddedSvgImageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EmbeddedSvgImageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json EmbeddedSvgImage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EmbeddedSvgImageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB
	for _, embeddedsvgimageDB := range forRestore {

		embeddedsvgimageDB_ID_atBackupTime := embeddedsvgimageDB.ID
		embeddedsvgimageDB.ID = 0
		_, err := backRepoEmbeddedSvgImage.db.Create(embeddedsvgimageDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB[embeddedsvgimageDB.ID] = embeddedsvgimageDB
		BackRepoEmbeddedSvgImageid_atBckpTime_newID[embeddedsvgimageDB_ID_atBackupTime] = embeddedsvgimageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json EmbeddedSvgImage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<EmbeddedSvgImage>id_atBckpTime_newID
// to compute new index
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) RestorePhaseTwo() {

	for _, embeddedsvgimageDB := range backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB {

		// next line of code is to avert unused variable compilation error
		_ = embeddedsvgimageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoEmbeddedSvgImage.db.Model(embeddedsvgimageDB)
		_, err := db.Updates(*embeddedsvgimageDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoEmbeddedSvgImage.ResetReversePointers commits all staged instances of EmbeddedSvgImage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, embeddedsvgimage := range backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImagePtr {
		backRepoEmbeddedSvgImage.ResetReversePointersInstance(backRepo, idx, embeddedsvgimage)
	}

	return
}

func (backRepoEmbeddedSvgImage *BackRepoEmbeddedSvgImageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, embeddedsvgimage *models.EmbeddedSvgImage) (Error error) {

	// fetch matching embeddedsvgimageDB
	if embeddedsvgimageDB, ok := backRepoEmbeddedSvgImage.Map_EmbeddedSvgImageDBID_EmbeddedSvgImageDB[idx]; ok {
		_ = embeddedsvgimageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmbeddedSvgImageid_atBckpTime_newID map[uint]uint
