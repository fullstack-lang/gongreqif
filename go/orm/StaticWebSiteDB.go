// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_StaticWebSite_sql sql.NullBool
var dummy_StaticWebSite_time time.Duration
var dummy_StaticWebSite_sort sort.Float64Slice

// StaticWebSiteAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model staticwebsiteAPI
type StaticWebSiteAPI struct {
	gorm.Model

	models.StaticWebSite_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	StaticWebSitePointersEncoding StaticWebSitePointersEncoding
}

// StaticWebSitePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type StaticWebSitePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Chapters is a slice of pointers to another Struct (optional or 0..1)
	Chapters IntSlice `gorm:"type:TEXT"`
}

// StaticWebSiteDB describes a staticwebsite in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model staticwebsiteDB
type StaticWebSiteDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field staticwebsiteDB.Name
	Name_Data sql.NullString

	// Declation for basic field staticwebsiteDB.MarkdownContent
	MarkdownContent_Data sql.NullString

	// Declation for basic field staticwebsiteDB.InputImagesDir
	InputImagesDir_Data sql.NullString

	// Declation for basic field staticwebsiteDB.OutputStaticWebDir
	OutputStaticWebDir_Data sql.NullString

	// Declation for basic field staticwebsiteDB.VersionInfo
	VersionInfo_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	StaticWebSitePointersEncoding
}

// StaticWebSiteDBs arrays staticwebsiteDBs
// swagger:response staticwebsiteDBsResponse
type StaticWebSiteDBs []StaticWebSiteDB

// StaticWebSiteDBResponse provides response
// swagger:response staticwebsiteDBResponse
type StaticWebSiteDBResponse struct {
	StaticWebSiteDB
}

// StaticWebSiteWOP is a StaticWebSite without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type StaticWebSiteWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	MarkdownContent string `xlsx:"2"`

	InputImagesDir string `xlsx:"3"`

	OutputStaticWebDir string `xlsx:"4"`

	VersionInfo string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var StaticWebSite_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"MarkdownContent",
	"InputImagesDir",
	"OutputStaticWebDir",
	"VersionInfo",
}

type BackRepoStaticWebSiteStruct struct {
	// stores StaticWebSiteDB according to their gorm ID
	Map_StaticWebSiteDBID_StaticWebSiteDB map[uint]*StaticWebSiteDB

	// stores StaticWebSiteDB ID according to StaticWebSite address
	Map_StaticWebSitePtr_StaticWebSiteDBID map[*models.StaticWebSite]uint

	// stores StaticWebSite according to their gorm ID
	Map_StaticWebSiteDBID_StaticWebSitePtr map[uint]*models.StaticWebSite

	db db.DBInterface

	stage *models.Stage
}

func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) GetStage() (stage *models.Stage) {
	stage = backRepoStaticWebSite.stage
	return
}

func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) GetDB() db.DBInterface {
	return backRepoStaticWebSite.db
}

// GetStaticWebSiteDBFromStaticWebSitePtr is a handy function to access the back repo instance from the stage instance
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) GetStaticWebSiteDBFromStaticWebSitePtr(staticwebsite *models.StaticWebSite) (staticwebsiteDB *StaticWebSiteDB) {
	id := backRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID[staticwebsite]
	staticwebsiteDB = backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB[id]
	return
}

// BackRepoStaticWebSite.CommitPhaseOne commits all staged instances of StaticWebSite to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var staticwebsites []*models.StaticWebSite
	for staticwebsite := range stage.StaticWebSites {
		staticwebsites = append(staticwebsites, staticwebsite)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(staticwebsites, func(i, j int) bool {
		return stage.StaticWebSiteMap_Staged_Order[staticwebsites[i]] < stage.StaticWebSiteMap_Staged_Order[staticwebsites[j]]
	})

	for _, staticwebsite := range staticwebsites {
		backRepoStaticWebSite.CommitPhaseOneInstance(staticwebsite)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, staticwebsite := range backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr {
		if _, ok := stage.StaticWebSites[staticwebsite]; !ok {
			backRepoStaticWebSite.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStaticWebSite.CommitDeleteInstance commits deletion of StaticWebSite to the BackRepo
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CommitDeleteInstance(id uint) (Error error) {

	staticwebsite := backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr[id]

	// staticwebsite is not staged anymore, remove staticwebsiteDB
	staticwebsiteDB := backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB[id]
	db, _ := backRepoStaticWebSite.db.Unscoped()
	_, err := db.Delete(staticwebsiteDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID, staticwebsite)
	delete(backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr, id)
	delete(backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB, id)

	return
}

// BackRepoStaticWebSite.CommitPhaseOneInstance commits staticwebsite staged instances of StaticWebSite to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CommitPhaseOneInstance(staticwebsite *models.StaticWebSite) (Error error) {

	// check if the staticwebsite is not commited yet
	if _, ok := backRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID[staticwebsite]; ok {
		return
	}

	// initiate staticwebsite
	var staticwebsiteDB StaticWebSiteDB
	staticwebsiteDB.CopyBasicFieldsFromStaticWebSite(staticwebsite)

	_, err := backRepoStaticWebSite.db.Create(&staticwebsiteDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID[staticwebsite] = staticwebsiteDB.ID
	backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr[staticwebsiteDB.ID] = staticwebsite
	backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB[staticwebsiteDB.ID] = &staticwebsiteDB

	return
}

// BackRepoStaticWebSite.CommitPhaseTwo commits all staged instances of StaticWebSite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, staticwebsite := range backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr {
		backRepoStaticWebSite.CommitPhaseTwoInstance(backRepo, idx, staticwebsite)
	}

	return
}

// BackRepoStaticWebSite.CommitPhaseTwoInstance commits {{structname }} of models.StaticWebSite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, staticwebsite *models.StaticWebSite) (Error error) {

	// fetch matching staticwebsiteDB
	if staticwebsiteDB, ok := backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB[idx]; ok {

		staticwebsiteDB.CopyBasicFieldsFromStaticWebSite(staticwebsite)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		staticwebsiteDB.StaticWebSitePointersEncoding.Chapters = make([]int, 0)
		// 2. encode
		for _, staticwebsitechapterAssocEnd := range staticwebsite.Chapters {
			staticwebsitechapterAssocEnd_DB :=
				backRepo.BackRepoStaticWebSiteChapter.GetStaticWebSiteChapterDBFromStaticWebSiteChapterPtr(staticwebsitechapterAssocEnd)
			
			// the stage might be inconsistant, meaning that the staticwebsitechapterAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if staticwebsitechapterAssocEnd_DB == nil {
				continue
			}
			
			staticwebsiteDB.StaticWebSitePointersEncoding.Chapters =
				append(staticwebsiteDB.StaticWebSitePointersEncoding.Chapters, int(staticwebsitechapterAssocEnd_DB.ID))
		}

		_, err := backRepoStaticWebSite.db.Save(staticwebsiteDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown StaticWebSite intance %s", staticwebsite.Name))
		return err
	}

	return
}

// BackRepoStaticWebSite.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CheckoutPhaseOne() (Error error) {

	staticwebsiteDBArray := make([]StaticWebSiteDB, 0)
	_, err := backRepoStaticWebSite.db.Find(&staticwebsiteDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	staticwebsiteInstancesToBeRemovedFromTheStage := make(map[*models.StaticWebSite]any)
	for key, value := range backRepoStaticWebSite.stage.StaticWebSites {
		staticwebsiteInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, staticwebsiteDB := range staticwebsiteDBArray {
		backRepoStaticWebSite.CheckoutPhaseOneInstance(&staticwebsiteDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		staticwebsite, ok := backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr[staticwebsiteDB.ID]
		if ok {
			delete(staticwebsiteInstancesToBeRemovedFromTheStage, staticwebsite)
		}
	}

	// remove from stage and back repo's 3 maps all staticwebsites that are not in the checkout
	for staticwebsite := range staticwebsiteInstancesToBeRemovedFromTheStage {
		staticwebsite.Unstage(backRepoStaticWebSite.GetStage())

		// remove instance from the back repo 3 maps
		staticwebsiteID := backRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID[staticwebsite]
		delete(backRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID, staticwebsite)
		delete(backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB, staticwebsiteID)
		delete(backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr, staticwebsiteID)
	}

	return
}

// CheckoutPhaseOneInstance takes a staticwebsiteDB that has been found in the DB, updates the backRepo and stages the
// models version of the staticwebsiteDB
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CheckoutPhaseOneInstance(staticwebsiteDB *StaticWebSiteDB) (Error error) {

	staticwebsite, ok := backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr[staticwebsiteDB.ID]
	if !ok {
		staticwebsite = new(models.StaticWebSite)

		backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr[staticwebsiteDB.ID] = staticwebsite
		backRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID[staticwebsite] = staticwebsiteDB.ID

		// append model store with the new element
		staticwebsite.Name = staticwebsiteDB.Name_Data.String
		staticwebsite.Stage(backRepoStaticWebSite.GetStage())
	}
	staticwebsiteDB.CopyBasicFieldsToStaticWebSite(staticwebsite)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	staticwebsite.Stage(backRepoStaticWebSite.GetStage())

	// preserve pointer to staticwebsiteDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_StaticWebSiteDBID_StaticWebSiteDB)[staticwebsiteDB hold variable pointers
	staticwebsiteDB_Data := *staticwebsiteDB
	preservedPtrToStaticWebSite := &staticwebsiteDB_Data
	backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB[staticwebsiteDB.ID] = preservedPtrToStaticWebSite

	return
}

// BackRepoStaticWebSite.CheckoutPhaseTwo Checkouts all staged instances of StaticWebSite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, staticwebsiteDB := range backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB {
		backRepoStaticWebSite.CheckoutPhaseTwoInstance(backRepo, staticwebsiteDB)
	}
	return
}

// BackRepoStaticWebSite.CheckoutPhaseTwoInstance Checkouts staged instances of StaticWebSite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, staticwebsiteDB *StaticWebSiteDB) (Error error) {

	staticwebsite := backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr[staticwebsiteDB.ID]

	staticwebsiteDB.DecodePointers(backRepo, staticwebsite)

	return
}

func (staticwebsiteDB *StaticWebSiteDB) DecodePointers(backRepo *BackRepoStruct, staticwebsite *models.StaticWebSite) {

	// insertion point for checkout of pointer encoding
	// This loop redeem staticwebsite.Chapters in the stage from the encode in the back repo
	// It parses all StaticWebSiteChapterDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	staticwebsite.Chapters = staticwebsite.Chapters[:0]
	for _, _StaticWebSiteChapterid := range staticwebsiteDB.StaticWebSitePointersEncoding.Chapters {
		staticwebsite.Chapters = append(staticwebsite.Chapters, backRepo.BackRepoStaticWebSiteChapter.Map_StaticWebSiteChapterDBID_StaticWebSiteChapterPtr[uint(_StaticWebSiteChapterid)])
	}

	return
}

// CommitStaticWebSite allows commit of a single staticwebsite (if already staged)
func (backRepo *BackRepoStruct) CommitStaticWebSite(staticwebsite *models.StaticWebSite) {
	backRepo.BackRepoStaticWebSite.CommitPhaseOneInstance(staticwebsite)
	if id, ok := backRepo.BackRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID[staticwebsite]; ok {
		backRepo.BackRepoStaticWebSite.CommitPhaseTwoInstance(backRepo, id, staticwebsite)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStaticWebSite allows checkout of a single staticwebsite (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStaticWebSite(staticwebsite *models.StaticWebSite) {
	// check if the staticwebsite is staged
	if _, ok := backRepo.BackRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID[staticwebsite]; ok {

		if id, ok := backRepo.BackRepoStaticWebSite.Map_StaticWebSitePtr_StaticWebSiteDBID[staticwebsite]; ok {
			var staticwebsiteDB StaticWebSiteDB
			staticwebsiteDB.ID = id

			if _, err := backRepo.BackRepoStaticWebSite.db.First(&staticwebsiteDB, id); err != nil {
				log.Fatalln("CheckoutStaticWebSite : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStaticWebSite.CheckoutPhaseOneInstance(&staticwebsiteDB)
			backRepo.BackRepoStaticWebSite.CheckoutPhaseTwoInstance(backRepo, &staticwebsiteDB)
		}
	}
}

// CopyBasicFieldsFromStaticWebSite
func (staticwebsiteDB *StaticWebSiteDB) CopyBasicFieldsFromStaticWebSite(staticwebsite *models.StaticWebSite) {
	// insertion point for fields commit

	staticwebsiteDB.Name_Data.String = staticwebsite.Name
	staticwebsiteDB.Name_Data.Valid = true

	staticwebsiteDB.MarkdownContent_Data.String = staticwebsite.MarkdownContent
	staticwebsiteDB.MarkdownContent_Data.Valid = true

	staticwebsiteDB.InputImagesDir_Data.String = staticwebsite.InputImagesDir
	staticwebsiteDB.InputImagesDir_Data.Valid = true

	staticwebsiteDB.OutputStaticWebDir_Data.String = staticwebsite.OutputStaticWebDir
	staticwebsiteDB.OutputStaticWebDir_Data.Valid = true

	staticwebsiteDB.VersionInfo_Data.String = staticwebsite.VersionInfo
	staticwebsiteDB.VersionInfo_Data.Valid = true
}

// CopyBasicFieldsFromStaticWebSite_WOP
func (staticwebsiteDB *StaticWebSiteDB) CopyBasicFieldsFromStaticWebSite_WOP(staticwebsite *models.StaticWebSite_WOP) {
	// insertion point for fields commit

	staticwebsiteDB.Name_Data.String = staticwebsite.Name
	staticwebsiteDB.Name_Data.Valid = true

	staticwebsiteDB.MarkdownContent_Data.String = staticwebsite.MarkdownContent
	staticwebsiteDB.MarkdownContent_Data.Valid = true

	staticwebsiteDB.InputImagesDir_Data.String = staticwebsite.InputImagesDir
	staticwebsiteDB.InputImagesDir_Data.Valid = true

	staticwebsiteDB.OutputStaticWebDir_Data.String = staticwebsite.OutputStaticWebDir
	staticwebsiteDB.OutputStaticWebDir_Data.Valid = true

	staticwebsiteDB.VersionInfo_Data.String = staticwebsite.VersionInfo
	staticwebsiteDB.VersionInfo_Data.Valid = true
}

// CopyBasicFieldsFromStaticWebSiteWOP
func (staticwebsiteDB *StaticWebSiteDB) CopyBasicFieldsFromStaticWebSiteWOP(staticwebsite *StaticWebSiteWOP) {
	// insertion point for fields commit

	staticwebsiteDB.Name_Data.String = staticwebsite.Name
	staticwebsiteDB.Name_Data.Valid = true

	staticwebsiteDB.MarkdownContent_Data.String = staticwebsite.MarkdownContent
	staticwebsiteDB.MarkdownContent_Data.Valid = true

	staticwebsiteDB.InputImagesDir_Data.String = staticwebsite.InputImagesDir
	staticwebsiteDB.InputImagesDir_Data.Valid = true

	staticwebsiteDB.OutputStaticWebDir_Data.String = staticwebsite.OutputStaticWebDir
	staticwebsiteDB.OutputStaticWebDir_Data.Valid = true

	staticwebsiteDB.VersionInfo_Data.String = staticwebsite.VersionInfo
	staticwebsiteDB.VersionInfo_Data.Valid = true
}

// CopyBasicFieldsToStaticWebSite
func (staticwebsiteDB *StaticWebSiteDB) CopyBasicFieldsToStaticWebSite(staticwebsite *models.StaticWebSite) {
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsite.Name = staticwebsiteDB.Name_Data.String
	staticwebsite.MarkdownContent = staticwebsiteDB.MarkdownContent_Data.String
	staticwebsite.InputImagesDir = staticwebsiteDB.InputImagesDir_Data.String
	staticwebsite.OutputStaticWebDir = staticwebsiteDB.OutputStaticWebDir_Data.String
	staticwebsite.VersionInfo = staticwebsiteDB.VersionInfo_Data.String
}

// CopyBasicFieldsToStaticWebSite_WOP
func (staticwebsiteDB *StaticWebSiteDB) CopyBasicFieldsToStaticWebSite_WOP(staticwebsite *models.StaticWebSite_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsite.Name = staticwebsiteDB.Name_Data.String
	staticwebsite.MarkdownContent = staticwebsiteDB.MarkdownContent_Data.String
	staticwebsite.InputImagesDir = staticwebsiteDB.InputImagesDir_Data.String
	staticwebsite.OutputStaticWebDir = staticwebsiteDB.OutputStaticWebDir_Data.String
	staticwebsite.VersionInfo = staticwebsiteDB.VersionInfo_Data.String
}

// CopyBasicFieldsToStaticWebSiteWOP
func (staticwebsiteDB *StaticWebSiteDB) CopyBasicFieldsToStaticWebSiteWOP(staticwebsite *StaticWebSiteWOP) {
	staticwebsite.ID = int(staticwebsiteDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsite.Name = staticwebsiteDB.Name_Data.String
	staticwebsite.MarkdownContent = staticwebsiteDB.MarkdownContent_Data.String
	staticwebsite.InputImagesDir = staticwebsiteDB.InputImagesDir_Data.String
	staticwebsite.OutputStaticWebDir = staticwebsiteDB.OutputStaticWebDir_Data.String
	staticwebsite.VersionInfo = staticwebsiteDB.VersionInfo_Data.String
}

// Backup generates a json file from a slice of all StaticWebSiteDB instances in the backrepo
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "StaticWebSiteDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StaticWebSiteDB, 0)
	for _, staticwebsiteDB := range backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB {
		forBackup = append(forBackup, staticwebsiteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json StaticWebSite ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json StaticWebSite file", err.Error())
	}
}

// Backup generates a json file from a slice of all StaticWebSiteDB instances in the backrepo
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StaticWebSiteDB, 0)
	for _, staticwebsiteDB := range backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB {
		forBackup = append(forBackup, staticwebsiteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("StaticWebSite")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&StaticWebSite_Fields, -1)
	for _, staticwebsiteDB := range forBackup {

		var staticwebsiteWOP StaticWebSiteWOP
		staticwebsiteDB.CopyBasicFieldsToStaticWebSiteWOP(&staticwebsiteWOP)

		row := sh.AddRow()
		row.WriteStruct(&staticwebsiteWOP, -1)
	}
}

// RestoreXL from the "StaticWebSite" sheet all StaticWebSiteDB instances
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStaticWebSiteid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["StaticWebSite"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStaticWebSite.rowVisitorStaticWebSite)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) rowVisitorStaticWebSite(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var staticwebsiteWOP StaticWebSiteWOP
		row.ReadStruct(&staticwebsiteWOP)

		// add the unmarshalled struct to the stage
		staticwebsiteDB := new(StaticWebSiteDB)
		staticwebsiteDB.CopyBasicFieldsFromStaticWebSiteWOP(&staticwebsiteWOP)

		staticwebsiteDB_ID_atBackupTime := staticwebsiteDB.ID
		staticwebsiteDB.ID = 0
		_, err := backRepoStaticWebSite.db.Create(staticwebsiteDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB[staticwebsiteDB.ID] = staticwebsiteDB
		BackRepoStaticWebSiteid_atBckpTime_newID[staticwebsiteDB_ID_atBackupTime] = staticwebsiteDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "StaticWebSiteDB.json" in dirPath that stores an array
// of StaticWebSiteDB and stores it in the database
// the map BackRepoStaticWebSiteid_atBckpTime_newID is updated accordingly
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStaticWebSiteid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "StaticWebSiteDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json StaticWebSite file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*StaticWebSiteDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_StaticWebSiteDBID_StaticWebSiteDB
	for _, staticwebsiteDB := range forRestore {

		staticwebsiteDB_ID_atBackupTime := staticwebsiteDB.ID
		staticwebsiteDB.ID = 0
		_, err := backRepoStaticWebSite.db.Create(staticwebsiteDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB[staticwebsiteDB.ID] = staticwebsiteDB
		BackRepoStaticWebSiteid_atBckpTime_newID[staticwebsiteDB_ID_atBackupTime] = staticwebsiteDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json StaticWebSite file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<StaticWebSite>id_atBckpTime_newID
// to compute new index
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) RestorePhaseTwo() {

	for _, staticwebsiteDB := range backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB {

		// next line of code is to avert unused variable compilation error
		_ = staticwebsiteDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoStaticWebSite.db.Model(staticwebsiteDB)
		_, err := db.Updates(*staticwebsiteDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoStaticWebSite.ResetReversePointers commits all staged instances of StaticWebSite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, staticwebsite := range backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSitePtr {
		backRepoStaticWebSite.ResetReversePointersInstance(backRepo, idx, staticwebsite)
	}

	return
}

func (backRepoStaticWebSite *BackRepoStaticWebSiteStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, staticwebsite *models.StaticWebSite) (Error error) {

	// fetch matching staticwebsiteDB
	if staticwebsiteDB, ok := backRepoStaticWebSite.Map_StaticWebSiteDBID_StaticWebSiteDB[idx]; ok {
		_ = staticwebsiteDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStaticWebSiteid_atBckpTime_newID map[uint]uint
