// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongreqif/go/db"
	"github.com/fullstack-lang/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_StaticWebSiteParagraph_sql sql.NullBool
var dummy_StaticWebSiteParagraph_time time.Duration
var dummy_StaticWebSiteParagraph_sort sort.Float64Slice

// StaticWebSiteParagraphAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model staticwebsiteparagraphAPI
type StaticWebSiteParagraphAPI struct {
	gorm.Model

	models.StaticWebSiteParagraph_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	StaticWebSiteParagraphPointersEncoding StaticWebSiteParagraphPointersEncoding
}

// StaticWebSiteParagraphPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type StaticWebSiteParagraphPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Image is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ImageID sql.NullInt64
}

// StaticWebSiteParagraphDB describes a staticwebsiteparagraph in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model staticwebsiteparagraphDB
type StaticWebSiteParagraphDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field staticwebsiteparagraphDB.Name
	Name_Data sql.NullString

	// Declation for basic field staticwebsiteparagraphDB.LegendMarkdownContent
	LegendMarkdownContent_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	StaticWebSiteParagraphPointersEncoding
}

// StaticWebSiteParagraphDBs arrays staticwebsiteparagraphDBs
// swagger:response staticwebsiteparagraphDBsResponse
type StaticWebSiteParagraphDBs []StaticWebSiteParagraphDB

// StaticWebSiteParagraphDBResponse provides response
// swagger:response staticwebsiteparagraphDBResponse
type StaticWebSiteParagraphDBResponse struct {
	StaticWebSiteParagraphDB
}

// StaticWebSiteParagraphWOP is a StaticWebSiteParagraph without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type StaticWebSiteParagraphWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	LegendMarkdownContent string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var StaticWebSiteParagraph_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"LegendMarkdownContent",
}

type BackRepoStaticWebSiteParagraphStruct struct {
	// stores StaticWebSiteParagraphDB according to their gorm ID
	Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB map[uint]*StaticWebSiteParagraphDB

	// stores StaticWebSiteParagraphDB ID according to StaticWebSiteParagraph address
	Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID map[*models.StaticWebSiteParagraph]uint

	// stores StaticWebSiteParagraph according to their gorm ID
	Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr map[uint]*models.StaticWebSiteParagraph

	db db.DBInterface

	stage *models.Stage
}

func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) GetStage() (stage *models.Stage) {
	stage = backRepoStaticWebSiteParagraph.stage
	return
}

func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) GetDB() db.DBInterface {
	return backRepoStaticWebSiteParagraph.db
}

// GetStaticWebSiteParagraphDBFromStaticWebSiteParagraphPtr is a handy function to access the back repo instance from the stage instance
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) GetStaticWebSiteParagraphDBFromStaticWebSiteParagraphPtr(staticwebsiteparagraph *models.StaticWebSiteParagraph) (staticwebsiteparagraphDB *StaticWebSiteParagraphDB) {
	id := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID[staticwebsiteparagraph]
	staticwebsiteparagraphDB = backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB[id]
	return
}

// BackRepoStaticWebSiteParagraph.CommitPhaseOne commits all staged instances of StaticWebSiteParagraph to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var staticwebsiteparagraphs []*models.StaticWebSiteParagraph
	for staticwebsiteparagraph := range stage.StaticWebSiteParagraphs {
		staticwebsiteparagraphs = append(staticwebsiteparagraphs, staticwebsiteparagraph)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(staticwebsiteparagraphs, func(i, j int) bool {
		return stage.StaticWebSiteParagraphMap_Staged_Order[staticwebsiteparagraphs[i]] < stage.StaticWebSiteParagraphMap_Staged_Order[staticwebsiteparagraphs[j]]
	})

	for _, staticwebsiteparagraph := range staticwebsiteparagraphs {
		backRepoStaticWebSiteParagraph.CommitPhaseOneInstance(staticwebsiteparagraph)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, staticwebsiteparagraph := range backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr {
		if _, ok := stage.StaticWebSiteParagraphs[staticwebsiteparagraph]; !ok {
			backRepoStaticWebSiteParagraph.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStaticWebSiteParagraph.CommitDeleteInstance commits deletion of StaticWebSiteParagraph to the BackRepo
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CommitDeleteInstance(id uint) (Error error) {

	staticwebsiteparagraph := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr[id]

	// staticwebsiteparagraph is not staged anymore, remove staticwebsiteparagraphDB
	staticwebsiteparagraphDB := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB[id]
	db, _ := backRepoStaticWebSiteParagraph.db.Unscoped()
	_, err := db.Delete(staticwebsiteparagraphDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID, staticwebsiteparagraph)
	delete(backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr, id)
	delete(backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB, id)

	return
}

// BackRepoStaticWebSiteParagraph.CommitPhaseOneInstance commits staticwebsiteparagraph staged instances of StaticWebSiteParagraph to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CommitPhaseOneInstance(staticwebsiteparagraph *models.StaticWebSiteParagraph) (Error error) {

	// check if the staticwebsiteparagraph is not commited yet
	if _, ok := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID[staticwebsiteparagraph]; ok {
		return
	}

	// initiate staticwebsiteparagraph
	var staticwebsiteparagraphDB StaticWebSiteParagraphDB
	staticwebsiteparagraphDB.CopyBasicFieldsFromStaticWebSiteParagraph(staticwebsiteparagraph)

	_, err := backRepoStaticWebSiteParagraph.db.Create(&staticwebsiteparagraphDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID[staticwebsiteparagraph] = staticwebsiteparagraphDB.ID
	backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr[staticwebsiteparagraphDB.ID] = staticwebsiteparagraph
	backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB[staticwebsiteparagraphDB.ID] = &staticwebsiteparagraphDB

	return
}

// BackRepoStaticWebSiteParagraph.CommitPhaseTwo commits all staged instances of StaticWebSiteParagraph to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, staticwebsiteparagraph := range backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr {
		backRepoStaticWebSiteParagraph.CommitPhaseTwoInstance(backRepo, idx, staticwebsiteparagraph)
	}

	return
}

// BackRepoStaticWebSiteParagraph.CommitPhaseTwoInstance commits {{structname }} of models.StaticWebSiteParagraph to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, staticwebsiteparagraph *models.StaticWebSiteParagraph) (Error error) {

	// fetch matching staticwebsiteparagraphDB
	if staticwebsiteparagraphDB, ok := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB[idx]; ok {

		staticwebsiteparagraphDB.CopyBasicFieldsFromStaticWebSiteParagraph(staticwebsiteparagraph)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value staticwebsiteparagraph.Image translates to updating the staticwebsiteparagraph.ImageID
		staticwebsiteparagraphDB.ImageID.Valid = true // allow for a 0 value (nil association)
		if staticwebsiteparagraph.Image != nil {
			if ImageId, ok := backRepo.BackRepoStaticWebSiteImage.Map_StaticWebSiteImagePtr_StaticWebSiteImageDBID[staticwebsiteparagraph.Image]; ok {
				staticwebsiteparagraphDB.ImageID.Int64 = int64(ImageId)
				staticwebsiteparagraphDB.ImageID.Valid = true
			}
		} else {
			staticwebsiteparagraphDB.ImageID.Int64 = 0
			staticwebsiteparagraphDB.ImageID.Valid = true
		}

		_, err := backRepoStaticWebSiteParagraph.db.Save(staticwebsiteparagraphDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown StaticWebSiteParagraph intance %s", staticwebsiteparagraph.Name))
		return err
	}

	return
}

// BackRepoStaticWebSiteParagraph.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CheckoutPhaseOne() (Error error) {

	staticwebsiteparagraphDBArray := make([]StaticWebSiteParagraphDB, 0)
	_, err := backRepoStaticWebSiteParagraph.db.Find(&staticwebsiteparagraphDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	staticwebsiteparagraphInstancesToBeRemovedFromTheStage := make(map[*models.StaticWebSiteParagraph]any)
	for key, value := range backRepoStaticWebSiteParagraph.stage.StaticWebSiteParagraphs {
		staticwebsiteparagraphInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, staticwebsiteparagraphDB := range staticwebsiteparagraphDBArray {
		backRepoStaticWebSiteParagraph.CheckoutPhaseOneInstance(&staticwebsiteparagraphDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		staticwebsiteparagraph, ok := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr[staticwebsiteparagraphDB.ID]
		if ok {
			delete(staticwebsiteparagraphInstancesToBeRemovedFromTheStage, staticwebsiteparagraph)
		}
	}

	// remove from stage and back repo's 3 maps all staticwebsiteparagraphs that are not in the checkout
	for staticwebsiteparagraph := range staticwebsiteparagraphInstancesToBeRemovedFromTheStage {
		staticwebsiteparagraph.Unstage(backRepoStaticWebSiteParagraph.GetStage())

		// remove instance from the back repo 3 maps
		staticwebsiteparagraphID := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID[staticwebsiteparagraph]
		delete(backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID, staticwebsiteparagraph)
		delete(backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB, staticwebsiteparagraphID)
		delete(backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr, staticwebsiteparagraphID)
	}

	return
}

// CheckoutPhaseOneInstance takes a staticwebsiteparagraphDB that has been found in the DB, updates the backRepo and stages the
// models version of the staticwebsiteparagraphDB
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CheckoutPhaseOneInstance(staticwebsiteparagraphDB *StaticWebSiteParagraphDB) (Error error) {

	staticwebsiteparagraph, ok := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr[staticwebsiteparagraphDB.ID]
	if !ok {
		staticwebsiteparagraph = new(models.StaticWebSiteParagraph)

		backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr[staticwebsiteparagraphDB.ID] = staticwebsiteparagraph
		backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID[staticwebsiteparagraph] = staticwebsiteparagraphDB.ID

		// append model store with the new element
		staticwebsiteparagraph.Name = staticwebsiteparagraphDB.Name_Data.String
		staticwebsiteparagraph.Stage(backRepoStaticWebSiteParagraph.GetStage())
	}
	staticwebsiteparagraphDB.CopyBasicFieldsToStaticWebSiteParagraph(staticwebsiteparagraph)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	staticwebsiteparagraph.Stage(backRepoStaticWebSiteParagraph.GetStage())

	// preserve pointer to staticwebsiteparagraphDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB)[staticwebsiteparagraphDB hold variable pointers
	staticwebsiteparagraphDB_Data := *staticwebsiteparagraphDB
	preservedPtrToStaticWebSiteParagraph := &staticwebsiteparagraphDB_Data
	backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB[staticwebsiteparagraphDB.ID] = preservedPtrToStaticWebSiteParagraph

	return
}

// BackRepoStaticWebSiteParagraph.CheckoutPhaseTwo Checkouts all staged instances of StaticWebSiteParagraph to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, staticwebsiteparagraphDB := range backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB {
		backRepoStaticWebSiteParagraph.CheckoutPhaseTwoInstance(backRepo, staticwebsiteparagraphDB)
	}
	return
}

// BackRepoStaticWebSiteParagraph.CheckoutPhaseTwoInstance Checkouts staged instances of StaticWebSiteParagraph to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, staticwebsiteparagraphDB *StaticWebSiteParagraphDB) (Error error) {

	staticwebsiteparagraph := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr[staticwebsiteparagraphDB.ID]

	staticwebsiteparagraphDB.DecodePointers(backRepo, staticwebsiteparagraph)

	return
}

func (staticwebsiteparagraphDB *StaticWebSiteParagraphDB) DecodePointers(backRepo *BackRepoStruct, staticwebsiteparagraph *models.StaticWebSiteParagraph) {

	// insertion point for checkout of pointer encoding
	// Image field	
	{
		id := staticwebsiteparagraphDB.ImageID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoStaticWebSiteImage.Map_StaticWebSiteImageDBID_StaticWebSiteImagePtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: staticwebsiteparagraph.Image, unknown pointer id", id)
				staticwebsiteparagraph.Image = nil
			} else {
				// updates only if field has changed
				if staticwebsiteparagraph.Image == nil || staticwebsiteparagraph.Image != tmp {
					staticwebsiteparagraph.Image = tmp
				}
			}
		} else {
			staticwebsiteparagraph.Image = nil
		}
	}
	
	return
}

// CommitStaticWebSiteParagraph allows commit of a single staticwebsiteparagraph (if already staged)
func (backRepo *BackRepoStruct) CommitStaticWebSiteParagraph(staticwebsiteparagraph *models.StaticWebSiteParagraph) {
	backRepo.BackRepoStaticWebSiteParagraph.CommitPhaseOneInstance(staticwebsiteparagraph)
	if id, ok := backRepo.BackRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID[staticwebsiteparagraph]; ok {
		backRepo.BackRepoStaticWebSiteParagraph.CommitPhaseTwoInstance(backRepo, id, staticwebsiteparagraph)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStaticWebSiteParagraph allows checkout of a single staticwebsiteparagraph (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStaticWebSiteParagraph(staticwebsiteparagraph *models.StaticWebSiteParagraph) {
	// check if the staticwebsiteparagraph is staged
	if _, ok := backRepo.BackRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID[staticwebsiteparagraph]; ok {

		if id, ok := backRepo.BackRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphPtr_StaticWebSiteParagraphDBID[staticwebsiteparagraph]; ok {
			var staticwebsiteparagraphDB StaticWebSiteParagraphDB
			staticwebsiteparagraphDB.ID = id

			if _, err := backRepo.BackRepoStaticWebSiteParagraph.db.First(&staticwebsiteparagraphDB, id); err != nil {
				log.Fatalln("CheckoutStaticWebSiteParagraph : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStaticWebSiteParagraph.CheckoutPhaseOneInstance(&staticwebsiteparagraphDB)
			backRepo.BackRepoStaticWebSiteParagraph.CheckoutPhaseTwoInstance(backRepo, &staticwebsiteparagraphDB)
		}
	}
}

// CopyBasicFieldsFromStaticWebSiteParagraph
func (staticwebsiteparagraphDB *StaticWebSiteParagraphDB) CopyBasicFieldsFromStaticWebSiteParagraph(staticwebsiteparagraph *models.StaticWebSiteParagraph) {
	// insertion point for fields commit

	staticwebsiteparagraphDB.Name_Data.String = staticwebsiteparagraph.Name
	staticwebsiteparagraphDB.Name_Data.Valid = true

	staticwebsiteparagraphDB.LegendMarkdownContent_Data.String = staticwebsiteparagraph.LegendMarkdownContent
	staticwebsiteparagraphDB.LegendMarkdownContent_Data.Valid = true
}

// CopyBasicFieldsFromStaticWebSiteParagraph_WOP
func (staticwebsiteparagraphDB *StaticWebSiteParagraphDB) CopyBasicFieldsFromStaticWebSiteParagraph_WOP(staticwebsiteparagraph *models.StaticWebSiteParagraph_WOP) {
	// insertion point for fields commit

	staticwebsiteparagraphDB.Name_Data.String = staticwebsiteparagraph.Name
	staticwebsiteparagraphDB.Name_Data.Valid = true

	staticwebsiteparagraphDB.LegendMarkdownContent_Data.String = staticwebsiteparagraph.LegendMarkdownContent
	staticwebsiteparagraphDB.LegendMarkdownContent_Data.Valid = true
}

// CopyBasicFieldsFromStaticWebSiteParagraphWOP
func (staticwebsiteparagraphDB *StaticWebSiteParagraphDB) CopyBasicFieldsFromStaticWebSiteParagraphWOP(staticwebsiteparagraph *StaticWebSiteParagraphWOP) {
	// insertion point for fields commit

	staticwebsiteparagraphDB.Name_Data.String = staticwebsiteparagraph.Name
	staticwebsiteparagraphDB.Name_Data.Valid = true

	staticwebsiteparagraphDB.LegendMarkdownContent_Data.String = staticwebsiteparagraph.LegendMarkdownContent
	staticwebsiteparagraphDB.LegendMarkdownContent_Data.Valid = true
}

// CopyBasicFieldsToStaticWebSiteParagraph
func (staticwebsiteparagraphDB *StaticWebSiteParagraphDB) CopyBasicFieldsToStaticWebSiteParagraph(staticwebsiteparagraph *models.StaticWebSiteParagraph) {
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsiteparagraph.Name = staticwebsiteparagraphDB.Name_Data.String
	staticwebsiteparagraph.LegendMarkdownContent = staticwebsiteparagraphDB.LegendMarkdownContent_Data.String
}

// CopyBasicFieldsToStaticWebSiteParagraph_WOP
func (staticwebsiteparagraphDB *StaticWebSiteParagraphDB) CopyBasicFieldsToStaticWebSiteParagraph_WOP(staticwebsiteparagraph *models.StaticWebSiteParagraph_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsiteparagraph.Name = staticwebsiteparagraphDB.Name_Data.String
	staticwebsiteparagraph.LegendMarkdownContent = staticwebsiteparagraphDB.LegendMarkdownContent_Data.String
}

// CopyBasicFieldsToStaticWebSiteParagraphWOP
func (staticwebsiteparagraphDB *StaticWebSiteParagraphDB) CopyBasicFieldsToStaticWebSiteParagraphWOP(staticwebsiteparagraph *StaticWebSiteParagraphWOP) {
	staticwebsiteparagraph.ID = int(staticwebsiteparagraphDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	staticwebsiteparagraph.Name = staticwebsiteparagraphDB.Name_Data.String
	staticwebsiteparagraph.LegendMarkdownContent = staticwebsiteparagraphDB.LegendMarkdownContent_Data.String
}

// Backup generates a json file from a slice of all StaticWebSiteParagraphDB instances in the backrepo
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "StaticWebSiteParagraphDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StaticWebSiteParagraphDB, 0)
	for _, staticwebsiteparagraphDB := range backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB {
		forBackup = append(forBackup, staticwebsiteparagraphDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json StaticWebSiteParagraph ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json StaticWebSiteParagraph file", err.Error())
	}
}

// Backup generates a json file from a slice of all StaticWebSiteParagraphDB instances in the backrepo
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StaticWebSiteParagraphDB, 0)
	for _, staticwebsiteparagraphDB := range backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB {
		forBackup = append(forBackup, staticwebsiteparagraphDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("StaticWebSiteParagraph")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&StaticWebSiteParagraph_Fields, -1)
	for _, staticwebsiteparagraphDB := range forBackup {

		var staticwebsiteparagraphWOP StaticWebSiteParagraphWOP
		staticwebsiteparagraphDB.CopyBasicFieldsToStaticWebSiteParagraphWOP(&staticwebsiteparagraphWOP)

		row := sh.AddRow()
		row.WriteStruct(&staticwebsiteparagraphWOP, -1)
	}
}

// RestoreXL from the "StaticWebSiteParagraph" sheet all StaticWebSiteParagraphDB instances
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStaticWebSiteParagraphid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["StaticWebSiteParagraph"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStaticWebSiteParagraph.rowVisitorStaticWebSiteParagraph)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) rowVisitorStaticWebSiteParagraph(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var staticwebsiteparagraphWOP StaticWebSiteParagraphWOP
		row.ReadStruct(&staticwebsiteparagraphWOP)

		// add the unmarshalled struct to the stage
		staticwebsiteparagraphDB := new(StaticWebSiteParagraphDB)
		staticwebsiteparagraphDB.CopyBasicFieldsFromStaticWebSiteParagraphWOP(&staticwebsiteparagraphWOP)

		staticwebsiteparagraphDB_ID_atBackupTime := staticwebsiteparagraphDB.ID
		staticwebsiteparagraphDB.ID = 0
		_, err := backRepoStaticWebSiteParagraph.db.Create(staticwebsiteparagraphDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB[staticwebsiteparagraphDB.ID] = staticwebsiteparagraphDB
		BackRepoStaticWebSiteParagraphid_atBckpTime_newID[staticwebsiteparagraphDB_ID_atBackupTime] = staticwebsiteparagraphDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "StaticWebSiteParagraphDB.json" in dirPath that stores an array
// of StaticWebSiteParagraphDB and stores it in the database
// the map BackRepoStaticWebSiteParagraphid_atBckpTime_newID is updated accordingly
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStaticWebSiteParagraphid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "StaticWebSiteParagraphDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json StaticWebSiteParagraph file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*StaticWebSiteParagraphDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB
	for _, staticwebsiteparagraphDB := range forRestore {

		staticwebsiteparagraphDB_ID_atBackupTime := staticwebsiteparagraphDB.ID
		staticwebsiteparagraphDB.ID = 0
		_, err := backRepoStaticWebSiteParagraph.db.Create(staticwebsiteparagraphDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB[staticwebsiteparagraphDB.ID] = staticwebsiteparagraphDB
		BackRepoStaticWebSiteParagraphid_atBckpTime_newID[staticwebsiteparagraphDB_ID_atBackupTime] = staticwebsiteparagraphDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json StaticWebSiteParagraph file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<StaticWebSiteParagraph>id_atBckpTime_newID
// to compute new index
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) RestorePhaseTwo() {

	for _, staticwebsiteparagraphDB := range backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB {

		// next line of code is to avert unused variable compilation error
		_ = staticwebsiteparagraphDB

		// insertion point for reindexing pointers encoding
		// reindexing Image field
		if staticwebsiteparagraphDB.ImageID.Int64 != 0 {
			staticwebsiteparagraphDB.ImageID.Int64 = int64(BackRepoStaticWebSiteImageid_atBckpTime_newID[uint(staticwebsiteparagraphDB.ImageID.Int64)])
			staticwebsiteparagraphDB.ImageID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoStaticWebSiteParagraph.db.Model(staticwebsiteparagraphDB)
		_, err := db.Updates(*staticwebsiteparagraphDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoStaticWebSiteParagraph.ResetReversePointers commits all staged instances of StaticWebSiteParagraph to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, staticwebsiteparagraph := range backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphPtr {
		backRepoStaticWebSiteParagraph.ResetReversePointersInstance(backRepo, idx, staticwebsiteparagraph)
	}

	return
}

func (backRepoStaticWebSiteParagraph *BackRepoStaticWebSiteParagraphStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, staticwebsiteparagraph *models.StaticWebSiteParagraph) (Error error) {

	// fetch matching staticwebsiteparagraphDB
	if staticwebsiteparagraphDB, ok := backRepoStaticWebSiteParagraph.Map_StaticWebSiteParagraphDBID_StaticWebSiteParagraphDB[idx]; ok {
		_ = staticwebsiteparagraphDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStaticWebSiteParagraphid_atBckpTime_newID map[uint]uint
